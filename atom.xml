<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>樱の詩</title>
  
  <subtitle>Ciallo～(∠・ω&lt; )⌒★</subtitle>
  <link href="http://sion-io.github.io/atom.xml" rel="self"/>
  
  <link href="http://sion-io.github.io/"/>
  <updated>2024-05-11T15:35:38.017Z</updated>
  <id>http://sion-io.github.io/</id>
  
  <author>
    <name>冰川里奈</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Cookie Session</title>
    <link href="http://sion-io.github.io/2024/05/11/03-Cookie%E5%92%8CSession/"/>
    <id>http://sion-io.github.io/2024/05/11/03-Cookie%E5%92%8CSession/</id>
    <published>2024-05-11T06:56:01.000Z</published>
    <updated>2024-05-11T15:35:38.017Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-会话简介"><a href="#1-会话简介" class="headerlink" title="1.会话简介"></a>1.会话简介</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">会话：web应用中的会话指的是web开发中的一次通话，当通过浏览器访问应用的时候就会产生会话。浏览器关闭或者会话获取就会结束会话。</span><br></pre></td></tr></table></figure><h2 id="2-会话分类"><a href="#2-会话分类" class="headerlink" title="2.会话分类"></a>2.会话分类</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Cookie(客户端会话):使用客户端(浏览器)使用数据的存储和共享。每次请求的时候都会把会话的信息携带到服务器，从而实现多次请求之间的数据共享</span><br><span class="line">Session(服务端会话):底层采用的还是客户端会话技术(Cookie,),可以理解为Session就是一个特殊的Cookie(cookie名为JSESSIONID)。每次客户端发送请求都会把这个特殊标识(JSESSIONID)携带到服务端。服务器通过这个特殊标识找到对应的内存空间。</span><br></pre></td></tr></table></figure><h2 id="3-Cookie"><a href="#3-Cookie" class="headerlink" title="3.Cookie"></a>3.Cookie</h2><h3 id="3-1-cookie简介"><a href="#3-1-cookie简介" class="headerlink" title="3.1 cookie简介"></a>3.1 cookie简介</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cookie其实就是客户端的一个缓存文件。里面记录了客户端(浏览器)访问网站的一些内容信息</span><br></pre></td></tr></table></figure><h3 id="3-2-Cookie属性"><a href="#3-2-Cookie属性" class="headerlink" title="3.2 Cookie属性"></a>3.2 Cookie属性</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">name:cookie的名(必须的)</span><br><span class="line">value：cookie的值(必须的)；Cookie需要遵守RFC2109规范。这套规范规定了只能只用ASCII字符集中的值，所以不能使用中文</span><br><span class="line">comment:描述</span><br><span class="line">domain:域名</span><br><span class="line">maxAge:寿命。默认值为-1</span><br><span class="line">path:路径</span><br><span class="line">version:版本</span><br><span class="line"></span><br><span class="line">自学：cookie如何使用中文</span><br></pre></td></tr></table></figure><h3 id="3-3-Cookie的特性"><a href="#3-3-Cookie的特性" class="headerlink" title="3.3 Cookie的特性"></a>3.3 Cookie的特性</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1.Cookie的大小和数量是有限制的。每个网站最多存储20个Cookie。并且最大不能超过4KB。</span><br><span class="line">2.针对整个浏览器来说所有的网站Cookie总数不能超过300个</span><br><span class="line">3.当不设置maxAge的时候，默认值为-1.此时存储Cookie使用的是浏览器内存，当关闭浏览器的时候Cookie就会丢失。和Session一起死亡。</span><br><span class="line">4.当设置了maxAge的时候，Cookie就会存储到磁盘中的一个缓存文件中。浏览器关闭不会影响Cookie的寿命</span><br></pre></td></tr></table></figure><h3 id="3-4-Cookie案例"><a href="#3-4-Cookie案例" class="headerlink" title="3.4 Cookie案例"></a>3.4 Cookie案例</h3><h4 id="3-4-1-一周免登录"><a href="#3-4-1-一周免登录" class="headerlink" title="3.4.1 一周免登录"></a>3.4.1 一周免登录</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;form method=&quot;post&quot; action=&quot;$&#123;ctx&#125;/login&quot;&gt;</span><br><span class="line">  用户名:&lt;input type=&quot;text&quot; name=&quot;userName&quot; value=&quot;$&#123;userName&#125;&quot;&gt;&lt;br/&gt;</span><br><span class="line">  密码:&lt;input type=&quot;password&quot; name=&quot;userPassword&quot; value=&quot;$&#123;userPassword&#125;&quot;&gt;&lt;br/&gt;</span><br><span class="line">  &lt;input type=&quot;checkbox&quot; name=&quot;ck&quot;&gt;一周免登陆</span><br><span class="line">  &lt;input type=&quot;submit&quot; value=&quot;登录&quot;&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="string">&quot;tologin&quot;</span> :</span><br><span class="line"><span class="comment">//获取cookie</span></span><br><span class="line">Cookie[] cookies = req.getCookies();</span><br><span class="line"><span class="keyword">if</span>(cookies!=<span class="literal">null</span>)&#123;</span><br><span class="line">    <span class="keyword">for</span> (Cookie cookie : cookies) &#123;</span><br><span class="line">        <span class="keyword">if</span>(cookie.getName().equals(<span class="string">&quot;userInfo&quot;</span>))&#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> cookie.getValue();</span><br><span class="line">            String[] info = value.split(<span class="string">&quot;-&quot;</span>);</span><br><span class="line">            req.setAttribute(<span class="string">&quot;userName&quot;</span>,info[<span class="number">0</span>]);</span><br><span class="line">            req.setAttribute(<span class="string">&quot;userPassword&quot;</span>,info[<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">req.getRequestDispatcher(<span class="string">&quot;/jsp/login.jsp&quot;</span>).forward(req,resp);</span><br><span class="line"><span class="keyword">break</span>;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="string">&quot;login&quot;</span> :</span><br><span class="line"><span class="type">String</span> <span class="variable">userName</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;userName&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">userPassword</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;userPassword&quot;</span>);</span><br><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">0</span>, userName, userPassword);</span><br><span class="line"><span class="type">String</span> <span class="variable">ck</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;ck&quot;</span>);<span class="comment">//如果复选框被选中 返回的数据的 on</span></span><br><span class="line"><span class="type">UserService</span> <span class="variable">userService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserServiceImpl</span>();</span><br><span class="line"><span class="type">Integer</span> <span class="variable">count</span> <span class="operator">=</span> userService.login(user);</span><br><span class="line"><span class="keyword">if</span>(count&gt;<span class="number">0</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="string">&quot;on&quot;</span>.equals(ck))&#123;</span><br><span class="line">        <span class="comment">//创建Cookie</span></span><br><span class="line">        <span class="type">Cookie</span> <span class="variable">cookie</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cookie</span>(<span class="string">&quot;userInfo&quot;</span>, userName + <span class="string">&quot;-&quot;</span> + userPassword);</span><br><span class="line">        cookie.setMaxAge(<span class="number">60</span>*<span class="number">60</span>*<span class="number">24</span>*<span class="number">7</span>);</span><br><span class="line">        <span class="comment">//存储cookie</span></span><br><span class="line">        resp.addCookie(cookie);</span><br><span class="line">    &#125;</span><br><span class="line">    resp.sendRedirect(<span class="string">&quot;findall&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    req.getRequestDispatcher(<span class="string">&quot;/jsp/login.jsp&quot;</span>).forward(req,resp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-HttpSession"><a href="#4-HttpSession" class="headerlink" title="4.HttpSession"></a>4.HttpSession</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">1.简介</span><br><span class="line">HttpSession其实就是一个服务端的会话对象。但是其本质还是一个Cookie(是一个特殊的cookie)，它是由服务器自动创建的一个Cookie。此Cookie的名字为JSESSIONID。值是服务器分配的唯一标识。</span><br><span class="line"></span><br><span class="line">当我们使用HttpSession的时候，只要浏览器本身没有禁用Cookie，那么请求就会JSESSIONID携带到服务器，服务器根据JSESSIONID的值获取对应的HttpSession对象。如果没有找到就会创建一个，多次请求携带的JSESSIONID都是同一个。并且此Cookie没有设置过期时间，所以浏览器关闭就消亡(也对应了Session的生命周期)</span><br><span class="line"></span><br><span class="line">2.HttpSession的钝化和活化</span><br><span class="line">钝化:持久化(把长久不使用但是又没有过期的HttpSession进行序列化到磁盘上)</span><br><span class="line">活化：反序列化</span><br><span class="line"></span><br><span class="line">钝化和活化的实际:不需要程序员操作。服务器自动完成。</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-会话简介&quot;&gt;&lt;a href=&quot;#1-会话简介&quot; class=&quot;headerlink&quot; title=&quot;1.会话简介&quot;&gt;&lt;/a&gt;1.会话简介&lt;/h2&gt;&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=</summary>
      
    
    
    
    
    <category term="Java" scheme="http://sion-io.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>JSP</title>
    <link href="http://sion-io.github.io/2024/05/11/02-JSP/"/>
    <id>http://sion-io.github.io/2024/05/11/02-JSP/</id>
    <published>2024-05-11T06:56:01.000Z</published>
    <updated>2024-05-11T15:35:38.008Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JSP"><a href="#JSP" class="headerlink" title="JSP"></a>JSP</h1><h2 id="1-JSP简述"><a href="#1-JSP简述" class="headerlink" title="1.JSP简述"></a>1.JSP简述</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">JSP全称是Java Server Pages。本质来说就是一个Servlet、他和Servlet组成在一起是一套J2EE的规范。</span><br><span class="line">和HTML的区别就是:</span><br><span class="line">HTML是纯静态的。不能包含Java代码。无法动态的加载，修改，删除数据</span><br><span class="line">Servlet：通过响应对象可以给空白页写入html元素，但是开发效率低</span><br><span class="line">JSP:支持HTML的标签，同时具备Servlet的动态输出功能。 可以理解为HTML+Servlet</span><br></pre></td></tr></table></figure><h2 id="2-入门程序"><a href="#2-入门程序" class="headerlink" title="2.入门程序"></a>2.入门程序</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1.在maven项目中添加web模块</span><br><span class="line">2.webapp目录中创建jsp页面</span><br><span class="line">3.编写页面</span><br><span class="line">4.运行测试</span><br></pre></td></tr></table></figure><h2 id="3-Jsp运行原理"><a href="#3-Jsp运行原理" class="headerlink" title="3.Jsp运行原理"></a>3.Jsp运行原理</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">客户端发送请求到服务器，tomcat服务器解析请求并且处理请求，然后转发到指定的JSP页面。Tomcat会将JSP页面转换成Servlet的Java文件，JVM将.java文件编译成.class文件，响应执行.class文件</span><br></pre></td></tr></table></figure><h2 id="4-JSP应用"><a href="#4-JSP应用" class="headerlink" title="4.JSP应用"></a>4.JSP应用</h2><h3 id="4-1JSP语法"><a href="#4-1JSP语法" class="headerlink" title="4.1JSP语法"></a>4.1JSP语法</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">1.Java代码块</span><br><span class="line">语法:&lt;%Java代码块%&gt;</span><br><span class="line">案例:</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;%</span><br><span class="line">String str = &quot;messsage&quot;;</span><br><span class="line">System.out.println(str)</span><br><span class="line">%&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">注意：在实际开发中不使用此种方式开发Java代码。因为里面的内容都是Tomcat负责编译，编译之后会成为Servlet的成员变量。只会给tomcat增加额外的负担。</span><br><span class="line"></span><br><span class="line">2.JSP表达式</span><br><span class="line">语法：&lt;%= %&gt; (实际开发中也不使用)</span><br><span class="line">案例:&lt;%=1+6==7 %&gt;</span><br><span class="line">表达式的内容最后是由out.println(&quot;表达式&quot;)</span><br><span class="line"></span><br><span class="line">3.JSP声明:在JSP页面中声明一些Java变量，方法，静态方法等</span><br><span class="line">语法：&lt;%! %&gt; (实际开发中也不使用)</span><br><span class="line">案例:</span><br><span class="line">&lt;%! </span><br><span class="line">public void method01()&#123;</span><br><span class="line">        System.out.println(&quot;这是JSP的声明方法&quot;)</span><br><span class="line">&#125;</span><br><span class="line">%&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    method01();</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><h3 id="4-2-JSP指令-3"><a href="#4-2-JSP指令-3" class="headerlink" title="4.2 JSP指令(3)"></a>4.2 JSP指令(3)</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">指令必须使用&lt;%@ %&gt;</span><br><span class="line">1.page指令</span><br><span class="line">简介:创建一个jsp页面后默认就存在了page指令</span><br><span class="line">page执行的属性和作用:</span><br><span class="line">contentType:告知引擎，响应正文使用的mime类型</span><br><span class="line">language：告知引擎，脚本使用的语言，默认是Java，不写不行。</span><br><span class="line">extends：告知引擎，当前jsp对应的servlet的父类是谁。不需要则不编写</span><br><span class="line">import：告知引擎引入相关依赖(.jar)</span><br><span class="line">注意:JSP在默认情况下也导入以下几个包。java.lang.*;javax.servlet.*;javax.servlet.http.*;javax.servlet.*javax.servlet.jsp.*</span><br><span class="line">session:告知引擎是否产生httpSession对象，默认为true。</span><br><span class="line">buffer：告知引擎设置缓存大小。默认为8kb；</span><br><span class="line">errorPage：告知引擎页面发生异常后转发到那个页面。一般在开发中使用web.xml中配置全局错误页面取代它</span><br><span class="line">isErrorPage：告知引擎是否捕获异常。默认值为false。如果设置为true，那么页面中就可以使用exception对象(隐式对象)</span><br><span class="line">isELIgnored:告知引擎是否忽略EL表达式。默认为false。一般也不会更改</span><br><span class="line">pageEncoding：告知引擎编译JSP的时候使用的编码格式</span><br><span class="line"></span><br><span class="line">2.include指令</span><br><span class="line">语法:&lt;%@ file=&quot;&quot; %&gt;</span><br><span class="line">作用：该指令用于包含外部页面(静态包含)</span><br><span class="line">引用场景:一个网站包含很多页面，这些页面一般都有公共的头和尾。所以一般把头尾做成两个页面，其他页面引用这两个头尾页面</span><br><span class="line">案例:</span><br><span class="line">&lt;%@ includ file = &quot;head.jsp&quot;%&gt;</span><br><span class="line"></span><br><span class="line">3.taglib指令</span><br><span class="line">语法:&lt;%@ taglib prefix=&quot;&quot; uri=&quot;&quot; %&gt;</span><br><span class="line">作用:引入外部的标签库。jsp页面中默认就引入了html和jsp的标签库</span><br><span class="line">属性:</span><br><span class="line">uri:外部标签的地址</span><br><span class="line">prefix:使用外部标签库的前缀</span><br></pre></td></tr></table></figure><h3 id="4-3-JSP动作-6"><a href="#4-3-JSP动作-6" class="headerlink" title="4.3 JSP动作(6)"></a>4.3 JSP动作(6)</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">1.jsp:include(动态包含)</span><br><span class="line">语法:&lt;jsp:include page=&quot;地址&quot;&gt;</span><br><span class="line">案例：&lt;jsp:include page = &quot;head.jsp&quot;&gt;&lt;/jsp:include&gt;</span><br><span class="line">动态包含和静态包含的区别:</span><br><span class="line">最终的结果和目的是一样的。</span><br><span class="line">主要区别是静态包含(指令)是把两个页面合成一个页面，也就是说编译后只产生一个.java文件(先包含再编译)</span><br><span class="line">动态包含是将两个页面分别进行编译，包含者和被包含者属于调用关系(先编译再调用)</span><br><span class="line"></span><br><span class="line">2.jsp:useBean;jsp:setProperty;getProperty </span><br><span class="line">&lt;%--等价于 Student stu = new Student()--%&gt;</span><br><span class="line">&lt;jsp:useBean id=&quot;stu&quot; class=&quot;com.lxk.pojo.Student&quot;&gt;&lt;/jsp:useBean&gt;</span><br><span class="line">&lt;%-- 等价于 stu.setStudentName(&quot;张雨薇&quot;)--%&gt;</span><br><span class="line">&lt;jsp:setProperty name=&quot;stu&quot; property=&quot;studentName&quot; value=&quot;张雨薇&quot;&gt;&lt;/jsp:setProperty&gt; </span><br><span class="line">&lt;%--等价于 stu.getStudentName() 直接把结果输出带页面上--%&gt;</span><br><span class="line">&lt;jsp:getProperty name=&quot;stu&quot; property=&quot;studentName&quot;/&gt;</span><br><span class="line"></span><br><span class="line">3.jsp:forward；jsp:param</span><br><span class="line">&lt;jsp:forward page=&quot;adduser.jsp&quot;&gt;</span><br><span class="line">    &lt;jsp:param name=&quot;userId&quot; value=&quot;123&quot;/&gt;</span><br><span class="line">&lt;/jsp:forward&gt;</span><br><span class="line">--------获取参数</span><br><span class="line">&lt;%= request.getParameter(&quot;userId&quot;)%&gt;</span><br></pre></td></tr></table></figure><h3 id="4-4-JSP隐式对象-9"><a href="#4-4-JSP隐式对象-9" class="headerlink" title="4.4 JSP隐式对象(9)"></a>4.4 JSP隐式对象(9)</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">JSP的隐式对象就是JSP的内置对象，是JSP事先创建好的对象，不需要new就可以直接使用。</span><br><span class="line">注意:在任何JSP页面中都可以使用，但是只能在表达式和脚本中使用</span><br><span class="line"></span><br><span class="line">分类:</span><br><span class="line">输入输出对象:request，response，out</span><br><span class="line">作用域:session，application，pageContext</span><br><span class="line">servlet对象:page,config</span><br><span class="line">错误对象:exception</span><br><span class="line"></span><br><span class="line">输入输出对象:</span><br><span class="line">request，response和Servlet中的是同一个对象</span><br><span class="line">out:主要用于页面内容的输出，一般不使用。一般使用EL和JSTL</span><br><span class="line"></span><br><span class="line">作用域对象和Servlet的四大作用域一样；</span><br><span class="line"></span><br><span class="line">servlet对象：</span><br><span class="line">page:page对象指的是当前页面本身，有点类似于Java中的this</span><br><span class="line">config：作用就是当前JSP转成servlet之后的配置信息。等价于servlet中的ServletConfig</span><br><span class="line"></span><br><span class="line">错误对象:</span><br><span class="line">使用前提是page指令中开启异常捕获。</span><br><span class="line">开发不使用，错误统一配置</span><br></pre></td></tr></table></figure><h2 id="5-EL表达式"><a href="#5-EL表达式" class="headerlink" title="5.EL表达式"></a>5.EL表达式</h2><h3 id="5-1-EL表达式简介"><a href="#5-1-EL表达式简介" class="headerlink" title="5.1 EL表达式简介"></a>5.1 EL表达式简介</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">EL表达式是JSP/Servlet规范中的一部分。主要作用是JSP中获取数据(使用EL表达式取代JSP表达式)从而达到JSP脱离Java代码块和Java表达式</span><br><span class="line"></span><br><span class="line">语法:$&#123;表达式&#125;</span><br></pre></td></tr></table></figure><h3 id="5-2-基本应用"><a href="#5-2-基本应用" class="headerlink" title="5.2 基本应用"></a>5.2 基本应用</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;</span><br><span class="line">        //存储一个String</span><br><span class="line">        req.setAttribute(&quot;name&quot;,&quot;张雨薇&quot;);</span><br><span class="line">        //存储一个引用数据类型</span><br><span class="line">        Student student = new Student();</span><br><span class="line">        student.setStudentId(1);</span><br><span class="line">        student.setStudentName(&quot;张三&quot;);</span><br><span class="line">        req.setAttribute(&quot;student&quot;,student);</span><br><span class="line">        //集合类型</span><br><span class="line">        ArrayList&lt;Student&gt; list = new ArrayList&lt;&gt;();</span><br><span class="line">        Student student2 = new Student();</span><br><span class="line">        student2.setStudentId(2);</span><br><span class="line">        student2.setStudentName(&quot;王凤荣&quot;);</span><br><span class="line">        Student student3 = new Student();</span><br><span class="line">        student3.setStudentId(3);</span><br><span class="line">        student3.setStudentName(&quot;麻子&quot;);</span><br><span class="line">        list.add(student2);</span><br><span class="line">        list.add(student3);</span><br><span class="line">        req.setAttribute(&quot;list&quot;,list);</span><br><span class="line">        //map类型</span><br><span class="line">        HashMap&lt;String, Student&gt; map = new HashMap&lt;&gt;();</span><br><span class="line">        Student student4 = new Student();</span><br><span class="line">        student4.setStudentId(4);</span><br><span class="line">        student4.setStudentName(&quot;遛虞波狗东西&quot;);</span><br><span class="line">        student4.setStudentGender(&quot;不好说&quot;);</span><br><span class="line">        map.put(student4.getStudentName(),student4);</span><br><span class="line">        req.setAttribute(&quot;map&quot;,map);</span><br><span class="line">        req.getRequestDispatcher(&quot;/jsp/eltest.jsp&quot;).forward(req,resp);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">获取String类型的数据</span><br><span class="line">$&#123;name&#125;</span><br><span class="line">&lt;hr&gt;</span><br><span class="line">获取student对象的数据</span><br><span class="line">$&#123;student&#125;</span><br><span class="line">&lt;hr&gt;</span><br><span class="line">获取student对象中的属性的数据</span><br><span class="line">$&#123;student.studentId&#125;</span><br><span class="line">$&#123;student.studentName&#125;</span><br><span class="line">&lt;hr&gt;</span><br><span class="line">获取集合中的数据</span><br><span class="line">$&#123;list[0].studentId&#125;</span><br><span class="line">$&#123;list[0].studentName&#125;</span><br><span class="line">&lt;hr&gt;</span><br><span class="line">获取map中的数据</span><br><span class="line">$&#123;map.key.studentGender&#125;</span><br></pre></td></tr></table></figure><h3 id="5-3-EL表达式运算符"><a href="#5-3-EL表达式运算符" class="headerlink" title="5.3 EL表达式运算符"></a>5.3 EL表达式运算符</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">性别:&lt;input type=&quot;radio&quot; value = &quot;男&quot; name=&quot;gender&quot; $&#123;student.gender==&quot;男&quot;?&quot;checked&quot;:&quot;&quot;&#125;&gt;男</span><br><span class="line">&lt;input type=&quot;radio&quot; value = &quot;女&quot; name=&quot;gender&quot; $&#123;student.gender==&quot;女&quot;?&quot;checked&quot;:&quot;&quot;&#125;&gt;女</span><br></pre></td></tr></table></figure><h2 id="6-JSTL表达式"><a href="#6-JSTL表达式" class="headerlink" title="6.JSTL表达式"></a>6.JSTL表达式</h2><h3 id="6-1-JSTL简介"><a href="#6-1-JSTL简介" class="headerlink" title="6.1 JSTL简介"></a>6.1 JSTL简介</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">它是服务于JSP技术的一个第三方标签库。右apache实现的。主要是用于在JSP页面中的逻辑处理。</span><br><span class="line">JSTL标签库由五部分组成:Core,fmt,Funcations,SQL,XML。一般只使用Core。</span><br><span class="line">Core:核心标签库。只要用于逻辑处理</span><br><span class="line">Fmt:实现国际化</span><br><span class="line">Funcations：EL函数库。里面主要提供了EL表达式可以使用的方法</span><br><span class="line">SQL:用于操作数据源</span><br><span class="line">XML：操作XML</span><br></pre></td></tr></table></figure><h3 id="6-2-JSTL使用"><a href="#6-2-JSTL使用" class="headerlink" title="6.2 JSTL使用"></a>6.2 JSTL使用</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">1.引入依赖</span><br><span class="line">2.在jsp中使用指令引入标签库</span><br><span class="line">3.使用</span><br><span class="line">3.1 遍历</span><br><span class="line">标签名:c:forEach</span><br><span class="line">属性:</span><br><span class="line">item：需要遍历的集合。此处使用EL表达式获取作用域中的数据</span><br><span class="line">var：把当前遍历的元素放入到page作用域中，var的属性的值作为page作用域中的key，当前的遍历的元素作为value</span><br><span class="line">begin：开始遍历的索引</span><br><span class="line">end：结束遍历的索引</span><br><span class="line">step：每次遍历的步长</span><br><span class="line">varStatus：它是计数器对象，记录索引和数据个数</span><br><span class="line">案例:</span><br><span class="line">    &lt;c:forEach items=&quot;$&#123;list&#125;&quot; var=&quot;student&quot;&gt;</span><br><span class="line">        $&#123;student.studentId&#125;</span><br><span class="line">        $&#123;student.studentName&#125;</span><br><span class="line">    &lt;/c:forEach&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    &lt;c:forEach begin=&quot;1&quot; end=&quot;$&#123;pageNum&#125;&quot; step=&quot;1&quot; var=&quot;i&quot;&gt;</span><br><span class="line">        &lt;a href=&quot;#&quot;&gt;$&#123;i&#125;&lt;/a&gt;</span><br><span class="line">    &lt;/c:forEach&gt;</span><br><span class="line">    </span><br><span class="line">3.2 判断</span><br><span class="line">标签名:c:if</span><br><span class="line">属性:</span><br><span class="line">test:表达式返回的结果决定当前JSTL标签内的代码是否执行</span><br><span class="line">案例：</span><br><span class="line">&lt;c:if test=&quot;$&#123;student.age&gt;18&#125;&quot;&gt;</span><br><span class="line">&lt;span&gt;成年1&lt;/span&gt;</span><br><span class="line">&lt;/c:if&gt;</span><br><span class="line">&lt;c:if test=&quot;$&#123;student.age&gt;20&#125;&quot;&gt;</span><br><span class="line">&lt;span&gt;成年2&lt;/span&gt;</span><br><span class="line">&lt;/c:if&gt;</span><br><span class="line"></span><br><span class="line">&lt;c:choose&gt;</span><br><span class="line">    &lt;c:when test=&quot;$&#123;student.age&lt;18&#125;&quot;&gt;&lt;/c:when&gt;</span><br><span class="line">    &lt;c:when test=&quot;$&#123;student.age&lt;18&#125;&quot;&gt;&lt;/c:when&gt;</span><br><span class="line">    &lt;c:when test=&quot;$&#123;student.age&lt;18&#125;&quot;&gt;&lt;/c:when&gt;</span><br><span class="line">&lt;/c:choose&gt;</span><br><span class="line"></span><br><span class="line">3.2 存储</span><br><span class="line">标签名:c:set</span><br><span class="line">属性:</span><br><span class="line">var:key</span><br><span class="line">value:value</span><br><span class="line">scope:作用域</span><br><span class="line">案例：</span><br><span class="line">&lt;c:set var=&quot;ctx&quot; value=&quot;$&#123;pageContext.request.contextPath&#125;&quot;&gt;&lt;/c:set&gt;</span><br><span class="line">&lt;c:out value=&quot;$&#123;ctx&#125;&quot;&gt;&lt;/c:out&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;JSP&quot;&gt;&lt;a href=&quot;#JSP&quot; class=&quot;headerlink&quot; title=&quot;JSP&quot;&gt;&lt;/a&gt;JSP&lt;/h1&gt;&lt;h2 id=&quot;1-JSP简述&quot;&gt;&lt;a href=&quot;#1-JSP简述&quot; class=&quot;headerlink&quot; title=&quot;1.JSP简述</summary>
      
    
    
    
    
    <category term="Java" scheme="http://sion-io.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Spring</title>
    <link href="http://sion-io.github.io/2024/05/11/04-%E8%BF%87%E6%BB%A4%E5%99%A8%E5%92%8C%E7%9B%91%E5%90%AC%E5%99%A8/"/>
    <id>http://sion-io.github.io/2024/05/11/04-%E8%BF%87%E6%BB%A4%E5%99%A8%E5%92%8C%E7%9B%91%E5%90%AC%E5%99%A8/</id>
    <published>2024-05-11T06:56:01.000Z</published>
    <updated>2024-05-11T15:35:37.985Z</updated>
    
    <content type="html"><![CDATA[<h1 id="过滤器和监听器"><a href="#过滤器和监听器" class="headerlink" title="过滤器和监听器"></a>过滤器和监听器</h1><h2 id="1-过滤器"><a href="#1-过滤器" class="headerlink" title="1.过滤器"></a>1.过滤器</h2><h3 id="1-1-简介"><a href="#1-1-简介" class="headerlink" title="1.1 简介"></a>1.1 简介</h3><p>过滤器就是Filter，是Java Web中的三大组件之一。另外两个组件是Servlet，Listener。<br>过滤器主要用于对web资源的访问进行拦截，并且在拦截后进行统一的处理。<br>应用场景:中文乱码问题，URL级别的权限问题。过滤敏感词汇问题。</p><h3 id="1-2-编写入门过滤器"><a href="#1-2-编写入门过滤器" class="headerlink" title="1.2 编写入门过滤器"></a>1.2 编写入门过滤器</h3><p>public class FilterDemo implements Filter {</p><pre><code>@Overridepublic void init(FilterConfig filterConfig) throws ServletException &#123;    //初始化方法&#125;@Overridepublic void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException &#123;    System.out.println(&quot;拦截到了&quot;);    chain.doFilter(request,response);&#125;@Overridepublic void destroy() &#123;    //销毁的方法&#125;</code></pre><p>}</p><filter>    <filter-name>filedemo</filter-name>    <filter-class>com.lxk.filter.FilterDemo</filter-class></filter><filter-mapping>    <filter-name>filedemo</filter-name>    <!--对所有的请求进行拦截-->    <url-pattern>/*</url-pattern></filter-mapping><h3 id="1-3注解开发"><a href="#1-3注解开发" class="headerlink" title="1.3注解开发"></a>1.3注解开发</h3><p>@WebFilter(filterName &#x3D; “filedemo”,urlPatterns &#x3D; {“&#x2F;*”})<br>属性:<br>filterName:拦截器的名称<br>value:指定哪些请求交给过滤器拦截<br>urlPatterns:同上。但是两者不能同时配置<br>servletName:指定此过滤器作用于哪些Servlet<br>intParams:初始化参数<br>description：拦截器的描述</p><h3 id="1-4-生命周期"><a href="#1-4-生命周期" class="headerlink" title="1.4 生命周期"></a>1.4 生命周期</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">当应用加载的时候执行过滤器的初始化和实例化。只要服务器提供服务此对象一直存在，当服务器宕机时过滤器对象也消亡。和Servlet一样都是单例的。</span><br></pre></td></tr></table></figure><h3 id="1-5-过滤器解决乱码问题"><a href="#1-5-过滤器解决乱码问题" class="headerlink" title="1.5 过滤器解决乱码问题"></a>1.5 过滤器解决乱码问题</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">@WebFilter(urlPatterns = &#123;&quot;/*&quot;&#125;,initParams = &#123;@WebInitParam(name = &quot;charset&quot;,value =&quot;UTF-8&quot;)&#125;)</span><br><span class="line">public class CharEncodingFilter implements Filter &#123;</span><br><span class="line">    String charset=null;</span><br><span class="line">    @Override</span><br><span class="line">    public void init(FilterConfig filterConfig) throws ServletException &#123;</span><br><span class="line">        charset = filterConfig.getInitParameter(&quot;charset&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException &#123;</span><br><span class="line">        HttpServletRequest req = (HttpServletRequest)request;</span><br><span class="line">        HttpServletResponse resp = (HttpServletResponse)response;</span><br><span class="line">        req.setCharacterEncoding(charset);</span><br><span class="line">        chain.doFilter(request,response);</span><br><span class="line">        resp.setCharacterEncoding(charset);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void destroy() &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-6-过滤器显示权限"><a href="#1-6-过滤器显示权限" class="headerlink" title="1.6 过滤器显示权限"></a>1.6 过滤器显示权限</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">@WebFilter(urlPatterns = &#123;&quot;/*&quot;&#125;)</span><br><span class="line">public class LoginFilter implements Filter &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void init(FilterConfig filterConfig) throws ServletException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException &#123;</span><br><span class="line">        //1.获取支持Http协议的两个对象</span><br><span class="line">        HttpServletRequest req = (HttpServletRequest)request;</span><br><span class="line">        HttpServletResponse resp = (HttpServletResponse)response;</span><br><span class="line">        //2.获取请求的url</span><br><span class="line">        String uri = req.getRequestURI();</span><br><span class="line">        //3.获取请求后缀</span><br><span class="line">        //localhost:8080/项目名/tologin | login | fildall |add |update |Delete</span><br><span class="line">        String suffix = uri.substring(uri.lastIndexOf(&quot;/&quot;) + 1);</span><br><span class="line">        //4.根据后缀判断是否放行</span><br><span class="line">        if(&quot;login&quot;.equals(suffix) ||&quot;tologin&quot;.equals(suffix))&#123;</span><br><span class="line">            chain.doFilter(request,response);</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            //5.判断是否已经登录</span><br><span class="line">            String loginCode = (String)req.getSession().getAttribute(&quot;loginCode&quot;);</span><br><span class="line">            if(&quot;success&quot;.equals(loginCode))&#123;</span><br><span class="line">                //已经登录</span><br><span class="line">                chain.doFilter(request,response);</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                //既没登录也不是访问登录   不放行</span><br><span class="line">                resp.sendRedirect(&quot;tologin&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void destroy() &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">----------------------------------------------------</span><br><span class="line">登录方法中加入以下代码:</span><br><span class="line">req.getSession().setAttribute(&quot;loginCode&quot;,&quot;success&quot;); //登录成功的标识</span><br></pre></td></tr></table></figure><h2 id="2-监听器"><a href="#2-监听器" class="headerlink" title="2.监听器"></a>2.监听器</h2><h3 id="2-1-观察者模式"><a href="#2-1-观察者模式" class="headerlink" title="2.1 观察者模式"></a>2.1 观察者模式</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">观察者模式三元素:</span><br><span class="line">1.事件源:触发事件的对象</span><br><span class="line">2.事件:触发的动作</span><br><span class="line">3.监听器:当事假触发的时候所作的事情</span><br></pre></td></tr></table></figure><h3 id="2-2-Servlet中的监听器"><a href="#2-2-Servlet中的监听器" class="headerlink" title="2.2 Servlet中的监听器"></a>2.2 Servlet中的监听器</h3><h4 id="2-2-1-监听对象创建"><a href="#2-2-1-监听对象创建" class="headerlink" title="2.2.1 监听对象创建"></a>2.2.1 监听对象创建</h4><h5 id="2-2-1-1-ServletContextListener"><a href="#2-2-1-1-ServletContextListener" class="headerlink" title="2.2.1.1 ServletContextListener"></a>2.2.1.1 ServletContextListener</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">此监听器是用于监听ServletContext对象的创建以及销毁</span><br><span class="line">事件源:ServletContext对象</span><br><span class="line">事件:创建,销毁</span><br><span class="line">监听器源码:</span><br><span class="line">public interface ServletContextListener extends EventListener &#123;</span><br><span class="line">//ServletContext对象创建的时候执行的方法</span><br><span class="line">    public void contextInitialized(ServletContextEvent sce);</span><br><span class="line">    //ServletContext对象销毁的时候执行的方法</span><br><span class="line">    public void contextDestroyed(ServletContextEvent sce);</span><br><span class="line">&#125;</span><br><span class="line">案例:</span><br><span class="line">@WebListener</span><br><span class="line">public class ServletContextListenerImpl implements ServletContextListener &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void contextInitialized(ServletContextEvent sce) &#123;</span><br><span class="line">        System.out.println(&quot;哥们的项目的启动&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void contextDestroyed(ServletContextEvent sce) &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">配置监听器生效</span><br><span class="line">&lt;listener&gt;</span><br><span class="line">&lt;listener-class&gt;com.lxk.listener.ServletContextListenerImpl&lt;/listener-class&gt;</span><br><span class="line">&lt;/listener&gt;</span><br><span class="line"></span><br><span class="line">注解生效</span><br><span class="line">@WebListener</span><br></pre></td></tr></table></figure><h5 id="2-2-1-2-HttpSessionListener"><a href="#2-2-1-2-HttpSessionListener" class="headerlink" title="2.2.1.2 HttpSessionListener"></a>2.2.1.2 HttpSessionListener</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">此监听器用于监听HttpSession对象的创建以及销毁</span><br><span class="line">源码:</span><br><span class="line">public interface HttpSessionListener extends EventListener &#123;</span><br><span class="line">//HttpSession对象创建的时候执行的方法</span><br><span class="line">    public void sessionCreated(HttpSessionEvent se);</span><br><span class="line">    //HttpSession对象销毁的时候执行的方法</span><br><span class="line">    public void sessionDestroyed(HttpSessionEvent se);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-2-1-3-ServletRequestListener"><a href="#2-2-1-3-ServletRequestListener" class="headerlink" title="2.2.1.3 ServletRequestListener"></a>2.2.1.3 ServletRequestListener</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">此监听器用于监听ServletRequest对象的创建以及销毁</span><br><span class="line">源码:</span><br><span class="line">public interface ServletRequestListener extends EventListener &#123;</span><br><span class="line">//ServletRequest对象销毁的时候执行的方法</span><br><span class="line">    public void requestDestroyed(ServletRequestEvent sre);</span><br><span class="line">//ServletRequest对象创建的时候执行的方法</span><br><span class="line">    public void requestInitialized(ServletRequestEvent sre);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="2-2-2-监听域中属性变化"><a href="#2-2-2-监听域中属性变化" class="headerlink" title="2.2.2 监听域中属性变化"></a>2.2.2 监听域中属性变化</h4><h5 id="2-2-2-1-ServletContextAttributeListener"><a href="#2-2-2-1-ServletContextAttributeListener" class="headerlink" title="2.2.2.1 ServletContextAttributeListener"></a>2.2.2.1 ServletContextAttributeListener</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">此监听器用于监听ServletContext中的属性发生改变</span><br><span class="line">源码:</span><br><span class="line">public interface ServletContextAttributeListener extends EventListener &#123;</span><br><span class="line">//当ServletContext对象执行了setAttribute(key,value)方法的时候执行</span><br><span class="line">    public void attributeAdded(ServletContextAttributeEvent event);</span><br><span class="line">//域中发生删除的时候执行此方法</span><br><span class="line">    public void attributeRemoved(ServletContextAttributeEvent event);</span><br><span class="line">//域中发生替换的时候执行此方法</span><br><span class="line">    public void attributeReplaced(ServletContextAttributeEvent event);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-2-2-2-HttpSessionAttributeListener"><a href="#2-2-2-2-HttpSessionAttributeListener" class="headerlink" title="2.2.2.2 HttpSessionAttributeListener"></a>2.2.2.2 HttpSessionAttributeListener</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">此监听器用于监听HttpSession中的属性发生改变</span><br></pre></td></tr></table></figure><h5 id="2-2-2-3-ServletRequestAttributeListener"><a href="#2-2-2-3-ServletRequestAttributeListener" class="headerlink" title="2.2.2.3 ServletRequestAttributeListener"></a>2.2.2.3 ServletRequestAttributeListener</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">此监听器用于监听ServletRequest中的属性发生改变</span><br></pre></td></tr></table></figure><h4 id="2-2-3-感知型监听器"><a href="#2-2-3-感知型监听器" class="headerlink" title="2.2.3 感知型监听器"></a>2.2.3 感知型监听器</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">HttpSessionBindingListener：用于监听数据加入或者删除到session域</span><br><span class="line">HttpSessionActivationListener：用于感知会话域中对象的钝化和活化</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;过滤器和监听器&quot;&gt;&lt;a href=&quot;#过滤器和监听器&quot; class=&quot;headerlink&quot; title=&quot;过滤器和监听器&quot;&gt;&lt;/a&gt;过滤器和监听器&lt;/h1&gt;&lt;h2 id=&quot;1-过滤器&quot;&gt;&lt;a href=&quot;#1-过滤器&quot; class=&quot;headerlink&quot; ti</summary>
      
    
    
    
    
    <category term="Java" scheme="http://sion-io.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>css</title>
    <link href="http://sion-io.github.io/2024/05/11/CSS(2)/"/>
    <id>http://sion-io.github.io/2024/05/11/CSS(2)/</id>
    <published>2024-05-11T06:56:01.000Z</published>
    <updated>2024-05-11T15:35:37.998Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h1><h2 id="1-CSS简介"><a href="#1-CSS简介" class="headerlink" title="1.CSS简介"></a>1.CSS简介</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CSS：层叠样式表</span><br><span class="line">CSS也是一种标记语言，用于给HTML的元素结构设置样式。样式:文字大小。颜色。宽高等等。</span><br><span class="line">总结一句话就是CSS就是用于美化HTML</span><br></pre></td></tr></table></figure><h2 id="2-CSS的编写位置"><a href="#2-CSS的编写位置" class="headerlink" title="2.CSS的编写位置"></a>2.CSS的编写位置</h2><h3 id="2-1-行内样式"><a href="#2-1-行内样式" class="headerlink" title="2.1  行内样式"></a>2.1  行内样式</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">行内样式写在标签的style属性中。</span><br><span class="line">语法:</span><br><span class="line">&lt;标签 style=&quot;k:v;k2:v2&quot;&gt;&lt;/标签&gt;</span><br><span class="line">注意:style的属性值不能随便编写。需要遵守CSS的语法规范。就是k:v组成，多组样式之间用;隔开。</span><br><span class="line">案例:&lt;h1 style=&quot;font-size: 200px;color: red;&quot;&gt;这是H1的标签内容&lt;/h1&gt;</span><br><span class="line">缺点:</span><br><span class="line">1.书写繁琐并且不能复用</span><br><span class="line">2.违背了结构和样式分离的思想</span><br></pre></td></tr></table></figure><h3 id="2-2-内部样式"><a href="#2-2-内部样式" class="headerlink" title="2.2 内部样式"></a>2.2 内部样式</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">内部样式写在html页面的内部。将所有的css代码独立的放在&lt;style&gt;标签</span><br><span class="line">案例:</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">        &lt;meta charset=&quot;UTF-8&quot;/&gt;</span><br><span class="line">&lt;title&gt;网址的标题&lt;/title&gt;</span><br><span class="line">        &lt;style&gt;</span><br><span class="line">            p &#123;</span><br><span class="line">                font-size: 40px;</span><br><span class="line">                color: red;</span><br><span class="line">            &#125;</span><br><span class="line">        &lt;/style&gt; </span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">        &lt;p&gt;这是H1的标签内容&lt;/p&gt;</span><br><span class="line">        &lt;p&gt;这是H1的标签内容&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line">注意:style标签理论上来说可以放在HTML文档的任意地方。但是一般放在&lt;head&gt;标签中</span><br><span class="line">缺点:</span><br><span class="line">1.多个HTML页面无法复用样式</span><br><span class="line">2.没完全实现结构和样式的分离</span><br></pre></td></tr></table></figure><h3 id="2-3-外部样式"><a href="#2-3-外部样式" class="headerlink" title="2.3 外部样式"></a>2.3 外部样式</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">外部样式是一个独立的css文件。编写后由html文件进行引入使用</span><br><span class="line">语法:和内部样式没有区别，只是单独写在css文件中</span><br><span class="line">使用:</span><br><span class="line">1.编写css文件</span><br><span class="line">        p &#123;</span><br><span class="line">        font-size: 40px;</span><br><span class="line">        color: red;</span><br><span class="line">    &#125;</span><br><span class="line">    2.引入使用</span><br><span class="line">    &lt;link rel=&quot;stylesheet&quot; href=&quot;./my.css&quot;&gt;</span><br><span class="line">注意:</span><br><span class="line">1.link写在&lt;head&gt;标签中</span><br><span class="line">2.href属性：引入css文件的位置</span><br><span class="line">3.rel属性:引入的文档与当前文档的关系</span><br><span class="line">4.可以触发浏览器的缓存机制，提高访问速度</span><br></pre></td></tr></table></figure><h3 id="2-4-样式的优先级"><a href="#2-4-样式的优先级" class="headerlink" title="2.4 样式的优先级"></a>2.4 样式的优先级</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">行内样式&gt;内部样式=外部样式</span><br><span class="line"></span><br><span class="line">针对于同一个标签设置了内部和外部一样。由于两者优先级一样。后设置会覆盖先设置的。</span><br></pre></td></tr></table></figure><h2 id="3-CSS语法规范"><a href="#3-CSS语法规范" class="headerlink" title="3.CSS语法规范"></a>3.CSS语法规范</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">1.核心组成部分</span><br><span class="line">CSS语法规范由两部分组成。</span><br><span class="line">选择器:找到要添加样式的元素</span><br><span class="line">声明块:设置具体的样式。声明的格式为: 属性名:属性值;</span><br><span class="line"></span><br><span class="line">语法：</span><br><span class="line">选择器 &#123;</span><br><span class="line">    属性名1: 属性值1;</span><br><span class="line">    属性名2: 属性值2;</span><br><span class="line">&#125;</span><br><span class="line">注意:</span><br><span class="line">1.最后一个声明块结尾的分号理论上可以省略，但是最好写上</span><br><span class="line">2.选择器和声明块之间，以及属性名和属性值之间均有一个空格。理论上可以省略，但是最好写上</span><br><span class="line"></span><br><span class="line">2.注释编写</span><br><span class="line">/* 注释内容 */</span><br><span class="line"></span><br><span class="line">3.代码风格</span><br><span class="line">展开风格：开发的时候使用，可阅读性强。便于修改和调试</span><br><span class="line">p &#123;</span><br><span class="line">        font-size: 40px;</span><br><span class="line">        color: red;</span><br><span class="line">    &#125;</span><br><span class="line">紧凑风格：项目上线的时候进行使用。减少文件的体积</span><br><span class="line">p&#123;font-size: 40px;color: red;&#125;</span><br></pre></td></tr></table></figure><h2 id="4-CSS选择器"><a href="#4-CSS选择器" class="headerlink" title="4.CSS选择器"></a>4.CSS选择器</h2><h3 id="4-1-基本选择器"><a href="#4-1-基本选择器" class="headerlink" title="4.1 基本选择器"></a>4.1 基本选择器</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1.通配选择器</span><br><span class="line">2.元素选择器</span><br><span class="line">3.类选择器</span><br><span class="line">4.id选择器</span><br></pre></td></tr></table></figure><h4 id="4-1-1-通配选择器"><a href="#4-1-1-通配选择器" class="headerlink" title="4.1.1 通配选择器"></a>4.1.1 通配选择器</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">作用:可以选中所有的HTML元素</span><br><span class="line">语法:</span><br><span class="line">* &#123;</span><br><span class="line">    属性名: 属性值;</span><br><span class="line">&#125;</span><br><span class="line">注意:主要作用是清除浏览器的边距的差异，统一页面在各个浏览器的展示效果。</span><br></pre></td></tr></table></figure><h4 id="4-1-2-元素选择器"><a href="#4-1-2-元素选择器" class="headerlink" title="4.1.2 元素选择器"></a>4.1.2 元素选择器</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">作用:选中HTML中某一种元素(标签选择器)</span><br><span class="line">语法:</span><br><span class="line">标签名 &#123;</span><br><span class="line">    属性名: 属性值;</span><br><span class="line">&#125;</span><br><span class="line">案例:</span><br><span class="line">p &#123;</span><br><span class="line">    color: blue;</span><br><span class="line">&#125;</span><br><span class="line">div &#123;</span><br><span class="line">    width: 100px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-1-3-类选择器"><a href="#4-1-3-类选择器" class="headerlink" title="4.1.3 类选择器"></a>4.1.3 类选择器</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">作用:根据元素的class属性的值来选择元素</span><br><span class="line">语法:</span><br><span class="line">.类名 &#123;</span><br><span class="line">      属性名: 属性值;</span><br><span class="line">&#125;</span><br><span class="line">案例:</span><br><span class="line">&lt;p class=&quot;p1&quot;&gt;这是H1的标签内容&lt;/p&gt;</span><br><span class="line">&lt;p class=&quot;p1&quot;&gt;这是H1的标签内容&lt;/p&gt;</span><br><span class="line">&lt;p class=&quot;p2&quot;&gt;这是H1的标签内容&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">.p1 &#123;</span><br><span class="line">    font-size: 40px;</span><br><span class="line">    color: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-1-4-ID选择器"><a href="#4-1-4-ID选择器" class="headerlink" title="4.1.4 ID选择器"></a>4.1.4 ID选择器</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">作用:根据元素的id属性的值来选择元素</span><br><span class="line">语法:</span><br><span class="line">#id值 &#123;</span><br><span class="line">      属性名: 属性值;</span><br><span class="line">&#125;</span><br><span class="line">注意:</span><br><span class="line">1.id属性值尽量由字母，数字，下划线。段杠(-)组成。最好以字母开头。不要包含空格，并且区分大小写。</span><br><span class="line">2.一个元素只有一个id属性，多个元素的id值不能相同</span><br></pre></td></tr></table></figure><h3 id="4-2-复合选择器"><a href="#4-2-复合选择器" class="headerlink" title="4.2 复合选择器"></a>4.2 复合选择器</h3><h4 id="4-2-1-交集选择器"><a href="#4-2-1-交集选择器" class="headerlink" title="4.2.1 交集选择器"></a>4.2.1 交集选择器</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">作用:选中同时符合多个条件的元素(多个选择器的集合)</span><br><span class="line">语法：选择器1选择器2...选择器n &#123;&#125;</span><br><span class="line">案例:</span><br><span class="line">/* 类名为p1的div标签*/</span><br><span class="line">div.p1 &#123;</span><br><span class="line">    width: 200px;</span><br><span class="line">    height: 200px;</span><br><span class="line">    background-color: red;</span><br><span class="line">&#125;</span><br><span class="line">注意：</span><br><span class="line">1.交集选择器中使用了标签选择器，那么标签选择器必须写在前面</span><br><span class="line">2.id选择器和通配选择器，理论上来说可以使用但是没有意义</span><br><span class="line">3.交集选择器中不能出现两个元素选择器。</span><br><span class="line">4.使用最多的交集选择器就是元素选择器搭配类选择器</span><br></pre></td></tr></table></figure><h4 id="4-2-2-并集选择器"><a href="#4-2-2-并集选择器" class="headerlink" title="4.2.2 并集选择器"></a>4.2.2 并集选择器</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">作用:选中多个条件对应的元素(多个选择器的集合)</span><br><span class="line">语法：选择器1,选择器2,...选择器n &#123;&#125;</span><br><span class="line">案例:</span><br><span class="line">#username,</span><br><span class="line">.gender &#123;</span><br><span class="line">    font-size: 40px;</span><br><span class="line">&#125;</span><br><span class="line">注意:</span><br><span class="line">1.并集选择器中的多个选择器一般换行写</span><br><span class="line">2.任何选择器都可以为并集选择器中的一部分</span><br></pre></td></tr></table></figure><h4 id="4-2-3-元素的关系"><a href="#4-2-3-元素的关系" class="headerlink" title="4.2.3 元素的关系"></a>4.2.3 元素的关系</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">分类:</span><br><span class="line">1.父元素(也是祖先元素的一种):直接包含某个元素的元素，就是该元素的父元素</span><br><span class="line">2.子元素(也是后代元素的一种):被父元素直接包含的元素</span><br><span class="line">3.祖先元素:元素的上级元素都是祖先元素</span><br><span class="line">4.后代元素:元素的下级元素都是后代元素</span><br><span class="line">5.兄弟元素:具有相同父元素的元素，相互称之为兄弟元素</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="4-2-4-后代选择器"><a href="#4-2-4-后代选择器" class="headerlink" title="4.2.4 后代选择器"></a>4.2.4 后代选择器</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">语法:选择器1 选择器2 ...选择器n &#123;&#125;</span><br><span class="line">案例:</span><br><span class="line">ul li &#123;</span><br><span class="line">    color: pink;</span><br><span class="line">&#125;</span><br><span class="line">ul li a &#123;</span><br><span class="line">    color: yellow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-2-5-子元素选择器"><a href="#4-2-5-子元素选择器" class="headerlink" title="4.2.5 子元素选择器"></a>4.2.5 子元素选择器</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">语法:选择器1&gt;选择器2&gt; ...选择器n &#123;&#125;</span><br><span class="line">案例:</span><br><span class="line">div&gt;a &#123;       </span><br><span class="line">    color :red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#d1&gt;a&#123;</span><br><span class="line">    color :bule;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-2-6-兄弟选择器"><a href="#4-2-6-兄弟选择器" class="headerlink" title="4.2.6 兄弟选择器"></a>4.2.6 兄弟选择器</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">1.相邻兄弟选择器</span><br><span class="line">语法:选择器1+选择器2 &#123;&#125;</span><br><span class="line">案例:</span><br><span class="line">/* div后相邻的兄弟p元素*/</span><br><span class="line">div+p &#123;</span><br><span class="line">    color :red;</span><br><span class="line">&#125;</span><br><span class="line">2.通用兄弟选择器</span><br><span class="line">语法：选择器1~选择器2 &#123;&#125;</span><br><span class="line">案例:</span><br><span class="line">/* div后所有的兄弟p元素*/</span><br><span class="line">div~p &#123;</span><br><span class="line">    color :red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">注意:上面两个选择器选中都是元素后的兄弟元素</span><br></pre></td></tr></table></figure><h3 id="4-3-属性选择器"><a href="#4-3-属性选择器" class="headerlink" title="4.3 属性选择器"></a>4.3 属性选择器</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">作用:选中属性值符合一定要求的元素</span><br><span class="line">语法:</span><br><span class="line">[属性名]:选择具有某个属性的元素</span><br><span class="line">[属性名=&quot;值&quot;]:选择具有某个属性并且属性值等于指定值的元素</span><br><span class="line">[属性名^=&quot;值&quot;]:选择具有某个属性并且属性值以指定值开头的元素</span><br><span class="line">[属性名$=&quot;值&quot;]:选择具有某个属性并且属性值以指定值结尾的元素</span><br><span class="line">[属性名*=&quot;值&quot;]:选择具有某个属性并且属性值包含指定值的元素</span><br><span class="line">案例：</span><br><span class="line">input[name]&#123;&#125; ：选中具有name属性的input元素</span><br><span class="line">input[name=&quot;gender&quot;]&#123;&#125; ：选中具有name属性并且值为gender的input元素</span><br><span class="line">input[name^=&quot;g&quot;]&#123;&#125; ：选中具有name属性并且值以g开头的input元素</span><br><span class="line">input[name$=&quot;g&quot;]&#123;&#125; ：选中具有name属性并且值以g结尾的input元素</span><br><span class="line">input[name*=&quot;g&quot;]&#123;&#125; ：选中具有name属性并且值包含g的input元素</span><br></pre></td></tr></table></figure><h3 id="4-4-伪类选择器"><a href="#4-4-伪类选择器" class="headerlink" title="4.4 伪类选择器"></a>4.4 伪类选择器</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">作用:选中特殊状态的元素</span><br></pre></td></tr></table></figure><h4 id="4-4-1-动态伪类选择器"><a href="#4-4-1-动态伪类选择器" class="headerlink" title="4.4.1 动态伪类选择器"></a>4.4.1 动态伪类选择器</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">分类:</span><br><span class="line">:link：超链接没有被访问的状态</span><br><span class="line">:visited：超链接访问过的状态</span><br><span class="line">:hover: 鼠标悬停在元素上的状态</span><br><span class="line">:active: 元素激活的状态</span><br><span class="line"></span><br><span class="line">:focus : 获取焦点的元素(表单类的元素才能使用:focus伪类)</span><br></pre></td></tr></table></figure><h4 id="4-4-2-结构伪类选择器"><a href="#4-4-2-结构伪类选择器" class="headerlink" title="4.4.2 结构伪类选择器"></a>4.4.2 结构伪类选择器</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">:first-child 所有兄弟元素中的第一个</span><br><span class="line">:last-child 所有兄弟元素中的最后一个</span><br><span class="line">:nth-child(n) 所有兄弟元素中的第n个</span><br><span class="line"></span><br><span class="line">:first-of-type 所有同类型兄弟元素中的第一个</span><br><span class="line">:last-of-type 所有同类型兄弟元素中的最后一个</span><br><span class="line">:nth-of-type(n) 所有同类型兄弟元素中的第n个</span><br></pre></td></tr></table></figure><h2 id="5-CSS三大特性"><a href="#5-CSS三大特性" class="headerlink" title="5.CSS三大特性"></a>5.CSS三大特性</h2><h3 id="5-1-层叠性"><a href="#5-1-层叠性" class="headerlink" title="5.1 层叠性"></a>5.1 层叠性</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">定义:如果发生了样式的冲突那么就会根据一定的规则(选择器的优先级:行内样式&gt;ID选择器&gt;类选择器&gt;元素选择器&gt;通配选择器)，进行样式的层叠(覆盖)。</span><br></pre></td></tr></table></figure><h3 id="5-2-继承性"><a href="#5-2-继承性" class="headerlink" title="5.2 继承性"></a>5.2 继承性</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">定义:元素会自动拥有祖先元素上设置的某些样式</span><br><span class="line">继承规则：就近原则</span><br><span class="line">常见的可继承属性:</span><br><span class="line">text-xx , font-xx , line-xx , color</span><br></pre></td></tr></table></figure><h3 id="5-3-优先性"><a href="#5-3-优先性" class="headerlink" title="5.3 优先性"></a>5.3 优先性</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">行内样式&gt;ID选择器&gt;类选择器&gt;元素选择器&gt;通配选择器&gt;继承的样式</span><br><span class="line"></span><br><span class="line">复合选择器的优先级需要计算权重(看视频)</span><br></pre></td></tr></table></figure><h2 id="6-CSS常用属性"><a href="#6-CSS常用属性" class="headerlink" title="6.CSS常用属性"></a>6.CSS常用属性</h2><h3 id="6-1-颜色的表达方式"><a href="#6-1-颜色的表达方式" class="headerlink" title="6.1 颜色的表达方式"></a>6.1 颜色的表达方式</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">1.颜色名</span><br><span class="line">color: red</span><br><span class="line">2.rgb/rgba</span><br><span class="line">r:红色</span><br><span class="line">g:绿色</span><br><span class="line">b:蓝色</span><br><span class="line">a:透明度</span><br><span class="line">color: rgb(255,0,0,50%) 红色</span><br><span class="line">color: rgb(0,0,0) 黑色</span><br><span class="line">color: rgb(255,255,255) 白色</span><br><span class="line"> 3.HEX/HEXA</span><br><span class="line"> 格式: rrggbb</span><br><span class="line"> color: #ff0000 红色</span><br><span class="line"> color: #f00 红色</span><br><span class="line"> IE浏览器支持HEX但是不支持HEXA</span><br></pre></td></tr></table></figure><h3 id="6-2-CSS字体属性"><a href="#6-2-CSS字体属性" class="headerlink" title="6.2 CSS字体属性"></a>6.2 CSS字体属性</h3><h4 id="6-2-1-字体大小"><a href="#6-2-1-字体大小" class="headerlink" title="6.2.1 字体大小"></a>6.2.1 字体大小</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">属性名:font-size</span><br><span class="line">作用:控制字体的大小</span><br><span class="line">语法：div&#123;font-size: 30px&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">注意:</span><br><span class="line">1.chrome浏览器默认的字体16px。最小支持12px。设置成0px的字体会消失</span><br><span class="line">2.由于各个浏览器默认的字体大小是不一致的，所以一般最好给一个明确值。</span><br><span class="line">3.字体大小的明确值一般给body。这样的话其他元素就可以继承此属性</span><br></pre></td></tr></table></figure><h4 id="6-2-2-字体族"><a href="#6-2-2-字体族" class="headerlink" title="6.2.2 字体族"></a>6.2.2 字体族</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">属性名:font-family</span><br><span class="line">作用:控制字体类型</span><br><span class="line">语法:div&#123;font-family: &quot;Microsoft YaHei&quot;,serif&#125;</span><br><span class="line">注意:</span><br><span class="line">1.如果字体名包含空格，需要使用引号包含起来.</span><br><span class="line">2.windows默认的还就是微软雅黑</span><br><span class="line">3.可以同时设置多个字体。</span><br><span class="line">4.serif 衬线字体    sans-serif 非衬线字体</span><br></pre></td></tr></table></figure><h4 id="6-2-3-字体风格"><a href="#6-2-3-字体风格" class="headerlink" title="6.2.3 字体风格"></a>6.2.3 字体风格</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">属性名:font-style</span><br><span class="line">作用:控制字体是否为斜体</span><br><span class="line">语法:div&#123;font-style: normal&#125;</span><br><span class="line">常用值:</span><br><span class="line">normal:默认值，正常不斜体</span><br><span class="line">italic：斜体(使用字体本身的斜体效果)</span><br><span class="line">oblique：斜体(强制产生斜体效果) ：不推荐</span><br></pre></td></tr></table></figure><h4 id="6-2-4-字体粗细"><a href="#6-2-4-字体粗细" class="headerlink" title="6.2.4 字体粗细"></a>6.2.4 字体粗细</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">属性名:font-weight</span><br><span class="line">作用:控制字体粗细</span><br><span class="line">语法:div&#123;font-weight: 属性值&#125;</span><br><span class="line">属性值:</span><br><span class="line">关键字: lighter：细  normal:正常 bold:粗 bolder:超粗(绝大部分字体不支持) </span><br><span class="line">数值: 100-1000并且没有单位。数值越大字体越粗</span><br></pre></td></tr></table></figure><h4 id="6-2-5-字体的复合写法"><a href="#6-2-5-字体的复合写法" class="headerlink" title="6.2.5 字体的复合写法"></a>6.2.5 字体的复合写法</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">属性名:font</span><br><span class="line">作用:将上述四个属性编写在一起</span><br><span class="line">编写规则:</span><br><span class="line">1.字体大小和字体族必须写</span><br><span class="line">2.字体族必须在最后以为，字体大小必须在倒数第二位</span><br><span class="line">3.各个属性空空格隔开</span><br><span class="line">语法:div &#123;font: 20px  &quot;Microsoft YaHei&quot;&#125;</span><br></pre></td></tr></table></figure><h3 id="6-3-CSS文本属性"><a href="#6-3-CSS文本属性" class="headerlink" title="6.3 CSS文本属性"></a>6.3 CSS文本属性</h3><h4 id="6-3-1-文本颜色"><a href="#6-3-1-文本颜色" class="headerlink" title="6.3.1 文本颜色"></a>6.3.1 文本颜色</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">属性名color</span><br><span class="line">作用:控制文字的颜色</span><br><span class="line">语法:div&#123;font-weight: 属性值&#125;</span><br><span class="line">属性值:</span><br><span class="line">就是表达颜色的四种方式。常用的是rgb/HEX</span><br></pre></td></tr></table></figure><h4 id="6-3-2-文本间距"><a href="#6-3-2-文本间距" class="headerlink" title="6.3.2 文本间距"></a>6.3.2 文本间距</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">属性名:letter-spacing(字母间距) word-spacing(单词间距。通过空格识词)</span><br><span class="line">属性值:像素(px)。正值让间距增大。负值让间距缩小</span><br></pre></td></tr></table></figure><h4 id="6-3-3-文本修饰"><a href="#6-3-3-文本修饰" class="headerlink" title="6.3.3 文本修饰"></a>6.3.3 文本修饰</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">属性名:text-decoration</span><br><span class="line">作用:控制文本的各种装修线</span><br><span class="line">可选值:</span><br><span class="line">none：无装饰线(常用)</span><br><span class="line">underline：下划线</span><br><span class="line">overline:上划线</span><br><span class="line">line-through：删除线</span><br><span class="line">案例：text-decoration: underline wavy red;</span><br></pre></td></tr></table></figure><h4 id="6-3-4-文本缩进"><a href="#6-3-4-文本缩进" class="headerlink" title="6.3.4 文本缩进"></a>6.3.4 文本缩进</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">属性名:text-indent</span><br><span class="line">作用:控制文本首字母的缩进</span><br><span class="line">属性值:长度数值+单位</span><br></pre></td></tr></table></figure><h4 id="6-3-5-文本对齐-水平"><a href="#6-3-5-文本对齐-水平" class="headerlink" title="6.3.5 文本对齐-水平"></a>6.3.5 文本对齐-水平</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">属性名:text-align</span><br><span class="line">作用:控制文本的水平对齐方式</span><br><span class="line">属性值:</span><br><span class="line">left：左对齐(默认值)</span><br><span class="line">right：右对齐</span><br><span class="line">center：居中对齐</span><br></pre></td></tr></table></figure><h4 id="6-3-6-行高"><a href="#6-3-6-行高" class="headerlink" title="6.3.6 行高"></a>6.3.6 行高</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">属性名:line-heigeht</span><br><span class="line">作用:控制一行文字的高度</span><br><span class="line">属性值:</span><br><span class="line">1.normal：由浏览器根据字体大小自动决定的一个值</span><br><span class="line">2.像素(px)</span><br><span class="line">3.数字:font-size的倍数(最常用) 一般值都为1.5</span><br></pre></td></tr></table></figure><h4 id="6-3-7-文本对齐-垂直"><a href="#6-3-7-文本对齐-垂直" class="headerlink" title="6.3.7 文本对齐-垂直"></a>6.3.7 文本对齐-垂直</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.顶部:不需要任何设置 默认就是</span><br><span class="line">2.居中:height=line-heigeht值</span><br><span class="line">3.底部:line-heigeht = (height*2)-font-size-x</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">属性名:vertical-align</span><br><span class="line">作用:用于指定同一行元素之间或者表格单元格内的文字的垂直对齐方式</span><br><span class="line">属性值:</span><br><span class="line">baseline:默认值。元素的基线和父元素的基线对齐</span><br><span class="line">top:元素顶部和所在行的顶部对齐</span><br><span class="line">middle:居中对齐</span><br><span class="line">bottom元素底部和所在行的底部对齐</span><br><span class="line">注意:此属性不能控制块元素</span><br></pre></td></tr></table></figure><h3 id="6-4-CSS列表属性"><a href="#6-4-CSS列表属性" class="headerlink" title="6.4 CSS列表属性"></a>6.4 CSS列表属性</h3><h4 id="6-4-1-列表符号"><a href="#6-4-1-列表符号" class="headerlink" title="6.4.1 列表符号"></a>6.4.1 列表符号</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">属性名:list-style-type</span><br><span class="line">作用:设置列表符号</span><br><span class="line">属性值:</span><br><span class="line">none:不显示前面的标识</span><br><span class="line">disc:圆形</span><br><span class="line">square：实心方块</span><br><span class="line">decimal：数字</span><br><span class="line">lower-roman：小写罗马字</span><br><span class="line">upper-roman：大写罗马字</span><br><span class="line">lower-alpha：小写英文字母</span><br><span class="line">upper-alpha：大写英文字母</span><br></pre></td></tr></table></figure><h4 id="6-4-2-符号位置"><a href="#6-4-2-符号位置" class="headerlink" title="6.4.2 符号位置"></a>6.4.2 符号位置</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">属性名:list-style-position</span><br><span class="line">作用:设置列表符号的位置</span><br><span class="line">属性值:</span><br><span class="line">inside:在li的里面</span><br><span class="line">outside:在li的外面</span><br></pre></td></tr></table></figure><h4 id="6-4-3-自定义列表符号"><a href="#6-4-3-自定义列表符号" class="headerlink" title="6.4.3 自定义列表符号"></a>6.4.3 自定义列表符号</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">属性名:list-style-image</span><br><span class="line">作用:自定义列表符号</span><br><span class="line">属性值: url(图片位置)</span><br></pre></td></tr></table></figure><h4 id="6-4-4-符合写法"><a href="#6-4-4-符合写法" class="headerlink" title="6.4.4 符合写法"></a>6.4.4 符合写法</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">属性名:list-styl</span><br><span class="line">特点:没有数量和顺序的要求</span><br></pre></td></tr></table></figure><h3 id="6-5-CSS表格属性"><a href="#6-5-CSS表格属性" class="headerlink" title="6.5 CSS表格属性"></a>6.5 CSS表格属性</h3><h4 id="6-5-1-边框属性-非表格专属"><a href="#6-5-1-边框属性-非表格专属" class="headerlink" title="6.5.1 边框属性(非表格专属)"></a>6.5.1 边框属性(非表格专属)</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">属性名:border-width，border-color，border-style</span><br><span class="line">作用:设置表格边框的宽度，颜色，样式</span><br><span class="line">属性值：</span><br><span class="line">border-width：像素值</span><br><span class="line">border-color：具体的颜色值</span><br><span class="line">border-style：</span><br><span class="line">none:默认值。</span><br><span class="line">solid：实线</span><br><span class="line">dashed：虚线</span><br><span class="line">dotted：点线</span><br><span class="line">double：双实线</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">属性名:border（复合属性）</span><br><span class="line">属性值:没有顺序和数量要求</span><br><span class="line"></span><br><span class="line">注意:此属性不光表格可以其他使用。 其他元素也可以使用</span><br></pre></td></tr></table></figure><h4 id="6-5-2-表格专属属性"><a href="#6-5-2-表格专属属性" class="headerlink" title="6.5.2 表格专属属性"></a>6.5.2 表格专属属性</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">属性名:table-layout</span><br><span class="line">作用:设置列的宽度</span><br><span class="line">属性值:</span><br><span class="line">auto:自动</span><br><span class="line">具体的列宽</span><br><span class="line"></span><br><span class="line">属性名:border-spacing</span><br><span class="line">作用:设置单元格的间距</span><br><span class="line">属性值:css长度值+单位</span><br><span class="line"></span><br><span class="line">属性名:empty-cells</span><br><span class="line">作用：是否隐藏没有内容的单元格</span><br><span class="line">属性值: hide(隐藏) show(展示，默认值)</span><br><span class="line"></span><br><span class="line">注意:以上三个属性只能在table中使用</span><br></pre></td></tr></table></figure><h3 id="6-6-CSS背景属性"><a href="#6-6-CSS背景属性" class="headerlink" title="6.6 CSS背景属性"></a>6.6 CSS背景属性</h3><h4 id="6-6-1-背景颜色"><a href="#6-6-1-背景颜色" class="headerlink" title="6.6.1 背景颜色"></a>6.6.1 背景颜色</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">属性名:background-color</span><br><span class="line">作用:设置背景颜色</span><br><span class="line">属性值:符合css规范的颜色</span><br></pre></td></tr></table></figure><h4 id="6-6-2-背景图片"><a href="#6-6-2-背景图片" class="headerlink" title="6.6.2 背景图片"></a>6.6.2 背景图片</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">属性名:background-image</span><br><span class="line">作用:设置背景图片</span><br><span class="line">属性值:url(图片的地址)</span><br></pre></td></tr></table></figure><h4 id="6-6-3-背景重复方式"><a href="#6-6-3-背景重复方式" class="headerlink" title="6.6.3 背景重复方式"></a>6.6.3 背景重复方式</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">属性名:background-repeat</span><br><span class="line">作用:设置背景图片重复的方式</span><br><span class="line">属性值:</span><br><span class="line">repeat:重复铺满。默认值</span><br><span class="line">no-repeat:不重复</span><br><span class="line">repeat-x:水平重复</span><br><span class="line">repeat-y:垂直重复</span><br></pre></td></tr></table></figure><h4 id="6-6-4-背景图片位置"><a href="#6-6-4-背景图片位置" class="headerlink" title="6.6.4 背景图片位置"></a>6.6.4 背景图片位置</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">属性名:background-position</span><br><span class="line">作用:设置背景图片位置</span><br><span class="line">属性值:由两个值组成，水平 垂直</span><br><span class="line">水平:left center right</span><br><span class="line">垂直:top center bottom</span><br><span class="line">也可以通过两个数值来进行设置，分别代表x坐标和y坐标</span><br></pre></td></tr></table></figure><h4 id="6-6-5-复合属性"><a href="#6-6-5-复合属性" class="headerlink" title="6.6.5 复合属性"></a>6.6.5 复合属性</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">属性名:background</span><br><span class="line">属性值:没有数量和顺序的要求</span><br></pre></td></tr></table></figure><h2 id="7-CSS盒子模型"><a href="#7-CSS盒子模型" class="headerlink" title="7.CSS盒子模型"></a>7.CSS盒子模型</h2><h3 id="7-1-元素显示模式"><a href="#7-1-元素显示模式" class="headerlink" title="7.1 元素显示模式"></a>7.1 元素显示模式</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">块元素:</span><br><span class="line">1.在页面中独占一行.</span><br><span class="line">2.默认宽度是撑满父元素的</span><br><span class="line">3.默认的高度是由内容撑开</span><br><span class="line">4.可以通过CSS设置宽高</span><br><span class="line">行内元素：</span><br><span class="line">1.在页面中不会独占一行。一行内无法容纳行内元素则会在下一行继续展示</span><br><span class="line">2.默认宽度由内容撑开</span><br><span class="line">3.默认高度由内容撑开</span><br><span class="line">4.无法通过CSS设置宽高</span><br><span class="line">行内块元素:</span><br><span class="line">1.在页面中不会独占一行。一行内无法容纳行内元素则会在下一行继续展示</span><br><span class="line">2.默认宽度由内容撑开</span><br><span class="line">3.默认高度由内容撑开</span><br><span class="line">4.可以通过CSS设置宽高</span><br><span class="line">注意:早起区别元素只有一个条件，是否独占一行。所以行内块元素早起属于行内元素。</span><br><span class="line"></span><br><span class="line">块元素(block):</span><br><span class="line">1.主题结构标签:html body</span><br><span class="line">2.排版标签:h1-h6 hr p pre div</span><br><span class="line">3.列表标签:ul ol li dl dt dd</span><br><span class="line">4.表单标签:form option</span><br><span class="line">5.表格标签:table tbody thead tfoot tr </span><br><span class="line">行内元素(inline):</span><br><span class="line">1.文本标签:br span em strong ...</span><br><span class="line">2.特殊标签:a label</span><br><span class="line">行内块元素(inline-block):</span><br><span class="line">1.图片:img</span><br><span class="line">2.单元格:td th</span><br><span class="line">3.表单控件:input select button textarea</span><br><span class="line">4.框架标签: iframe</span><br></pre></td></tr></table></figure><h3 id="7-2-显示模式修改"><a href="#7-2-显示模式修改" class="headerlink" title="7.2 显示模式修改"></a>7.2 显示模式修改</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">属性名:display</span><br><span class="line">作用:修改标签的显示模式</span><br><span class="line">属性值:</span><br><span class="line">none：元素会被隐藏</span><br><span class="line">block:元素作为块级元素显示</span><br><span class="line">inline:元素作为行级元素显示</span><br><span class="line">inline-block:元素作为行内块级元素显示</span><br></pre></td></tr></table></figure><h3 id="7-3-盒子模型的组成部分"><a href="#7-3-盒子模型的组成部分" class="headerlink" title="7.3 盒子模型的组成部分"></a>7.3 盒子模型的组成部分</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">盒子模型由以下四部分组成:</span><br><span class="line">margin(外边距)：盒子与外界的距离</span><br><span class="line">border(边框):盒子的边框</span><br><span class="line">padding(内边距):紧贴内容的补白区域</span><br><span class="line">content(内容):元素中的文本或者其后代元素的内容</span><br><span class="line"></span><br><span class="line">盒子大小:内容+左右内边距+左右的边框</span><br><span class="line">外边距不会影响盒子的大小，但是会影响盒子的位置</span><br><span class="line"></span><br><span class="line">图片:https://image.baidu.com/search/detail?ct=503316480&amp;z=0&amp;ipn=d&amp;word=%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B%20css&amp;step_word=&amp;hs=0&amp;pn=1&amp;spn=0&amp;di=7308398814245683201&amp;pi=0&amp;rn=1&amp;tn=baiduimagedetail&amp;is=0%2C0&amp;istype=2&amp;ie=utf-8&amp;oe=utf-8&amp;in=&amp;cl=2&amp;lm=-1&amp;st=-1&amp;cs=3204025573%2C765940591&amp;os=4190189360%2C3265744688&amp;simid=3204025573%2C765940591&amp;adpicid=0&amp;lpn=0&amp;ln=1591&amp;fr=&amp;fmq=1712650489514_R&amp;fm=result&amp;ic=&amp;s=undefined&amp;hd=&amp;latest=&amp;copyright=&amp;se=&amp;sme=&amp;tab=0&amp;width=&amp;height=&amp;face=undefined&amp;ist=&amp;jit=&amp;cg=&amp;bdtype=0&amp;oriquery=&amp;objurl=https%3A%2F%2Fwww.edrawsoft.cn%2Fwp%2Fwp-content%2Fuploads%2F2020%2F10%2FCSShezimoxingssma.png&amp;fromurl=ippr_z2C%24qAzdH3FAzdH3Fooo_z%26e3Bj16wof5up_z%26e3BvgAzdH3Fviw6pAzdH3FCSSijzt45xtg2ff4w&amp;gsm=1e&amp;rpstart=0&amp;rpnum=0&amp;islist=&amp;querylist=&amp;nojc=undefined&amp;dyTabStr=MCwzLDEsMiw2LDQsNSw3LDgsOQ%3D%3D&amp;lid=10759007594805456681</span><br></pre></td></tr></table></figure><h3 id="7-4-盒子内容区的属性"><a href="#7-4-盒子内容区的属性" class="headerlink" title="7.4 盒子内容区的属性"></a>7.4 盒子内容区的属性</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">width:设置内容区域的宽度</span><br><span class="line">height:设置内容区域的高度</span><br></pre></td></tr></table></figure><h3 id="7-5-盒子内边距的属性"><a href="#7-5-盒子内边距的属性" class="headerlink" title="7.5 盒子内边距的属性"></a>7.5 盒子内边距的属性</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">padding-top:上内边距</span><br><span class="line">padding-right:右内边距</span><br><span class="line">padding-bottom:下内边距</span><br><span class="line">padding-left:左内边距</span><br><span class="line">padding:可以设置1-4个值。</span><br><span class="line">例如: padding: 10px; 四个方向的内边距都是10px</span><br><span class="line"> padding: 10px 20px; 上下10px  左右20px</span><br><span class="line"> padding: 10px 20px 30px; 上10px 左右20px  下30px</span><br><span class="line">     padding: 10px 20px 30px 40px; 上右下左</span><br><span class="line">注意:</span><br><span class="line">1.padding的值不能为负数</span><br><span class="line">2.行内元素左右内边距完美设置，但是上下内边距不能完美设置</span><br><span class="line">3.块级元素和行内块级元素四个方向都可以完美设置</span><br></pre></td></tr></table></figure><h3 id="7-6-盒子边框属性"><a href="#7-6-盒子边框属性" class="headerlink" title="7.6 盒子边框属性"></a>7.6 盒子边框属性</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">属性名:border-width，border-color，border-style</span><br><span class="line">作用:设置表格边框的宽度，颜色，样式</span><br><span class="line">属性值：</span><br><span class="line">border-width：像素值(默认值为3px)</span><br><span class="line">border-color：具体的颜色值(默认值为黑色)</span><br><span class="line">border-style：</span><br><span class="line">none:默认值。</span><br><span class="line">solid：实线</span><br><span class="line">dashed：虚线</span><br><span class="line">dotted：点线</span><br><span class="line">double：双实线</span><br><span class="line">属性名:border（复合属性）</span><br><span class="line">属性值:没有顺序和数量要求</span><br><span class="line"></span><br><span class="line">同时还具备以下属性:</span><br><span class="line">border-left-style,border-right-style,border-bottom-style,border-top-style</span><br><span class="line">同时其他三个属性同理</span><br></pre></td></tr></table></figure><h3 id="7-7-盒子外边距属性"><a href="#7-7-盒子外边距属性" class="headerlink" title="7.7 盒子外边距属性"></a>7.7 盒子外边距属性</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">margin-left：左外边距</span><br><span class="line">margin-right：右外边距</span><br><span class="line">margin-top:上外边距</span><br><span class="line">margin-bottom：下外边距</span><br><span class="line">margin：和padding一样都可以设置1-4个值。设置规则也一致</span><br><span class="line"></span><br><span class="line">注意:</span><br><span class="line">1.行内元素左右外边距完美设置，但是上下外边距无法设置</span><br><span class="line">2.块级元素和行内块级元素四个方向都可以完美设置</span><br><span class="line">3.上和左会影响到自己的位置，右和下会影响到后面兄弟元素的位置</span><br><span class="line">4.块级元素设置左右为auto，那么该块级元素会在父元素中水平居中</span><br><span class="line">5.margin的属性自可以为负数</span><br></pre></td></tr></table></figure><h3 id="7-8-内容溢出属性"><a href="#7-8-内容溢出属性" class="headerlink" title="7.8 内容溢出属性"></a>7.8 内容溢出属性</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">属性名:overflow</span><br><span class="line">作用：溢出内容的处理方式</span><br><span class="line">属性值:</span><br><span class="line">visible：默认(默认值)</span><br><span class="line">hidden:隐藏</span><br><span class="line">scroll:显示滚动条(不管内容是否溢出都显示)</span><br><span class="line">auto:自动显示滚动条(内容溢出了才显示)</span><br><span class="line">属性名:overflow-x； 属性值同上</span><br><span class="line">属性名:overflow-y； 属性值同上</span><br></pre></td></tr></table></figure><h3 id="7-9-样式的继承区别"><a href="#7-9-样式的继承区别" class="headerlink" title="7.9 样式的继承区别"></a>7.9 样式的继承区别</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">能继承:字体属性，文本属性，字体颜色</span><br><span class="line">不能继承:边框，背景，内外边距，宽高，溢出方式</span><br><span class="line"></span><br><span class="line">继承样式只需要记住一个规则:不影响布局的都可以继承。影响布局的都不可以。</span><br></pre></td></tr></table></figure><h2 id="8-浮动"><a href="#8-浮动" class="headerlink" title="8.浮动"></a>8.浮动</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">属性名:float</span><br><span class="line">作用:设置浮动</span><br><span class="line">属性值:</span><br><span class="line">left:设置左浮动</span><br><span class="line">right:设置右浮动</span><br><span class="line">none:不浮动(默认值)</span><br><span class="line"></span><br><span class="line">属性名:clear</span><br><span class="line">作用:清楚情面兄弟元素浮动的影响</span><br><span class="line">属性值:</span><br><span class="line">left:清理前面左浮动影响</span><br><span class="line">right:清理前面右浮动影响</span><br><span class="line">both:清理前面左后浮动影响</span><br></pre></td></tr></table></figure><h2 id="9-定位"><a href="#9-定位" class="headerlink" title="9.定位"></a>9.定位</h2><h3 id="9-1-相对定位"><a href="#9-1-相对定位" class="headerlink" title="9.1 相对定位"></a>9.1 相对定位</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">属性名:position: relative</span><br><span class="line">属性名:通过left right top botttom四个属性调整位置。 left:20px;向右移动20px 其他同理</span><br></pre></td></tr></table></figure><h3 id="9-2-绝对定位"><a href="#9-2-绝对定位" class="headerlink" title="9.2 绝对定位"></a>9.2 绝对定位</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">属性名:position: absolute</span><br><span class="line">属性名:通过left right top botttom四个属性调整位置。 left:20px;向右移动20px 其他同理</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;CSS&quot;&gt;&lt;a href=&quot;#CSS&quot; class=&quot;headerlink&quot; title=&quot;CSS&quot;&gt;&lt;/a&gt;CSS&lt;/h1&gt;&lt;h2 id=&quot;1-CSS简介&quot;&gt;&lt;a href=&quot;#1-CSS简介&quot; class=&quot;headerlink&quot; title=&quot;1.CSS简介</summary>
      
    
    
    
    
    <category term="前端" scheme="http://sion-io.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>AJAX</title>
    <link href="http://sion-io.github.io/2024/05/11/05-Ajax(1)/"/>
    <id>http://sion-io.github.io/2024/05/11/05-Ajax(1)/</id>
    <published>2024-05-11T06:56:01.000Z</published>
    <updated>2024-05-11T15:30:52.039Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax"></a>Ajax</h1><h2 id="1-Ajax简介"><a href="#1-Ajax简介" class="headerlink" title="1.Ajax简介"></a>1.Ajax简介</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Ajax即Asynchronous Javascript And XML（异步JavaScript和XML），严格意义上来说并不是一种新技术，而是整合之前所学的技术用于实现动态网页。</span><br><span class="line"></span><br><span class="line">目前所学的请求和响应都是基于同步的。发送请求就必须重新加载整个页面。而Ajax通过浏览器和复位器进行少量的数据交互从而实现页面异步更新的效果。所谓的异步更新就是不需要加载整个页面，就可以对页面进行局部的更新。</span><br><span class="line"></span><br><span class="line">应用场景:注册查看用户名是否已经占用</span><br></pre></td></tr></table></figure><h2 id="2-Ajax应用"><a href="#2-Ajax应用" class="headerlink" title="2.Ajax应用"></a>2.Ajax应用</h2><h3 id="2-1-原生Ajax"><a href="#2-1-原生Ajax" class="headerlink" title="2.1 原生Ajax"></a>2.1 原生Ajax</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">userName4Reg</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;userName&quot;</span>);</span><br><span class="line"><span class="type">Integer</span> <span class="variable">studentNumber</span> <span class="operator">=</span> userService.findByName(userName4Reg);</span><br><span class="line"><span class="keyword">if</span>(studentNumber&gt;<span class="number">0</span>)&#123;</span><br><span class="line">    resp.getWriter().write(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    resp.getWriter().write(<span class="string">&quot;success&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">onload</span>=<span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;userName&quot;</span>).<span class="property">onblur</span>=<span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">        <span class="comment">//创建XMLHttpRequest</span></span><br><span class="line">        <span class="keyword">var</span> xmlHttpRequest = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">        <span class="keyword">var</span> userName = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;userName&quot;</span>).<span class="property">value</span>;</span><br><span class="line">        xmlHttpRequest.<span class="title function_">open</span>(<span class="string">&quot;GET&quot;</span>,<span class="string">&quot;userNameExists?userName=&quot;</span>+userName,<span class="literal">true</span>);</span><br><span class="line">        xmlHttpRequest.<span class="title function_">send</span>();</span><br><span class="line">        xmlHttpRequest.<span class="property">onreadystatechange</span>=<span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(xmlHttpRequest.<span class="property">readyState</span>==<span class="number">4</span> &amp;&amp; xmlHttpRequest.<span class="property">status</span>==<span class="number">200</span>)&#123;</span><br><span class="line">                <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;sp1&quot;</span>).<span class="property">innerText</span>=xmlHttpRequest.<span class="property">responseText</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">详解:</span><br><span class="line">核心对象:XMLHttpRequest：用于客户端和服务端的异步操作</span><br><span class="line">打开连接:open(method,url,async)</span><br><span class="line">method:请求方式;GET 或者 POST</span><br><span class="line">url:请求的路径</span><br><span class="line">async：本次请求是否异步</span><br><span class="line">发送请求:send(String param):</span><br><span class="line">param：请求的时候传递的参数(POST请求专用)</span><br><span class="line">处理响应:onreadystatechange(此函数就是用于处理响应结果)</span><br><span class="line">readyState(ajax的状态):</span><br><span class="line">0:请求没有初始化</span><br><span class="line">1:服务连接已经建立</span><br><span class="line">2:请求已经接收</span><br><span class="line">3.请求处理中</span><br><span class="line">4.请求已经完成并且响应已经就绪</span><br><span class="line">status（请求的状态码）：</span><br><span class="line">200:成功</span><br><span class="line">获取相应数据的方式:</span><br><span class="line">xmlHttpRequest.responseText:获取字符串类型的数据</span><br><span class="line">xmlHttpRequest.responseXML:获取XML类型的数据</span><br><span class="line">总结:不推荐使用</span><br></pre></td></tr></table></figure><h3 id="2-2-JQ的Ajax"><a href="#2-2-JQ的Ajax" class="headerlink" title="2.2 JQ的Ajax"></a>2.2 JQ的Ajax</h3><h4 id="2-2-1-Get方式Ajax"><a href="#2-2-1-Get方式Ajax" class="headerlink" title="2.2.1 Get方式Ajax"></a>2.2.1 Get方式Ajax</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">语法:</span><br><span class="line">$.get(url,[data],[callback],[type])</span><br><span class="line">url:请求的地址</span><br><span class="line">data：发送到服务器的数据，格式为key=value</span><br><span class="line">callback：请求成功后的回调函数(响应处理)</span><br><span class="line">type:预期的返回数据类型  xml,html.js,json,text</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span> src=<span class="string">&quot;$&#123;ctx&#125;/js/jquery-3.3.1.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">function</span> <span class="title function_">userNameExists</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> userName =  $(<span class="string">&quot;#userName&quot;</span>).<span class="title function_">val</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    $.<span class="title function_">get</span>(</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="string">&quot;userNameExists&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="string">&quot;userName=&quot;</span>+userName,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">function</span> (<span class="params">data</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            $(<span class="string">&quot;#sp1&quot;</span>).<span class="title function_">html</span>(data);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="string">&quot;text&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    );</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h4 id="2-2-2-Post方式Ajax"><a href="#2-2-2-Post方式Ajax" class="headerlink" title="2.2.2 Post方式Ajax"></a>2.2.2 Post方式Ajax</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">语法:</span><br><span class="line">$.post(url,[data],[callback],[type])</span><br><span class="line">url:请求的地址</span><br><span class="line">data：发送到服务器的数据，格式为key=value</span><br><span class="line">callback：请求成功后的回调函数(响应处理)</span><br><span class="line">type:预期的返回数据类型  xml,html.js,json,text</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">userNameExists</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> userName =  $(<span class="string">&quot;#userName&quot;</span>).<span class="title function_">val</span>();</span><br><span class="line">    $.<span class="title function_">post</span>(</span><br><span class="line">        <span class="string">&quot;userNameExists&quot;</span>,</span><br><span class="line">        <span class="string">&quot;userName=&quot;</span>+userName,</span><br><span class="line">        <span class="keyword">function</span> (<span class="params">data</span>)&#123;</span><br><span class="line">            $(<span class="string">&quot;#sp1&quot;</span>).<span class="title function_">html</span>(data);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;text&quot;</span></span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="2-2-3-通用方式Ajax"><a href="#2-2-3-通用方式Ajax" class="headerlink" title="2.2.3 通用方式Ajax"></a>2.2.3 通用方式Ajax</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">语法：$.ajax(&#123;key:value...&#125;)</span><br><span class="line">url:请求的地址</span><br><span class="line">async:是否异步(默认为true)</span><br><span class="line">data:请求的参数</span><br><span class="line">type:请求的方式</span><br><span class="line">success:请求成功后的回调函数</span><br><span class="line">error:请求失败后的回调函数</span><br><span class="line">dataType:预期返回的数据的类型</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">userNameExists</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> userName =  $(<span class="string">&quot;#userName&quot;</span>).<span class="title function_">val</span>();</span><br><span class="line">    $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>:<span class="string">&quot;userNameExists&quot;</span>,</span><br><span class="line">        <span class="attr">async</span>:<span class="literal">true</span>,</span><br><span class="line">        <span class="attr">data</span>: <span class="string">&quot;userName=&quot;</span>+userName,</span><br><span class="line">        <span class="attr">type</span>:<span class="string">&quot;POST&quot;</span>,</span><br><span class="line">        <span class="attr">dataType</span>:<span class="string">&quot;text&quot;</span>,</span><br><span class="line">        <span class="attr">success</span>:<span class="keyword">function</span> (<span class="params">data</span>)&#123;</span><br><span class="line">            $(<span class="string">&quot;#sp1&quot;</span>).<span class="title function_">html</span>(data);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">error</span>:<span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;ajax error&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="3-JSON处理"><a href="#3-JSON处理" class="headerlink" title="3.JSON处理"></a>3.JSON处理</h2><h3 id="3-1-json简介"><a href="#3-1-json简介" class="headerlink" title="3.1 json简介"></a>3.1 json简介</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">json就是一种文件格式。主要用于数据的存储和表示，一般用于前后端分离的项目的数据交互。</span><br><span class="line">JSON格式:</span><br><span class="line">&#123;</span><br><span class="line">    key:value,</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line">[</span><br><span class="line">    &#123;key:value,</span><br><span class="line">    ...&#125;,</span><br><span class="line">    &#123;key:value,</span><br><span class="line">    ...&#125;,</span><br><span class="line">    &#123;key:value,</span><br><span class="line">    ...&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="3-2-JSON数据转换"><a href="#3-2-JSON数据转换" class="headerlink" title="3.2 JSON数据转换"></a>3.2 JSON数据转换</h3><p>对象和JSON转换</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">student.setStudentId(<span class="number">1</span>);</span><br><span class="line">student.setStudentName(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">student.setStudentGender(<span class="string">&quot;男&quot;</span>);</span><br><span class="line">student.setStudentAge(<span class="number">18</span>);</span><br><span class="line">student.setStudentBirthday(<span class="string">&quot;2000-01-01&quot;</span>);</span><br><span class="line">student.setCardId(<span class="number">2</span>);</span><br><span class="line"><span class="comment">//核心对象</span></span><br><span class="line"><span class="type">ObjectMapper</span> <span class="variable">om</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line"><span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> om.writeValueAsString(student); <span class="comment">//java对象转json</span></span><br><span class="line"><span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> om.readValue(json,Student.calss); <span class="comment">//json转java对象</span></span><br></pre></td></tr></table></figure><p>list和json的转换</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"> @Test</span><br><span class="line"> public void method01() throws Exception &#123;</span><br><span class="line">     List&lt;String&gt; list = Arrays.asList(&quot;张三&quot;, &quot;李四&quot;, &quot;王二&quot;);</span><br><span class="line">     ObjectMapper om = new ObjectMapper();</span><br><span class="line">     String json = om.writeValueAsString(list);</span><br><span class="line">     System.out.println(json);</span><br><span class="line">     ArrayList list1 = om.readValue(json, ArrayList.class);</span><br><span class="line">     list1.forEach(System.out::println);</span><br><span class="line"> &#125;</span><br><span class="line">上述代码是List中存储的是基本数据和String</span><br><span class="line">@Test</span><br><span class="line">public void method02() throws Exception &#123;</span><br><span class="line">    User user = new User(1, &quot;张三&quot;, &quot;1235&quot;);</span><br><span class="line">    User user2 = new User(2, &quot;李四&quot;, &quot;555&quot;);</span><br><span class="line">    List&lt;User&gt; list = Arrays.asList(user, user2);</span><br><span class="line">    ObjectMapper om = new ObjectMapper();</span><br><span class="line">    String json = om.writeValueAsString(list);</span><br><span class="line">    System.out.println(json);</span><br><span class="line">    ArrayList list2 = om.readValue(json, new TypeReference&lt;ArrayList&lt;User&gt;&gt;() &#123;&#125;);</span><br><span class="line">    list2.forEach(System.out::println);</span><br><span class="line">&#125;</span><br><span class="line">上述代码是List中存储的是引用数据类型</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Ajax&quot;&gt;&lt;a href=&quot;#Ajax&quot; class=&quot;headerlink&quot; title=&quot;Ajax&quot;&gt;&lt;/a&gt;Ajax&lt;/h1&gt;&lt;h2 id=&quot;1-Ajax简介&quot;&gt;&lt;a href=&quot;#1-Ajax简介&quot; class=&quot;headerlink&quot; title=&quot;1</summary>
      
    
    
    
    
    <category term="Java" scheme="http://sion-io.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Servlet</title>
    <link href="http://sion-io.github.io/2024/05/11/Servlet(2)/"/>
    <id>http://sion-io.github.io/2024/05/11/Servlet(2)/</id>
    <published>2024-05-11T06:56:01.000Z</published>
    <updated>2024-05-11T15:35:38.012Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h1><h2 id="1-JavaEE规范"><a href="#1-JavaEE规范" class="headerlink" title="1.JavaEE规范"></a>1.JavaEE规范</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JavaEE和J2EE是一个东西。是由SUN公司领导各大厂商定制的一套工业标准。其实翻译成白话就是很多Java技术的集合的总称。一共包含13种技术。Jsp/Servlet只是其中一种用于web开发。</span><br></pre></td></tr></table></figure><h2 id="2-前置知识"><a href="#2-前置知识" class="headerlink" title="2.前置知识"></a>2.前置知识</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">1.web概念</span><br><span class="line">定义：web其实就是从网络中获取资源(信息，音频，视频)。而资源来自于各个平台(网站)</span><br><span class="line"></span><br><span class="line">2.web程序的分类</span><br><span class="line">基本结构:B/S和C/S</span><br><span class="line">设备:移动端和PC端</span><br><span class="line">部署方式:一体化架构，垂直架构，分布式，微服务架构</span><br><span class="line"></span><br><span class="line">3.服务器</span><br><span class="line">定义:在互联网开发中服务器用于部署项目的一种应用(软件)。本质上来说服务器就是一个软件，用于发布程序员开发的项目。</span><br><span class="line"></span><br><span class="line">4.常见的服务器:</span><br><span class="line">Tomcat：只实现了Jsp/Servlet的规范。轻量级服务器。开源的</span><br><span class="line">Jboos：实现了JavaEE所有的规范。重量级服务器。开源</span><br><span class="line">weblogic:实现了JavaEE所有的规范。重量级服务器。非开源</span><br><span class="line"></span><br><span class="line">5.tomcat</span><br><span class="line">1)安装</span><br><span class="line">下载并且解压</span><br><span class="line">2)目录结构</span><br><span class="line">bin:存储的是tomcat的命令。主要分为linux(.sh)和windows(.bat)</span><br><span class="line">conf:</span><br><span class="line">web.xml:存储的是tomcat支持的文件类型</span><br><span class="line">server.xml:配置的端口号，域名，IP</span><br><span class="line">Catalina目录:配置tomcat启动时默认加载的项目</span><br><span class="line">lib:存储tomcat运行的时候需要的依赖</span><br><span class="line">logs:运行产生的日志文件，可清空</span><br><span class="line">temp:运行产生的临时文件，可清空</span><br><span class="line">webapps:存储的是部署的应用程序员，当tomcat启动的时候会加载此目录下的应用程序。</span><br><span class="line">work:存储tomcat运行的过程中产生的编译文件。例如jsp编译后的文件。清空此目录可以达到刷新换缓存的目的。</span><br></pre></td></tr></table></figure><h2 id="3-Servlet入门"><a href="#3-Servlet入门" class="headerlink" title="3.Servlet入门"></a>3.Servlet入门</h2><h3 id="3-1-Servlet简述"><a href="#3-1-Servlet简述" class="headerlink" title="3.1 Servlet简述"></a>3.1 Servlet简述</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Servlet是SUN公司的Jsp/Servlet规范中的一部分。通过拜读官网可得知以下信息:</span><br><span class="line">1.Servlet是运行在web服务器上的Java程序。</span><br><span class="line">2.它是用于接收和响应客户端的请求</span><br><span class="line">3.使用Servlet提供了三种方式，实现Servlet接口，继承HttpServlet类。继承GenericServlet类</span><br><span class="line">4.每次请求最终都会执行service方法</span><br><span class="line">5.支持配置</span><br></pre></td></tr></table></figure><h3 id="3-2-Servlet入门程序"><a href="#3-2-Servlet入门程序" class="headerlink" title="3.2 Servlet入门程序"></a>3.2 Servlet入门程序</h3><h4 id="3-2-1-创建maven项目"><a href="#3-2-1-创建maven项目" class="headerlink" title="3.2.1 创建maven项目"></a>3.2.1 创建maven项目</h4><h4 id="3-2-2-补充web目录"><a href="#3-2-2-补充web目录" class="headerlink" title="3.2.2 补充web目录"></a>3.2.2 补充web目录</h4><h4 id="3-2-3-编写pom-xml"><a href="#3-2-3-编写pom-xml" class="headerlink" title="3.2.3 编写pom.xml"></a>3.2.3 编写pom.xml</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;javax.servlet&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;javax.servlet-api&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;3.1.0&lt;/version&gt;</span><br><span class="line">            &lt;!--在编译和测试的时候使用此依赖，运行的时候不需要，因为tomcat已经是servlet的实现--&gt;</span><br><span class="line">            &lt;scope&gt;provided&lt;/scope&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br></pre></td></tr></table></figure><h4 id="3-2-4-编写Servlet"><a href="#3-2-4-编写Servlet" class="headerlink" title="3.2.4 编写Servlet"></a>3.2.4 编写Servlet</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public class HelloWordServlet extends HttpServlet &#123;</span><br><span class="line"></span><br><span class="line">    //接收get请求</span><br><span class="line">    @Override</span><br><span class="line">    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;</span><br><span class="line">        System.out.println(&quot;接收get请求&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    //接收post请求</span><br><span class="line">    @Override</span><br><span class="line">    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;</span><br><span class="line">        System.out.println(&quot;接收post请求&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-2-5-编写web-xml"><a href="#3-2-5-编写web-xml" class="headerlink" title="3.2.5 编写web.xml"></a>3.2.5 编写web.xml</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;web-app xmlns=&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span><br><span class="line">         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation=&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span><br><span class="line">         version=&quot;4.0&quot;&gt;</span><br><span class="line">    &lt;servlet&gt;</span><br><span class="line">        &lt;servlet-name&gt;HelloServlet&lt;/servlet-name&gt;</span><br><span class="line">        &lt;servlet-class&gt;com.lxk.controller.HelloWordServlet&lt;/servlet-class&gt;</span><br><span class="line">    &lt;/servlet&gt;</span><br><span class="line">    &lt;servlet-mapping&gt;</span><br><span class="line">        &lt;servlet-name&gt;HelloServlet&lt;/servlet-name&gt;</span><br><span class="line">        &lt;url-pattern&gt;/hello&lt;/url-pattern&gt;</span><br><span class="line">    &lt;/servlet-mapping&gt;</span><br><span class="line">&lt;/web-app&gt;</span><br></pre></td></tr></table></figure><h4 id="3-2-6-编写配置tomcat插件"><a href="#3-2-6-编写配置tomcat插件" class="headerlink" title="3.2.6 编写配置tomcat插件"></a>3.2.6 编写配置tomcat插件</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;build&gt;</span><br><span class="line">    &lt;plugins&gt;</span><br><span class="line">        &lt;plugin&gt;</span><br><span class="line">            &lt;groupId&gt;org.apache.tomcat.maven&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;tomcat7-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;2.2&lt;/version&gt;</span><br><span class="line">        &lt;/plugin&gt;</span><br><span class="line">    &lt;/plugins&gt;</span><br><span class="line">&lt;/build&gt;</span><br></pre></td></tr></table></figure><h4 id="3-2-7-修改项目打包方式"><a href="#3-2-7-修改项目打包方式" class="headerlink" title="3.2.7 修改项目打包方式"></a>3.2.7 修改项目打包方式</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;packaging&gt;war&lt;/packaging&gt;</span><br></pre></td></tr></table></figure><h4 id="3-2-8-测试"><a href="#3-2-8-测试" class="headerlink" title="3.2.8 测试"></a>3.2.8 测试</h4><h3 id="3-3-入门案例2"><a href="#3-3-入门案例2" class="headerlink" title="3.3 入门案例2"></a>3.3 入门案例2</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">public class FindUserByIdServlet extends HttpServlet &#123;</span><br><span class="line">    @Override</span><br><span class="line">    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;</span><br><span class="line">        //1.接收参数</span><br><span class="line">        String idStr = req.getParameter(&quot;id&quot;);</span><br><span class="line">        Integer id = Integer.valueOf(idStr);</span><br><span class="line">        System.out.println(id);</span><br><span class="line">        //2.返回数据</span><br><span class="line">        resp.getWriter().write(&quot;username+userpass&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;</span><br><span class="line">        //1.接收参数</span><br><span class="line">        String idStr = req.getParameter(&quot;id&quot;);</span><br><span class="line">        Integer id = Integer.valueOf(idStr);</span><br><span class="line">        System.out.println(id);</span><br><span class="line">        //2.返回数据</span><br><span class="line">        resp.getWriter().write(&quot;username+userpass&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;servlet&gt;</span><br><span class="line">        &lt;servlet-name&gt;FindUserById&lt;/servlet-name&gt;</span><br><span class="line">        &lt;servlet-class&gt;com.lxk.controller.FindUserByIdServlet&lt;/servlet-class&gt;</span><br><span class="line">    &lt;/servlet&gt;</span><br><span class="line">    &lt;servlet-mapping&gt;</span><br><span class="line">        &lt;servlet-name&gt;FindUserById&lt;/servlet-name&gt;</span><br><span class="line">        &lt;url-pattern&gt;/findbyid&lt;/url-pattern&gt;</span><br><span class="line">    &lt;/servlet-mapping&gt;</span><br></pre></td></tr></table></figure><h3 id="3-4-get请求和post请求的区别"><a href="#3-4-get请求和post请求的区别" class="headerlink" title="3.4 get请求和post请求的区别"></a>3.4 get请求和post请求的区别</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1.地址栏显示</span><br><span class="line">get请求会把提交的数据显示在地址栏</span><br><span class="line">post请求会把提交的数据不显示在地址栏</span><br><span class="line">2.敏感信息安全问题</span><br><span class="line">get请求敏感信息不安全</span><br><span class="line">post请求敏感信息安全</span><br><span class="line">3.请求数据的大小</span><br><span class="line">get请求无法提交过大的数据，因为数据存储在地址栏中</span><br><span class="line">post请求可以提交很大的数据</span><br></pre></td></tr></table></figure><h3 id="3-5-注解开发"><a href="#3-5-注解开发" class="headerlink" title="3.5 注解开发"></a>3.5 注解开发</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">在web3.0以后提供了注解的方式</span><br><span class="line">@WebServlet(url)</span><br><span class="line">案例:</span><br><span class="line">@WebServlet(&quot;/findbyid&quot;)</span><br><span class="line">public class FindUserByIdServlet extends HttpServlet &#123;</span><br><span class="line">    @Override</span><br><span class="line">    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;</span><br><span class="line">        this.doPost(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;</span><br><span class="line">        //1.接收参数</span><br><span class="line">        String idStr = req.getParameter(&quot;id&quot;);</span><br><span class="line">        Integer id = Integer.valueOf(idStr);</span><br><span class="line">        System.out.println(id);</span><br><span class="line">        //2.返回数据</span><br><span class="line">        resp.getWriter().write(&quot;username+userpass&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-Servlet的执行过程"><a href="#4-Servlet的执行过程" class="headerlink" title="4.Servlet的执行过程"></a>4.Servlet的执行过程</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">用户通过浏览器发送请求，请求到达Tomcat服务器(localhost:8080),由服务器解析请求的URL，然后在服务器的部署列表中找到对应的对用，然后通过应用中的web.xml中配置的本次请求具体交给那个Servlet进行处理。并且执行对应的Servlet的方法。最后Servlet处理完请求进行响应。</span><br><span class="line"></span><br><span class="line">浏览器----&gt;服务器-----&gt;web.xml----&gt;Servlet----&gt;浏览器</span><br></pre></td></tr></table></figure><h2 id="5-Servlet的生命周期和线程安全"><a href="#5-Servlet的生命周期和线程安全" class="headerlink" title="5.Servlet的生命周期和线程安全"></a>5.Servlet的生命周期和线程安全</h2><h3 id="5-1-生命周期"><a href="#5-1-生命周期" class="headerlink" title="5.1 生命周期"></a>5.1 生命周期</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">默认情况下请求第一次到达Servlet的时候，Servlet会被实例化并且初始化。只实例化一次存放在内存中</span><br><span class="line">服务器只要提供服务，Servlet对象就会一直存在</span><br><span class="line">当服务器停止的时候Servlet也会死亡</span><br><span class="line"></span><br><span class="line">总结来说：Servlet的初始化和实例化只会在请求第一次到达的时候执行，销毁也只会在Tomcat服务器停止的时候执行。说明Servlet对象是一个单例的。</span><br></pre></td></tr></table></figure><h3 id="5-2-线程安全"><a href="#5-2-线程安全" class="headerlink" title="5.2 线程安全"></a>5.2 线程安全</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">@WebServlet(&quot;/login&quot;)</span><br><span class="line">public class LoginServlet extends HttpServlet &#123;</span><br><span class="line">  String token;</span><br><span class="line">    @Override</span><br><span class="line">    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;</span><br><span class="line">        this.doPost(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;</span><br><span class="line">        token = req.getParameter(&quot;token&quot;);</span><br><span class="line">        try &#123;</span><br><span class="line">            Thread.sleep(5000);</span><br><span class="line">        &#125; catch (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        resp.getWriter().write(token);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">PS：当多个线程访问同一个Servlet就会出现数据共享问题，因为Servlet是单例的</span><br><span class="line">解决方案:</span><br><span class="line">在Servlet中成员变量的使用需要谨慎。如果这个变量只是在初始化的时候赋值，后续每次请求都是获取此值那么可以使用。</span><br><span class="line">如果多次请求都会修改此值，那么就需要局部变量</span><br></pre></td></tr></table></figure><h2 id="6-实例化和初始化时机"><a href="#6-实例化和初始化时机" class="headerlink" title="6.实例化和初始化时机"></a>6.实例化和初始化时机</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">@WebServlet(urlPatterns = &#123;&quot;/login&quot;&#125;,loadOnStartup = 0)</span><br><span class="line">or</span><br><span class="line">&lt;servlet&gt;</span><br><span class="line">    &lt;servlet-name&gt;HelloServlet&lt;/servlet-name&gt;</span><br><span class="line">    &lt;servlet-class&gt;com.lxk.controller.HelloWordServlet&lt;/servlet-class&gt;</span><br><span class="line">    &lt;!--配置Servlet在服务器启动的时候进行实例化和初始化，此配置只能为正整数 (0也可以)--&gt;</span><br><span class="line">    &lt;!--数字的大小代表的就是优先级。数字越小 优先级越大--&gt;</span><br><span class="line">    &lt;load-on-startup&gt;0&lt;/load-on-startup&gt;</span><br><span class="line">&lt;/servlet&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">第一次请求实例化:优点：不会浪费过多内存  缺点:首次执行的效率低</span><br><span class="line">服务器启动实例化:优点：提高首次执行的效率  缺点：浪费内存</span><br></pre></td></tr></table></figure><h2 id="7-ServletConfig"><a href="#7-ServletConfig" class="headerlink" title="7.ServletConfig"></a>7.ServletConfig</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ServletConfig就是Servlet的配置参数对象。在Servlet规范中允许每一个Servlet都具有自己的初始化参数，每一个Servlet的初始化参数都会被映射成一个ServlrtConfig对象</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;servlet&gt;</span><br><span class="line">        &lt;servlet-name&gt;HelloServlet&lt;/servlet-name&gt;</span><br><span class="line">        &lt;servlet-class&gt;com.lxk.controller.HelloWordServlet&lt;/servlet-class&gt;</span><br><span class="line">        &lt;init-param&gt;</span><br><span class="line">            &lt;param-name&gt;name&lt;/param-name&gt;</span><br><span class="line">            &lt;param-value&gt;zhangsan&lt;/param-value&gt;</span><br><span class="line">        &lt;/init-param&gt;</span><br><span class="line">        &lt;load-on-startup&gt;0&lt;/load-on-startup&gt;</span><br><span class="line">    &lt;/servlet&gt;</span><br><span class="line">or</span><br><span class="line">@WebServlet(urlPatterns = &#123;&quot;/login&quot;&#125;,loadOnStartup = 0,initParams=&#123;@WebInitParam(name = &quot;name&quot;,value = &quot;admin&quot;)&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;</span><br><span class="line">       ServletConfig servletConfig = getServletConfig();</span><br><span class="line">       //获取当前servlet的名字</span><br><span class="line">       System.out.println(servletConfig.getServletName());</span><br><span class="line">       //获取初始化的参数值</span><br><span class="line">       System.out.println(servletConfig.getInitParameter(&quot;name&quot;));</span><br><span class="line">       //获取ServletContext对象</span><br><span class="line">       ServletContext servletContext = servletConfig.getServletContext();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="8-ServletContext"><a href="#8-ServletContext" class="headerlink" title="8.ServletContext"></a>8.ServletContext</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ServletContext对象就是应用上下文对象。每一个应用(项目)只有一个ServletContext对象。它可以完成所有servlet之间的数据共享</span><br></pre></td></tr></table></figure><h3 id="8-1-获取全局数据"><a href="#8-1-获取全局数据" class="headerlink" title="8.1 获取全局数据"></a>8.1 获取全局数据</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;context-param&gt;</span><br><span class="line">    &lt;param-name&gt;projectName&lt;/param-name&gt;</span><br><span class="line">    &lt;param-value&gt;servlet02&lt;/param-value&gt;</span><br><span class="line">&lt;/context-param&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;</span><br><span class="line">       ServletConfig servletConfig = getServletConfig();</span><br><span class="line">       //获取ServletContext对象</span><br><span class="line">       ServletContext servletContext = servletConfig.getServletContext();</span><br><span class="line">       String projectName = servletContext.getInitParameter(&quot;projectName&quot;);</span><br><span class="line">       System.out.println(projectName);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="8-2-数据共享"><a href="#8-2-数据共享" class="headerlink" title="8.2 数据共享"></a>8.2 数据共享</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1.存储数据</span><br><span class="line">ServletContext servletContext = getServletContext();</span><br><span class="line">servletContext.setAttribute(&quot;test&quot;,&quot;12345&quot;); </span><br><span class="line">2.获取数据</span><br><span class="line"> ServletContext servletContext = getServletContext();</span><br><span class="line"> String test = (String)servletContext.getAttribute(&quot;test&quot;);</span><br><span class="line"> System.out.println(test);</span><br><span class="line"> PS：上面1和2的代码来自于不同的Servlet，代码2获取到了代码1的存储的数据。说明ServletContext对象是所有servlet共享的</span><br></pre></td></tr></table></figure><h2 id="9-多个请求指向同一个servlet"><a href="#9-多个请求指向同一个servlet" class="headerlink" title="9.多个请求指向同一个servlet"></a>9.多个请求指向同一个servlet</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">@WebServlet(urlPatterns = &#123;&quot;/add&quot;,&quot;/update&quot;,&quot;/delete&quot;,&quot;/findall&quot;&#125;)</span><br><span class="line"></span><br><span class="line">protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;</span><br><span class="line">       //获取请求的url</span><br><span class="line">        String url = req.getRequestURI();</span><br><span class="line">        String str = url.substring(url.lastIndexOf(&quot;/&quot;) + 1);</span><br><span class="line">        StudentService studentService = new StudentServiceImpl();</span><br><span class="line">        switch (str)&#123;</span><br><span class="line">            case &quot;add&quot; :</span><br><span class="line">                req.setCharacterEncoding(&quot;UTF-8&quot;);</span><br><span class="line">                System.out.println(req.getParameter(&quot;name&quot;));</span><br><span class="line">                Student student = new Student();</span><br><span class="line">                student.setStudentName(req.getParameter(&quot;name&quot;));</span><br><span class="line">                student.setStudentGender(req.getParameter(&quot;sex&quot;));</span><br><span class="line">                student.setStudentAge(Integer.valueOf(req.getParameter(&quot;age&quot;)));</span><br><span class="line">                student.setStudentBirthday(req.getParameter(&quot;birthday&quot;));</span><br><span class="line">                student.setCardId(Integer.valueOf(req.getParameter(&quot;cid&quot;)));</span><br><span class="line">                studentService.add(student);</span><br><span class="line">                break;</span><br><span class="line">            case &quot;update&quot; :</span><br><span class="line">                break;</span><br><span class="line">            case &quot;delete&quot; :</span><br><span class="line">                break;</span><br><span class="line">            case &quot;findall&quot; :</span><br><span class="line">                List&lt;Student&gt; list = studentService.findAll();</span><br><span class="line">                ObjectMapper objectMapper = new ObjectMapper();</span><br><span class="line">                String string = objectMapper.writeValueAsString(list);</span><br><span class="line">                resp.setCharacterEncoding(&quot;UTF-8&quot;);</span><br><span class="line">                resp.getWriter().write(string);</span><br><span class="line">                break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="10-请求响应对象"><a href="#10-请求响应对象" class="headerlink" title="10.请求响应对象"></a>10.请求响应对象</h2><h3 id="10-2-响应对象"><a href="#10-2-响应对象" class="headerlink" title="10.2 响应对象"></a>10.2 响应对象</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">1.简述</span><br><span class="line">响应:服务器接收请求并且处理完毕后，把处理结果告知给用户。</span><br><span class="line">2.常用的方法</span><br><span class="line">resp.sendRedirect(&quot;add&quot;); //重定向；就是重新发送了一次请求</span><br><span class="line">resp.setHeader(&quot;Content-Type&quot;,&quot;text/html;charset=UTF-8&quot;); //设置响应内容的编码集</span><br><span class="line">3.常见的状态码</span><br><span class="line">200: 执行成功</span><br><span class="line">302: 重定向</span><br><span class="line">404: 请求的资源找不到</span><br><span class="line">405: 请求的方式不支持</span><br><span class="line">500: 服务器内部运行错误</span><br><span class="line"></span><br><span class="line">4XX：客户端错误</span><br><span class="line">5XX：服务端错误</span><br></pre></td></tr></table></figure><h3 id="10-2-请求对象"><a href="#10-2-请求对象" class="headerlink" title="10.2 请求对象"></a>10.2 请求对象</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">1.简述</span><br><span class="line">请求:客户希望从服务端得到一些资源，对服务器发送的询问</span><br><span class="line">2.常用方法</span><br><span class="line">/获取服务器的地址</span><br><span class="line">String localAddr = req.getLocalAddr();</span><br><span class="line">//获取端口号</span><br><span class="line">int localPort = req.getLocalPort();</span><br><span class="line">//来访者IP</span><br><span class="line">String remoteHost = req.getRemoteHost();</span><br><span class="line">//获取请求的url</span><br><span class="line">String url = req.getRequestURI();</span><br><span class="line">//获取请求的参数</span><br><span class="line">String str = req.getParameter(&quot;key&quot;) //获取参数的key获取value</span><br><span class="line">String[] hobbies = req.getParameterValues(&quot;hobby&quot;); //获取相同key的数组</span><br><span class="line">Map&lt;String, String[]&gt; parameterMap = req.getParameterMap(); //获取所有的参数</span><br><span class="line">//转发</span><br><span class="line">req.getRequestDispatcher(&quot;index.jsp&quot;).forward(req,resp);</span><br><span class="line">//设置请求的编码集</span><br><span class="line">req.setCharacterEncoding(&quot;UTF-8&quot;);</span><br><span class="line">3.获取请求参数案例</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="11-四大作用域"><a href="#11-四大作用域" class="headerlink" title="11.四大作用域"></a>11.四大作用域</h2><h3 id="11-1-Application-ServletContext"><a href="#11-1-Application-ServletContext" class="headerlink" title="11.1 Application(ServletContext)"></a>11.1 Application(ServletContext)</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">作用范围:所有的用户都可以获取此信息。存储在此作用域中的数据会被整个服务器共享</span><br><span class="line">丢失时机:服务器停止</span><br></pre></td></tr></table></figure><h3 id="11-2-Session-会话"><a href="#11-2-Session-会话" class="headerlink" title="11.2 Session(会话)"></a>11.2 Session(会话)</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">作用范围：浏览器开始访问到浏览器关闭</span><br><span class="line">会话:当用户通过浏览器第一次访问应用的时候 服务器会对该用户创建一个会话对象。当浏览器关闭的时候会话结束，此对象消失。一次会话期间只会产生一个session对象</span><br></pre></td></tr></table></figure><h3 id="11-3-request-请求"><a href="#11-3-request-请求" class="headerlink" title="11.3 request(请求)"></a>11.3 request(请求)</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">作用范围:从请求开始到响应结束。仅对本次请求有效</span><br><span class="line">丢时时机:当发生下一次请求的时候会产生新的request对象，上一次请求的request对象就消亡，数据随着request对象的消亡而消亡</span><br></pre></td></tr></table></figure><h3 id="11-4-PageContext"><a href="#11-4-PageContext" class="headerlink" title="11.4 PageContext"></a>11.4 PageContext</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">作用范围:整个JSP页面</span><br><span class="line">作用:为了获取其他八个隐式对象</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Servlet&quot;&gt;&lt;a href=&quot;#Servlet&quot; class=&quot;headerlink&quot; title=&quot;Servlet&quot;&gt;&lt;/a&gt;Servlet&lt;/h1&gt;&lt;h2 id=&quot;1-JavaEE规范&quot;&gt;&lt;a href=&quot;#1-JavaEE规范&quot; class=&quot;head</summary>
      
    
    
    
    
    <category term="Java" scheme="http://sion-io.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Spring</title>
    <link href="http://sion-io.github.io/2024/05/11/Spring(3)/"/>
    <id>http://sion-io.github.io/2024/05/11/Spring(3)/</id>
    <published>2024-05-11T06:56:01.000Z</published>
    <updated>2024-05-11T15:35:38.004Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h1><h2 id="1-目前开发存在的问题"><a href="#1-目前开发存在的问题" class="headerlink" title="1.目前开发存在的问题"></a>1.目前开发存在的问题</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1.接口看起来没啥用(IOC)</span><br><span class="line">2.模块之间的耦合度过高(IOC)</span><br><span class="line">3.存在一定的内存浪费(IOC)</span><br><span class="line">4.横向的代码冗余问题没法解决(AOP)</span><br><span class="line">以上问题都可以使用Spring进行解决</span><br></pre></td></tr></table></figure><h2 id="2-Spring简介"><a href="#2-Spring简介" class="headerlink" title="2.Spring简介"></a>2.Spring简介</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Spring就是一个开源的分层的JavaSE/EE应用的轻量级框架。Spring中当选学习的核心是IOC和AOP</span><br><span class="line">Spring优点:</span><br><span class="line">方便解耦，简化开发</span><br><span class="line">方便集成第三方的框架</span><br><span class="line">AOP编程的支持(弥补OOP的缺点)</span><br><span class="line">声明式事务的支持</span><br></pre></td></tr></table></figure><h2 id="3-IOC"><a href="#3-IOC" class="headerlink" title="3.IOC"></a>3.IOC</h2><h3 id="3-1IOC简介"><a href="#3-1IOC简介" class="headerlink" title="3.1IOC简介"></a>3.1IOC简介</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">IOC：控制反转。由Spring反向控制(创建，注入)程序中所需要的外部资源</span><br><span class="line">Spring控制的资源会全部放入到Sprin容器中，Spring会根据程序员配置的信息自动把这些外部资源注入到所需要的位置。</span><br></pre></td></tr></table></figure><h3 id="3-2-IOC的入门程序"><a href="#3-2-IOC的入门程序" class="headerlink" title="3.2 IOC的入门程序"></a>3.2 IOC的入门程序</h3><p>需求:模拟一个Controller层需要一个Service层对象</p><h4 id="3-2-1-创建项目引入依赖"><a href="#3-2-1-创建项目引入依赖" class="headerlink" title="3.2.1 创建项目引入依赖"></a>3.2.1 创建项目引入依赖</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-context&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;5.3.10&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br></pre></td></tr></table></figure><h4 id="3-2-2-编写项目结构"><a href="#3-2-2-编写项目结构" class="headerlink" title="3.2.2 编写项目结构"></a>3.2.2 编写项目结构</h4><h4 id="3-2-3-编写spring配置文件"><a href="#3-2-3-编写spring配置文件" class="headerlink" title="3.2.3 编写spring配置文件"></a>3.2.3 编写spring配置文件</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">       xmlns:context=&quot;http://www.springframework.org/schema/context&quot;</span><br><span class="line">       xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot;</span><br><span class="line">       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</span><br><span class="line">        https://www.springframework.org/schema/beans/spring-beans.xsd</span><br><span class="line">        http://www.springframework.org/schema/context</span><br><span class="line">        https://www.springframework.org/schema/context/spring-context.xsd</span><br><span class="line">        http://www.springframework.org/schema/aop</span><br><span class="line">        https://www.springframework.org/schema/aop/spring-aop.xsd&quot;&gt;</span><br><span class="line">    &lt;!--Controller层需要一个Service层对象--&gt;</span><br><span class="line">    &lt;!--下面这行配置等价于 UserServiceImpl  userService = new UserServiceImpl()--&gt;</span><br><span class="line">    &lt;bean id=&quot;userService&quot; class=&quot;com.lxk.service.impl.UserServiceImpl&quot;&gt;&lt;/bean&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><h4 id="3-2-4-编写测试代码"><a href="#3-2-4-编写测试代码" class="headerlink" title="3.2.4 编写测试代码"></a>3.2.4 编写测试代码</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">        ClassPathXmlApplicationContext applicationContext = new ClassPathXmlApplicationContext(&quot;spring.xml&quot;);</span><br><span class="line">        UserService userService = applicationContext.getBean(&quot;userService&quot;, UserService.class);</span><br><span class="line">        userService.method01();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">通过以上代码测试，可以得知已经使用Spring来完成对象的创建。多次获取的对象也是同一个对象，说明默认是单例的。</span><br></pre></td></tr></table></figure><h4 id="3-2-5-完成对象的注入"><a href="#3-2-5-完成对象的注入" class="headerlink" title="3.2.5 完成对象的注入"></a>3.2.5 完成对象的注入</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=&quot;userService&quot; class=&quot;com.lxk.service.impl.UserServiceImpl&quot;&gt;&lt;/bean&gt;</span><br><span class="line">&lt;!--UserController userController= new UserController();--&gt;</span><br><span class="line">&lt;bean id=&quot;userController&quot; class=&quot;com.lxk.controller.UserController&quot;&gt;</span><br><span class="line">    &lt;!--userController.setUserService(userService) 使用属性的Set注入 name:当前bean的属性名 ref:需要租注入的对象的id--&gt;</span><br><span class="line">    &lt;property name=&quot;userService&quot; ref=&quot;userService&quot;&gt;&lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public class UserController &#123;</span><br><span class="line">    private UserService userService;</span><br><span class="line"></span><br><span class="line">    //用于Spring的注入</span><br><span class="line">    public void setUserService(UserService userService)&#123;</span><br><span class="line">        this.userService=userService;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述就完成了Spring创建UserServiceImpl并且注入到UserController层中</p><h3 id="3-3-IOC配置"><a href="#3-3-IOC配置" class="headerlink" title="3.3 IOC配置"></a>3.3 IOC配置</h3><h4 id="3-3-1-bean标签"><a href="#3-3-1-bean标签" class="headerlink" title="3.3.1 bean标签"></a>3.3.1 bean标签</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">作用:定义Spring中的资源(Java对象)，使用此标签定义的资源将由Spring管理</span><br><span class="line">注意:此标签和new一样都是依赖于构造方法</span><br><span class="line">属性:</span><br><span class="line">id:bean的名字。其他地方可以通过id获取此bean对象</span><br><span class="line">name:bean的名字。其他地方可以通过id获取此bean对象。不推荐使用</span><br><span class="line">class:bean的类型</span><br><span class="line">scope:作用范围</span><br><span class="line">singleton：创建的对象保存到容器中，是一个单例对象(默认)</span><br><span class="line">prototype：创建的对象保存到容器中，是一个多例对象</span><br><span class="line">request，session，global session(知道即可)</span><br></pre></td></tr></table></figure><h4 id="3-3-2-生命周期"><a href="#3-3-2-生命周期" class="headerlink" title="3.3.2 生命周期"></a>3.3.2 生命周期</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">生命周期的属性:init-method   destroy-method</span><br><span class="line">作用:定义bean对象在初始化和销毁阶段分别做什么事情</span><br><span class="line">属性值:自定义的方法名</span><br><span class="line">创建和销毁的时机:</span><br><span class="line">创建时:</span><br><span class="line">当scope=singleton。Spring容器只会创建一个对象，所以init-method对应的方法也只会执行一次，在容器初始化的时候执行。</span><br><span class="line">当scope=prototype。Spring容器会创建多个对象，在容器初始化和获取此对象的时候都会执行</span><br><span class="line">销毁时:</span><br><span class="line">当scope=singleton。关闭容器的时候就会导致容器中所有的实例被销毁。并且执行每个实例对象destroy-method对应的方法。也只会执行一次。</span><br><span class="line">当scope=prototype。容器中的对象属于不可控状态，因为对象的销毁会交给gc来执行。</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public void init()&#123;</span><br><span class="line">    System.out.println(&quot;初始化&quot;);</span><br><span class="line">&#125;</span><br><span class="line">public void destroy()&#123;</span><br><span class="line">    System.out.println(&quot;死亡&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=&quot;userService&quot; class=&quot;com.lxk.service.impl.UserServiceImpl222&quot; scope=&quot;singleton&quot; init-method=&quot;init&quot; destroy-method=&quot;destroy&quot;&gt;&lt;/bean&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">        ClassPathXmlApplicationContext applicationContext = new ClassPathXmlApplicationContext(&quot;spring.xml&quot;);</span><br><span class="line">        UserServiceImpl222 userService1 = applicationContext.getBean(&quot;userService&quot;, UserServiceImpl222.class);</span><br><span class="line">        UserServiceImpl222 userService2 = applicationContext.getBean(&quot;userService&quot;, UserServiceImpl222.class);</span><br><span class="line">        //关闭容器</span><br><span class="line">        applicationContext.registerShutdownHook();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="3-4-DI"><a href="#3-4-DI" class="headerlink" title="3.4 DI"></a>3.4 DI</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DI:依赖注入，使用IOC创建的资源全部要交给IOC容器进行管理。DI主要负责把资源注入到程序中所需要的地方</span><br></pre></td></tr></table></figure><h4 id="3-4-1-Set注入-主流"><a href="#3-4-1-Set注入-主流" class="headerlink" title="3.4.1 Set注入(主流)"></a>3.4.1 Set注入(主流)</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">property标签:使用属性对应的set方法为bean提供资源，</span><br><span class="line">属性:</span><br><span class="line">name:对应的时bean中的属性名。要求该属性必须提供可以访问的set方法</span><br><span class="line">value:设定基本数据类型的值和String。不能和ref同时出现</span><br><span class="line">ref:设定引用数据类型对应的bean的id。不能和value同时出现</span><br></pre></td></tr></table></figure><h4 id="3-4-2-构造器注入"><a href="#3-4-2-构造器注入" class="headerlink" title="3.4.2 构造器注入"></a>3.4.2 构造器注入</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=&quot;user&quot; class=&quot;com.lxk.pojo.User&quot;&gt;</span><br><span class="line">    &lt;constructor-arg name=&quot;userId&quot; value=&quot;1001&quot;/&gt;</span><br><span class="line">    &lt;constructor-arg name=&quot;userName&quot; value=&quot;李四&quot;/&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line">官方不推荐使用。标记为过时的。之所以没有删除就为了兼容早期项目的升级工作</span><br></pre></td></tr></table></figure><h2 id="4-Spring配置文件"><a href="#4-Spring配置文件" class="headerlink" title="4.Spring配置文件"></a>4.Spring配置文件</h2><h3 id="4-1-加载资源文件"><a href="#4-1-加载资源文件" class="headerlink" title="4.1 加载资源文件"></a>4.1 加载资源文件</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysql_driver=com.mysql.cj.jdbc.Driver</span><br><span class="line">mysql_url=jdbc:mysql://127.0.0.1:3306/filmdb?characterEncoding=utf8&amp;serverTimezone=Asia/Shanghai</span><br><span class="line">mysql_username=root</span><br><span class="line">mysql_password=1234</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--加载资源文件--&gt;</span><br><span class="line">&lt;context:property-placeholder location=&quot;classpath:mysql.properties&quot;/&gt;</span><br><span class="line">&lt;!--配置数据源--&gt;</span><br><span class="line">&lt;bean id=&quot;dataSource&quot; class=&quot;com.lxk.pojo.MyDataSource&quot;&gt;</span><br><span class="line">    &lt;property name=&quot;driver&quot; value=&quot;$&#123;mysql_driver&#125;&quot;/&gt;</span><br><span class="line">    &lt;property name=&quot;url&quot; value=&quot;$&#123;mysql_url&#125;&quot;/&gt;</span><br><span class="line">    &lt;property name=&quot;userName&quot; value=&quot;$&#123;mysql_username&#125;&quot;/&gt;</span><br><span class="line">    &lt;property name=&quot;password&quot; value=&quot;$&#123;mysql_password&#125;&quot;/&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure><h3 id="4-2-导入配置文件"><a href="#4-2-导入配置文件" class="headerlink" title="4.2 导入配置文件"></a>4.2 导入配置文件</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;import resource=&quot;classpath:spring-lxk.xml&quot;/&gt;</span><br><span class="line"></span><br><span class="line">在Spring配置文件中可以引入其他Spring的配置文件。</span><br><span class="line">但是可能会存在同名bean的问题，id相同的多个bean，后定义的会覆盖先定义的。所以import标签出现的位置可能会影响最终的bean</span><br></pre></td></tr></table></figure><h3 id="4-3-Spirng配置Druid"><a href="#4-3-Spirng配置Druid" class="headerlink" title="4.3 Spirng配置Druid"></a>4.3 Spirng配置Druid</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--加载资源文件--&gt;</span><br><span class="line">&lt;context:property-placeholder location=&quot;classpath:mysql.properties&quot;/&gt;</span><br><span class="line">&lt;!--配置数据源--&gt;</span><br><span class="line">&lt;bean id=&quot;dataSource&quot; class=&quot;com.alibaba.druid.pool.DruidDataSource&quot;&gt;</span><br><span class="line">    &lt;property name=&quot;driverClassName&quot; value=&quot;$&#123;mysql_driver&#125;&quot;/&gt;</span><br><span class="line">    &lt;property name=&quot;url&quot; value=&quot;$&#123;mysql_url&#125;&quot;/&gt;</span><br><span class="line">    &lt;property name=&quot;username&quot; value=&quot;$&#123;mysql_username&#125;&quot;/&gt;</span><br><span class="line">    &lt;property name=&quot;password&quot; value=&quot;$&#123;mysql_password&#125;&quot;/&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure><h2 id="5-Spring整合Mybatis"><a href="#5-Spring整合Mybatis" class="headerlink" title="5.Spring整合Mybatis"></a>5.Spring整合Mybatis</h2><h3 id="5-1-编写依赖文件"><a href="#5-1-编写依赖文件" class="headerlink" title="5.1 编写依赖文件"></a>5.1 编写依赖文件</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;8.0.19&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.mybatis&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;mybatis&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;3.5.10&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-context&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;5.3.10&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-jdbc&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;5.3.10&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;druid&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;1.2.12&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.mybatis&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;mybatis-spring&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;2.1.0&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;1.18.12&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;junit&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;junit&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;4.11&lt;/version&gt;</span><br><span class="line">        &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;com.github.pagehelper&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;pagehelper&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;5.1.2&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure><p>5.2 编写配置文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">       xmlns:context=&quot;http://www.springframework.org/schema/context&quot;</span><br><span class="line">       xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot;</span><br><span class="line">       xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot;</span><br><span class="line">       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</span><br><span class="line">        https://www.springframework.org/schema/beans/spring-beans.xsd</span><br><span class="line">        http://www.springframework.org/schema/context</span><br><span class="line">        https://www.springframework.org/schema/context/spring-context.xsd</span><br><span class="line">        http://www.springframework.org/schema/aop</span><br><span class="line">        https://www.springframework.org/schema/aop/spring-aop.xsd</span><br><span class="line">        http://www.springframework.org/schema/tx</span><br><span class="line">        https://www.springframework.org/schema/tx/spring-tx.xsd&quot;&gt;</span><br><span class="line">    &lt;!--加载资源文件--&gt;</span><br><span class="line">    &lt;context:property-placeholder location=&quot;classpath:mysql.properties&quot;/&gt;</span><br><span class="line">    &lt;!--配置数据源--&gt;</span><br><span class="line">    &lt;bean id=&quot;dataSource&quot; class=&quot;com.alibaba.druid.pool.DruidDataSource&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;driverClassName&quot; value=&quot;$&#123;mysql_driver&#125;&quot;/&gt;</span><br><span class="line">        &lt;property name=&quot;url&quot; value=&quot;$&#123;mysql_url&#125;&quot;/&gt;</span><br><span class="line">        &lt;property name=&quot;username&quot; value=&quot;$&#123;mysql_username&#125;&quot;/&gt;</span><br><span class="line">        &lt;property name=&quot;password&quot; value=&quot;$&#123;mysql_password&#125;&quot;/&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">    &lt;!--mybatis配置--&gt;</span><br><span class="line">    &lt;bean id=&quot;configuration&quot; class=&quot;org.apache.ibatis.session.Configuration&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;mapUnderscoreToCamelCase&quot; value=&quot;true&quot;/&gt;</span><br><span class="line">        &lt;property name=&quot;logImpl&quot; value=&quot;org.apache.ibatis.logging.stdout.StdOutImpl&quot;/&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">    &lt;!--配置spring和mybatis整合--&gt;</span><br><span class="line">    &lt;bean class=&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;/&gt;</span><br><span class="line">        &lt;property name=&quot;configuration&quot; ref=&quot;configuration&quot;/&gt;</span><br><span class="line">        &lt;property name=&quot;typeAliasesPackage&quot; value=&quot;com.lxk.pojo&quot;/&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">    &lt;!--加载映射文件，并且创建mapper接口的代理对象，并且放入到容器中  批量生成的对象的id为接口名 首字母大小写都可以--&gt;</span><br><span class="line">    &lt;bean class=&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;basePackage&quot; value=&quot;com.lxk.mapper&quot;/&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--mapper代理对象注入到service层中--&gt;</span><br><span class="line">    &lt;bean id=&quot;filmService&quot; class=&quot;com.lxk.service.impl.FilmServiceImpl&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;filmMapper&quot; ref=&quot;filmMapper&quot;/&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">    &lt;bean id=&quot;filmController&quot; class=&quot;com.lxk.controller.FilmController&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;filmService&quot; ref=&quot;filmService&quot;/&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><h3 id="5-3-编写业务代码"><a href="#5-3-编写业务代码" class="headerlink" title="5.3 编写业务代码"></a>5.3 编写业务代码</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">查看视频</span><br></pre></td></tr></table></figure><h2 id="6-Spring-IOC注解"><a href="#6-Spring-IOC注解" class="headerlink" title="6.Spring IOC注解"></a>6.Spring IOC注解</h2><h3 id="6-1-开启注解开发"><a href="#6-1-开启注解开发" class="headerlink" title="6.1 开启注解开发"></a>6.1 开启注解开发</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--开启注解扫描--&gt;</span><br><span class="line">&lt;context:component-scan base-package=&quot;com.lxk&quot;&gt;&lt;/context:component-scan&gt;</span><br><span class="line">说明:</span><br><span class="line">1.在进行扫描的时候会对配置的包以及子包的所有文件进行扫描</span><br><span class="line">2.扫描过程中仅读取合法的Java文件</span><br><span class="line">3.扫描过程中仅能识别对Spring有效的注解</span><br><span class="line">4.扫描结束后会将识别的注解转成Java对应的资源加载到容器中</span><br><span class="line">5.支持混合开发(但是推荐注解开发)</span><br></pre></td></tr></table></figure><h3 id="6-2-常用的注解"><a href="#6-2-常用的注解" class="headerlink" title="6.2 常用的注解"></a>6.2 常用的注解</h3><h4 id="6-2-1-bean的定义"><a href="#6-2-1-bean的定义" class="headerlink" title="6.2.1 bean的定义"></a>6.2.1 bean的定义</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">名称:@Component，@Repository，@Service，@Controller</span><br><span class="line">类型:类注解</span><br><span class="line">位置:类定义的上面</span><br><span class="line">作用：设置该类为Spring管理的bean(bean的id就是类名(首字母小写))</span><br><span class="line">属性:value:设置bean的id</span><br><span class="line">说明:@Repository，@Service，@Controller都是@Component的衍生注解。功能都一样。只是具备了不同的语义。</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@Service</span><br><span class="line">public class FilmServiceImpl implements FilmService &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-2-2-bean的作用域"><a href="#6-2-2-bean的作用域" class="headerlink" title="6.2.2 bean的作用域"></a>6.2.2 bean的作用域</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">名称:@Scope</span><br><span class="line">类型:类注解</span><br><span class="line">位置:类定义的上面</span><br><span class="line">作用:设置该类作为bean的对应的scope属性</span><br></pre></td></tr></table></figure><h4 id="6-2-3-bean的生命周期"><a href="#6-2-3-bean的生命周期" class="headerlink" title="6.2.3 bean的生命周期"></a>6.2.3 bean的生命周期</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">名称:@PostConstruct，@PreDestroy</span><br><span class="line">类型:方法注解</span><br><span class="line">位置:方法定义的上面</span><br><span class="line">作用:设置该类对应的bean对象的两个生命周期的方法</span><br><span class="line">案例:</span><br><span class="line">@PostConstruct</span><br><span class="line">public void init()&#123;</span><br><span class="line">    System.out.println(&quot;初始化&quot;);</span><br><span class="line">&#125;</span><br><span class="line">@PreDestroy</span><br><span class="line">public void destroy()&#123;</span><br><span class="line">    System.out.println(&quot;销毁&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-2-4-依赖注入注解"><a href="#6-2-4-依赖注入注解" class="headerlink" title="6.2.4 依赖注入注解"></a>6.2.4 依赖注入注解</h4><h5 id="6-2-4-1-方式一"><a href="#6-2-4-1-方式一" class="headerlink" title="6.2.4.1 方式一"></a>6.2.4.1 方式一</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">名称:@Autowired，@Qualifier</span><br><span class="line">类型:属性注解</span><br><span class="line">位置:属性上面</span><br><span class="line">作用:设置该属性注入的对象</span><br><span class="line">案例:</span><br><span class="line">@Autowired</span><br><span class="line">@Qualifier(&quot;filmServiceImpl&quot;)</span><br><span class="line">private FilmService filmService;</span><br><span class="line">说明:单独使用@Autowired默认是根据类型(byType)进行装配(注入).也可以配合@Qualifier注解完成byName装配。</span><br></pre></td></tr></table></figure><h5 id="6-2-4-2-方式一的衍生注解"><a href="#6-2-4-2-方式一的衍生注解" class="headerlink" title="6.2.4.2 方式一的衍生注解"></a>6.2.4.2 方式一的衍生注解</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">名称:@Primay</span><br><span class="line">类型:类注解</span><br><span class="line">位置:类上面</span><br><span class="line">作用:设置该类对应的bean在自动装配的时候具有优先级</span><br><span class="line">说明:单独使用@Autowired的时候默认根据byType的方式进行自动装配。当出现多个同类型的bean的时候就会导致系统无法识别并且报错。可以使用@Primay注解指定优先级。但是当多个bean都存在优先级配置的时候那么优先级设置无效。</span><br><span class="line">@Service</span><br><span class="line">@Primary</span><br><span class="line">public class FilmServiceImpl implements FilmService &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="6-2-4-3-方式二"><a href="#6-2-4-3-方式二" class="headerlink" title="6.2.4.3 方式二"></a>6.2.4.3 方式二</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">名称:@Resource</span><br><span class="line">类型:属性注解</span><br><span class="line">位置:属性上面</span><br><span class="line">作用:设置该属性注入的对象</span><br><span class="line">案例:</span><br><span class="line">public class FilmController &#123;</span><br><span class="line">    @Resource</span><br><span class="line">    private FilmService filmService;</span><br><span class="line">&#125;</span><br><span class="line">属性:name：指定注入的bean的id</span><br><span class="line">说明:默认是使用byName的方式自动装配。如果byName无法获取到对应的bean那么就根据byType。如果设置了name属性那么智慧根据byName查找。找不到则出现异常</span><br></pre></td></tr></table></figure><h5 id="6-2-4-4-两者的区别"><a href="#6-2-4-4-两者的区别" class="headerlink" title="6.2.4.4 两者的区别"></a>6.2.4.4 两者的区别</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1.提供方不同</span><br><span class="line">@Autowired是Spring提供的。@Resource是J2EE提供的注解</span><br><span class="line">2.默认的自动装配方式不同</span><br><span class="line">@Autowired默认是byType自动装配。@Resource默认是byName自动装配</span><br><span class="line">3.使用方式不同</span><br><span class="line">@Autowired默认是byType自动装配。可以搭配@Qualifier实现byName</span><br><span class="line">@Resource默认是byName自动装配，名字可以通过name属性进行指定。如果没有name属性那么当注解无法根据byName找到对应的bean的时候就会转换成byType，但是指定了name属性就只能按照byName方式进行装配</span><br></pre></td></tr></table></figure><h4 id="6-2-5-加载第三方资源"><a href="#6-2-5-加载第三方资源" class="headerlink" title="6.2.5 加载第三方资源"></a>6.2.5 加载第三方资源</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">名称:@Bean</span><br><span class="line">类型:方法注解</span><br><span class="line">位置:方法上面</span><br><span class="line">作用:设置该方法的返回值作为Spring管理的bean。由于在spring整合mybatis中配置了大量第三方的bean(DruidDataSource,Configuration,SqlSessionFactoryBean,MapperScannerConfigurer)，由于这些bean来自于第三方，所以无法修改源码，只能手动配置(无法使用@Component，@Repository，@Service，@Controller进行定义bean)。解决方案就是使用@Bean注解。</span><br><span class="line">注意事项:@Bean注解所在的类必须在Spring的扫描范围内并且本身就是Spring管理的bean</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@Component</span><br><span class="line">public class DataSourceConfig &#123;</span><br><span class="line"></span><br><span class="line">    @Bean(name = &quot;myDataSource&quot;)</span><br><span class="line">    public DruidDataSource getDruidDataSource()&#123;</span><br><span class="line">        DruidDataSource druidDataSource = new DruidDataSource();</span><br><span class="line">        return druidDataSource;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-2-6-加载资源文件并且注入"><a href="#6-2-6-加载资源文件并且注入" class="headerlink" title="6.2.6 加载资源文件并且注入"></a>6.2.6 加载资源文件并且注入</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">名称:@PropertySource，@Value</span><br><span class="line">类型:类注解，属性注解</span><br><span class="line">位置:类上面，属性上面</span><br><span class="line">作用：@PropertySource:加载资源文件。@Value：给属性赋值(非引用数据类型)</span><br><span class="line">案例:</span><br><span class="line">@Component</span><br><span class="line">@PropertySource(value = &quot;classpath:mysql.properties&quot;)</span><br><span class="line">public class DataSourceConfig &#123;</span><br><span class="line">    @Value(&quot;$&#123;mysql_driver&#125;&quot;)</span><br><span class="line">    private String driver;</span><br><span class="line">    @Value(&quot;$&#123;mysql_url&#125;&quot;)</span><br><span class="line">    private String url;</span><br><span class="line">    @Value(&quot;$&#123;mysql_username&#125;&quot;)</span><br><span class="line">    private String userName;</span><br><span class="line">    @Value(&quot;$&#123;mysql_password&#125;&quot;)</span><br><span class="line">    private String password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-纯注解驱动开发"><a href="#7-纯注解驱动开发" class="headerlink" title="7.纯注解驱动开发"></a>7.纯注解驱动开发</h2><h3 id="7-1-必须的注解"><a href="#7-1-必须的注解" class="headerlink" title="7.1 必须的注解"></a>7.1 必须的注解</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">名称:@Configuration，@ComponentScan，@Import</span><br><span class="line">类型:类注解</span><br><span class="line">位置:类上面</span><br><span class="line">作用:</span><br><span class="line">@Configuration：设置当前类为Spring的核心类，</span><br><span class="line">@ComponentScan：扫描包</span><br><span class="line">@Import：引入其他配置类</span><br><span class="line">说明：</span><br><span class="line">1.@Configuration取代之前的spring.xml配置文件</span><br><span class="line">2.bean的扫描工作交由@ComponentScan注解完成。取代之前配置文件中的&lt;context:component-scan base-package=&quot;com.lxk&quot;&gt;&lt;/context:component-scan&gt;</span><br><span class="line">3.@Import引入外部配置类。在一个类上只能出现一次，需要引入多个配置类则使用数组完成</span><br></pre></td></tr></table></figure><h3 id="7-2-编写JDBC配置"><a href="#7-2-编写JDBC配置" class="headerlink" title="7.2 编写JDBC配置"></a>7.2 编写JDBC配置</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">@Component</span><br><span class="line">@PropertySource(value = &quot;classpath:mysql.properties&quot;)</span><br><span class="line">public class DataSourceConfig &#123;</span><br><span class="line">    @Value(&quot;$&#123;mysql_driver&#125;&quot;)</span><br><span class="line">    private String driver;</span><br><span class="line">    @Value(&quot;$&#123;mysql_url&#125;&quot;)</span><br><span class="line">    private String url;</span><br><span class="line">    @Value(&quot;$&#123;mysql_username&#125;&quot;)</span><br><span class="line">    private String userName;</span><br><span class="line">    @Value(&quot;$&#123;mysql_password&#125;&quot;)</span><br><span class="line">    private String password;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    public DruidDataSource getDruidDataSource()&#123;</span><br><span class="line">        DruidDataSource druidDataSource = new DruidDataSource();</span><br><span class="line">        druidDataSource.setDriverClassName(driver);</span><br><span class="line">        druidDataSource.setUrl(url);</span><br><span class="line">        druidDataSource.setUsername(userName);</span><br><span class="line">        druidDataSource.setPassword(password);</span><br><span class="line">        return druidDataSource;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-3-编写mybatis配置类"><a href="#7-3-编写mybatis配置类" class="headerlink" title="7.3 编写mybatis配置类"></a>7.3 编写mybatis配置类</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">public class MybatisConfig &#123;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    public Configuration getConfiguration()&#123;</span><br><span class="line">        Configuration configuration = new Configuration();</span><br><span class="line">        configuration.setMapUnderscoreToCamelCase(true);</span><br><span class="line">        configuration.setLogImpl(StdOutImpl.class);</span><br><span class="line">        return configuration;</span><br><span class="line">    &#125;</span><br><span class="line">    @Bean</span><br><span class="line">    public SqlSessionFactoryBean getSqlSessionFactoryBean(@Autowired DataSource dataSource,@Autowired Configuration configuration)&#123;</span><br><span class="line">        SqlSessionFactoryBean sqlSessionFactoryBean = new SqlSessionFactoryBean();</span><br><span class="line">        sqlSessionFactoryBean.setDataSource(dataSource);</span><br><span class="line">        sqlSessionFactoryBean.setConfiguration(configuration);</span><br><span class="line">        sqlSessionFactoryBean.setTypeAliasesPackage(&quot;com.lxk.pojo&quot;);</span><br><span class="line">        return sqlSessionFactoryBean;</span><br><span class="line">    &#125;</span><br><span class="line">    @Bean</span><br><span class="line">    public MapperScannerConfigurer getMapperScannerConfigurer()&#123;</span><br><span class="line">        MapperScannerConfigurer mapperScannerConfigurer = new MapperScannerConfigurer();</span><br><span class="line">        mapperScannerConfigurer.setBasePackage(&quot;com.lxk.mapper&quot;);</span><br><span class="line">        return mapperScannerConfigurer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-4-编写spring配置类"><a href="#7-4-编写spring配置类" class="headerlink" title="7.4 编写spring配置类"></a>7.4 编写spring配置类</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">@ComponentScan(&quot;com.lxk&quot;)</span><br><span class="line">@Import(&#123;DataSourceConfig.class,MybatisConfig.class&#125;)</span><br><span class="line">public class SpringConfig &#123; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-5-完成各层代码编写以及测试"><a href="#7-5-完成各层代码编写以及测试" class="headerlink" title="7.5 完成各层代码编写以及测试"></a>7.5 完成各层代码编写以及测试</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">AnnotationConfigApplicationContext applicationContext = new AnnotationConfigApplicationContext(SpringConfig.class);</span><br><span class="line">        FilmController filmController = applicationContext.getBean(&quot;filmController&quot;, FilmController.class);</span><br><span class="line">        List&lt;Film&gt; list = filmController.findAll();</span><br><span class="line">        for (Film film : list) &#123;</span><br><span class="line">            System.out.println(film);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h2 id="8-AOP"><a href="#8-AOP" class="headerlink" title="8.AOP"></a>8.AOP</h2><h3 id="8-1-AOP简介"><a href="#8-1-AOP简介" class="headerlink" title="8.1 AOP简介"></a>8.1 AOP简介</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">AOP：面向切面编程。它是一种编程范式。用于指导开发者如何组织程序结构。</span><br><span class="line">在Java程序中就是为了弥补OOP的不足。是基于OOP的基础上进行横向的开发。</span><br><span class="line">OOP的程序开发都是以类为主体模型，一切都是围绕着对象进行。</span><br><span class="line">AOP程序只要关注的是OOP开发中的一些共性功能，一切都是围绕着共性功能进行开发。</span><br></pre></td></tr></table></figure><h3 id="8-2-AOP的作用"><a href="#8-2-AOP的作用" class="headerlink" title="8.2 AOP的作用"></a>8.2 AOP的作用</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">AOP的中心思想就是从各个行业入手进行标准化，规划范。一步一步把所有功能进行逐一开发，最终程序会以组合的方式完成具体业务模块甚至整个程序的开发</span><br><span class="line">愿景:将程序开发制作从手动走向半自动化/全自动开发。实现&quot;插拔式组件体系&quot;</span><br></pre></td></tr></table></figure><h3 id="8-3-AOP优点"><a href="#8-3-AOP优点" class="headerlink" title="8.3 AOP优点"></a>8.3 AOP优点</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.提高代码的复用性</span><br><span class="line">2.业务代码更加简洁</span><br><span class="line">3.业务代码的维护更加方便</span><br></pre></td></tr></table></figure><h3 id="8-4-AOP的入门"><a href="#8-4-AOP的入门" class="headerlink" title="8.4 AOP的入门"></a>8.4 AOP的入门</h3><h4 id="8-4-1-AOP的相关概念"><a href="#8-4-1-AOP的相关概念" class="headerlink" title="8.4.1 AOP的相关概念"></a>8.4.1 AOP的相关概念</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">JoinPoint:连接点:所有的方法</span><br><span class="line">PointCut:切入点:需要挖掉共性代码的方法</span><br><span class="line">Advice:通知:就是挖掉的共性代码。最终以方法的形式存在</span><br><span class="line">Aspect:切面:共性代码(通知)和所挖位置(切入点)的对应关系</span><br><span class="line">Target:目标对象:就是挖掉共性代码之后的类产生的对象。(这种对象是无法完成工作的)</span><br><span class="line">Weaving:织入:将挖掉的共性代码回填的动态过程</span><br><span class="line">Proxy:代理:目标对象无法完成工作，需要进行代码回填。回填后通过代理模式产生的代理对象来进行最终的工作</span><br></pre></td></tr></table></figure><h4 id="8-4-2-AOP入门程序的开发思路"><a href="#8-4-2-AOP入门程序的开发思路" class="headerlink" title="8.4.2 AOP入门程序的开发思路"></a>8.4.2 AOP入门程序的开发思路</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">开发阶段:</span><br><span class="line">1.正常的功能开发</span><br><span class="line">2.挖出共性代码完成通知</span><br><span class="line">3.在配置文件中声明切入点</span><br><span class="line">4.在配置文件中声明切面</span><br><span class="line">运行阶段:</span><br><span class="line">Spring容器加载配置后会监控所有的切入点方法的运行，当容器监控到方法(目标对象中的切入点)被运行，会根据通知类型在代理对象中的对应位置将通知织入，最终执行的是代理对象织入后的方法。</span><br></pre></td></tr></table></figure><h3 id="8-4-3-入门程序编写"><a href="#8-4-3-入门程序编写" class="headerlink" title="8.4.3 入门程序编写"></a>8.4.3 入门程序编写</h3><h4 id="8-4-3-1-创建项目导入依赖"><a href="#8-4-3-1-创建项目导入依赖" class="headerlink" title="8.4.3.1 创建项目导入依赖"></a>8.4.3.1 创建项目导入依赖</h4><h4 id="8-4-3-2-正常的功能开发"><a href="#8-4-3-2-正常的功能开发" class="headerlink" title="8.4.3.2 正常的功能开发"></a>8.4.3.2 正常的功能开发</h4><h4 id="8-4-3-3-挖出共性代码变为通知"><a href="#8-4-3-3-挖出共性代码变为通知" class="headerlink" title="8.4.3.3 挖出共性代码变为通知"></a>8.4.3.3 挖出共性代码变为通知</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public class TxAdvice &#123;</span><br><span class="line"></span><br><span class="line">    public void openTx()&#123;</span><br><span class="line">        System.out.println(&quot;开启事务&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    public void commitTx()&#123;</span><br><span class="line">        System.out.println(&quot;提交事务&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="8-4-3-4-配置AOP"><a href="#8-4-3-4-配置AOP" class="headerlink" title="8.4.3.4 配置AOP"></a>8.4.3.4 配置AOP</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--1.将通知和目标对象加载到容器中--&gt;</span><br><span class="line">&lt;!--由于使用了IOC的注解开发，所以无需单独配置通知和目标对象的bean--&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--2.AOP配置--&gt;</span><br><span class="line">&lt;aop:config&gt;</span><br><span class="line">    &lt;!--配日志切入点--&gt;</span><br><span class="line">    &lt;aop:pointcut id=&quot;pt&quot; expression=&quot;execution(* *..*(..))&quot;/&gt;</span><br><span class="line">    &lt;!--配置切面--&gt;</span><br><span class="line">    &lt;aop:aspect ref=&quot;txAdvice&quot;&gt;</span><br><span class="line">        &lt;!--通知类型--&gt;</span><br><span class="line">        &lt;aop:before method=&quot;openTx&quot; pointcut-ref=&quot;pt&quot;/&gt;</span><br><span class="line">        &lt;aop:after method=&quot;commitTx&quot; pointcut-ref=&quot;pt&quot;/&gt;</span><br><span class="line">    &lt;/aop:aspect&gt;</span><br><span class="line">&lt;/aop:config&gt;</span><br></pre></td></tr></table></figure><h4 id="8-4-3-5-编写测试类"><a href="#8-4-3-5-编写测试类" class="headerlink" title="8.4.3.5 编写测试类"></a>8.4.3.5 编写测试类</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void method01()&#123;</span><br><span class="line">    ClassPathXmlApplicationContext applicationContext = new ClassPathXmlApplicationContext(&quot;spring.xml&quot;);</span><br><span class="line">    StudentController studentController = applicationContext.getBean(&quot;studentController&quot;, StudentController.class);</span><br><span class="line">    studentController.add();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-4-4-配置详解"><a href="#8-4-4-配置详解" class="headerlink" title="8.4.4 配置详解"></a>8.4.4 配置详解</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">1.AOP配置</span><br><span class="line">标签名称:aop:config</span><br><span class="line">作用:表示配置AOP</span><br><span class="line">说明:在Spring配置文件中可以出现多个aop配置</span><br><span class="line"></span><br><span class="line">2.切入点配置</span><br><span class="line">标签名称:aop:pointcut</span><br><span class="line">作用:配置切入点</span><br><span class="line">属性:expression:切入点表达式。用于定位到切入点(可以使用各种通配符一次性定义多个切入点方法)</span><br><span class="line">说明:在aop:config中可以配置多个aop:pointcut</span><br><span class="line"></span><br><span class="line">3.切面配置</span><br><span class="line">标签名称:aop:aspect</span><br><span class="line">作用:配置通知和切入点之间的对应法关系</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">4.通知类型</span><br><span class="line">AOP中一共有5种通知类型</span><br><span class="line">前置通知:aop:before</span><br><span class="line">简介：在原始方法(目标对象中的方法)执行之前执行aop:before指向的通知方法，如果通知方法执行期间出现了异常那么会阻止原始方法的执行。</span><br><span class="line">应用场景:数据校验</span><br><span class="line"></span><br><span class="line">后置通知:aop:after</span><br><span class="line">简介：在原始方法(目标对象中的方法)执行之后执行aop:after指向的通知方法。无论原始方法是否出现异常都不会影响aop:after指向的通知方法的执行</span><br><span class="line">应用场景:现场处理</span><br><span class="line"></span><br><span class="line">返回后通知:aop:after-returning</span><br><span class="line">简介:原始方法执行完毕后并且返回结果后执行，如果原始方法出现异常那么则无法执行此通知指向的方法。</span><br><span class="line">应用场景:返回值的相关数据处理</span><br><span class="line"></span><br><span class="line">抛出异常后通知:aop:after-throwing</span><br><span class="line">简介:原始方法执行过程中出现异常则执行此通知指向的方法，原始方法没有异常则无法执行</span><br><span class="line">应用场景:异常的后续处理</span><br><span class="line"></span><br><span class="line">环绕通知:aop:around</span><br><span class="line">简述:在原始方法执行前后都执行</span><br><span class="line">注意:环绕通知是在原始方法的前后添加共性代码，因为在环绕通知重要存在对原始方法的显示调用。环绕通知的方法的返回值必须是Object类型，否则就会造成无法拦截原始方法的返回，如果原始方法的返回值为void，那么环绕通知的指向的方法的返回值也可以为void。</span><br><span class="line">在环绕通知中可以使用proceed()方法来调用原始方法，由于无法预知原始方法在运行在是否会出现异常，所以环绕通知指向的方法必须强制排除异常。</span><br><span class="line"></span><br><span class="line">5.切入点表达式</span><br><span class="line">切入点配置最终要描述的事具体的方法。切入点表达式就是快速匹配方法描述的通配格式。</span><br><span class="line">语法：关键字(访问修饰符 返回值类型 包名.类名.方法名(参数) 异常名)</span><br><span class="line">通配符:</span><br><span class="line">*:单个独立的任意字符，可以单独使用，也可以作为前缀或者后缀</span><br><span class="line">..:多个连续的任意字符，一般用于简化包名和参数的编写</span><br><span class="line"></span><br><span class="line">案例:</span><br><span class="line">execution(public void *..*.*(..)):匹配项目中所有的public修饰的返回值为void的方法</span><br><span class="line">execution(public void com.lxk.service.*.*(..)):匹配指定包下所有的类中的public修饰的返回值为void的方法</span><br><span class="line">execution(public void com.lxk.service.Student*.delete*(int))：匹配指定包下以Student开头的类中以delete开头的方法并且修饰符为public，返回值为void，参数为int类型的方法</span><br></pre></td></tr></table></figure><h3 id="8-5-AOP注解"><a href="#8-5-AOP注解" class="headerlink" title="8.5 AOP注解"></a>8.5 AOP注解</h3><h4 id="8-5-1-开启AOP注解支持"><a href="#8-5-1-开启AOP注解支持" class="headerlink" title="8.5.1 开启AOP注解支持"></a>8.5.1 开启AOP注解支持</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;aop:aspectj-autoproxy&gt;&lt;/aop:aspectj-autoproxy&gt;</span><br></pre></td></tr></table></figure><h4 id="8-5-2-编写通知的代码"><a href="#8-5-2-编写通知的代码" class="headerlink" title="8.5.2 编写通知的代码"></a>8.5.2 编写通知的代码</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">@Component</span><br><span class="line">@Aspect</span><br><span class="line">public class TxAdvice &#123;</span><br><span class="line"></span><br><span class="line">    @Pointcut(&quot;execution(public * *..*ServiceImpl.delete*(..))&quot;)</span><br><span class="line">    public void pt()&#123;&#125;</span><br><span class="line"></span><br><span class="line">    @Before(value = &quot;pt()&quot;)</span><br><span class="line">    public void openTx()&#123;</span><br><span class="line">        System.out.println(&quot;开启事务&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    @After(value = &quot;pt()&quot;)</span><br><span class="line">    public void commitTx()&#123;</span><br><span class="line">        System.out.println(&quot;提交事务&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    @AfterThrowing(value = &quot;pt()&quot;,throwing = &quot;ta&quot;)</span><br><span class="line">    public void afterThrowing(Throwable ta)&#123;</span><br><span class="line">        System.out.println(&quot;异常通知&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    @AfterReturning(value = &quot;pt()&quot;)</span><br><span class="line">    public void afterReturning()&#123;</span><br><span class="line">        System.out.println(&quot;返回后通知&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    @Around(&quot;pt()&quot;)</span><br><span class="line">    public Object around(ProceedingJoinPoint pjp)throws Throwable&#123;</span><br><span class="line">        System.out.println(&quot;环绕前&quot;);</span><br><span class="line">        Object proceed = pjp.proceed();</span><br><span class="line">        System.out.println(&quot;环绕后&quot;);</span><br><span class="line">        return proceed;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-6-纯注解驱动开发"><a href="#8-6-纯注解驱动开发" class="headerlink" title="8.6 纯注解驱动开发"></a>8.6 纯注解驱动开发</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@EnableAspectJAutoProxy：表示开启AOP注解开发的支持</span><br></pre></td></tr></table></figure><h3 id="8-7-通知类型的执行顺序"><a href="#8-7-通知类型的执行顺序" class="headerlink" title="8.7 通知类型的执行顺序"></a>8.7 通知类型的执行顺序</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">不出现异常:</span><br><span class="line">Around start</span><br><span class="line">Before</span><br><span class="line">原始方法</span><br><span class="line">After Returning</span><br><span class="line">After</span><br><span class="line">Around end</span><br><span class="line"></span><br><span class="line">出现异常:</span><br><span class="line">Around start</span><br><span class="line">Before</span><br><span class="line">原始方法</span><br><span class="line">After Throwing</span><br><span class="line">After</span><br></pre></td></tr></table></figure><h2 id="9-Spring事务"><a href="#9-Spring事务" class="headerlink" title="9.Spring事务"></a>9.Spring事务</h2><h3 id="9-1-Spring提供的解决方案"><a href="#9-1-Spring提供的解决方案" class="headerlink" title="9.1 Spring提供的解决方案"></a>9.1 Spring提供的解决方案</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">PlatformTransactionManager:获取事务，提交事务，回滚事务</span><br><span class="line">TransactionDefinition：定义事务的基本信息。包括获取事务定义的时间，获取事务的名称，获取事务的读写属性，获取事务超时时间，获取事务的隔离级别，获取事务的传播特性</span><br><span class="line">TransactionStatus：定义了事务在执行过程中某个时间节点上事务的状态信息</span><br><span class="line"></span><br><span class="line">上述三个接口是Spring提供的标准方案但是本身没有提供实现。一般企业中都是使用Spring JDBC实现的方案(DataSourceTransactionManager)。</span><br></pre></td></tr></table></figure><h3 id="9-2-事务具体实现"><a href="#9-2-事务具体实现" class="headerlink" title="9.2 事务具体实现"></a>9.2 事务具体实现</h3><h4 id="9-2-1-编程式事务"><a href="#9-2-1-编程式事务" class="headerlink" title="9.2.1 编程式事务"></a>9.2.1 编程式事务</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">public String addStudentAndScores(StudentVO studentVO) &#123;</span><br><span class="line">        Student student = studentVO.getStudent();</span><br><span class="line">        //创建事务管理器</span><br><span class="line">        DataSourceTransactionManager dstm = new DataSourceTransactionManager();</span><br><span class="line">        //为事务管理器设置和持久化层相同的数据源</span><br><span class="line">        dstm.setDataSource(dataSource);</span><br><span class="line">        //创建事务的定义对象</span><br><span class="line">        DefaultTransactionDefinition dtd = new DefaultTransactionDefinition();</span><br><span class="line">        //开启事务</span><br><span class="line">        TransactionStatus ts = dstm.getTransaction(dtd);</span><br><span class="line">        studentMapper.insert(student);</span><br><span class="line">        try &#123;</span><br><span class="line">            Integer studentId = student.getStudentId();</span><br><span class="line">            int i=5/0;</span><br><span class="line">            List&lt;Score&gt; scoreList = studentVO.getScoreList();</span><br><span class="line">            for (Score score : scoreList) &#123;</span><br><span class="line">                score.setStudentId(studentId);</span><br><span class="line">                scoreMapper.insert(score);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            dstm.rollback(ts);</span><br><span class="line">        &#125;</span><br><span class="line">        //提交事务</span><br><span class="line">        dstm.commit(ts);</span><br><span class="line">        return &quot;success&quot;;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>由于上述关于事务的代码出现了横向冗余问题，可以使用AOP解决</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">@Component</span><br><span class="line">@Aspect</span><br><span class="line">public class TxAdvice &#123;</span><br><span class="line">    @Resource</span><br><span class="line">    private DruidDataSource dataSource;</span><br><span class="line"></span><br><span class="line">    @Pointcut(&quot;execution(* com.lxk.service.impl.*.add*(..))&quot;)</span><br><span class="line">    public void pt()&#123;&#125;</span><br><span class="line"></span><br><span class="line">    @Around(&quot;pt()&quot;)</span><br><span class="line">    public Object tx(ProceedingJoinPoint pjp) throws Throwable&#123;</span><br><span class="line">        //创建事务管理器</span><br><span class="line">        DataSourceTransactionManager dstm = new DataSourceTransactionManager();</span><br><span class="line">        //为事务管理器设置和持久化层相同的数据源</span><br><span class="line">        dstm.setDataSource(dataSource);</span><br><span class="line">        //创建事务的定义对象</span><br><span class="line">        DefaultTransactionDefinition dtd = new DefaultTransactionDefinition();</span><br><span class="line">        //开启事务</span><br><span class="line">        TransactionStatus ts = dstm.getTransaction(dtd);</span><br><span class="line">        Object proceed = null;</span><br><span class="line">        try &#123;</span><br><span class="line">            proceed = pjp.proceed();</span><br><span class="line">        &#125; catch (Throwable e) &#123;</span><br><span class="line">            dstm.rollback(ts);</span><br><span class="line">        &#125;</span><br><span class="line">        dstm.commit(ts);</span><br><span class="line">        return proceed;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public String addStudentAndScores(StudentVO studentVO) &#123;</span><br><span class="line">        Student student = studentVO.getStudent();</span><br><span class="line">        studentMapper.insert(student);</span><br><span class="line">        Integer studentId = student.getStudentId();</span><br><span class="line">        int i=5/0;</span><br><span class="line">        List&lt;Score&gt; scoreList = studentVO.getScoreList();</span><br><span class="line">        for (Score score : scoreList) &#123;</span><br><span class="line">            score.setStudentId(studentId);</span><br><span class="line">            scoreMapper.insert(score);</span><br><span class="line">        &#125;</span><br><span class="line">        return &quot;success&quot;;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="9-2-2-声明式事务"><a href="#9-2-2-声明式事务" class="headerlink" title="9.2.2 声明式事务"></a>9.2.2 声明式事务</h4><h5 id="9-2-2-1-XML配置"><a href="#9-2-2-1-XML配置" class="headerlink" title="9.2.2.1 XML配置"></a>9.2.2.1 XML配置</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=&quot;transactionManager&quot; class=&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;&gt;</span><br><span class="line">    &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;/&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line">&lt;tx:advice id=&quot;txAdvice&quot; transaction-manager=&quot;transactionManager&quot;&gt;</span><br><span class="line">    &lt;tx:attributes&gt;</span><br><span class="line">        &lt;tx:method name=&quot;find*&quot; read-only=&quot;true&quot;/&gt;</span><br><span class="line">        &lt;tx:method name=&quot;add*&quot; propagation=&quot;REQUIRED&quot;/&gt;</span><br><span class="line">        &lt;tx:method name=&quot;update*&quot; propagation=&quot;REQUIRED&quot;/&gt;</span><br><span class="line">        &lt;tx:method name=&quot;delete*&quot; propagation=&quot;REQUIRED&quot;/&gt;</span><br><span class="line">    &lt;/tx:attributes&gt;</span><br><span class="line">&lt;/tx:advice&gt;</span><br><span class="line">&lt;aop:config&gt;</span><br><span class="line">    &lt;aop:pointcut id=&quot;pt&quot; expression=&quot;execution(* com.lxk.service.impl.*.*(..))&quot;/&gt;</span><br><span class="line">    &lt;aop:advisor advice-ref=&quot;txAdvice&quot; pointcut-ref=&quot;pt&quot;/&gt;</span><br><span class="line">&lt;/aop:config&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">事务传播行为:</span><br><span class="line">REQUIRED：默认的事务传播行为。方法本身没有事务则新建一个事务，如果方法本身存在事务就使用本身的事务。</span><br><span class="line">REQUIRES_NEW：本身没有则新建事务。本身有也不准使用事务。依然新建。</span><br><span class="line">NESTED：没有新建。有还是新建进行嵌套。</span><br><span class="line">SUPPORTS：有就用，没有就不用(非事务的方式运行)。</span><br><span class="line">NOT_SUPPORTED:没有就不用(非事务的方式运行)，有也不用。</span><br><span class="line">NEVER：没有就不用(非事务的方式运行)，如果有抛出异常。</span><br><span class="line">MANDATORY：如果有就使用。没有抛出异常。</span><br></pre></td></tr></table></figure><h5 id="9-2-2-2-注解事务"><a href="#9-2-2-2-注解事务" class="headerlink" title="9.2.2.2 注解事务"></a>9.2.2.2 注解事务</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">开启事务注解</span><br><span class="line">&lt;tx:annotation-driven&gt;&lt;/tx:annotation-driven&gt;</span><br><span class="line"></span><br><span class="line">@Transactional:使用注解控制事务。可以定义在方法上也可以定义在类上</span><br></pre></td></tr></table></figure><h4 id="9-2-3-纯注解驱动"><a href="#9-2-3-纯注解驱动" class="headerlink" title="9.2.3 纯注解驱动"></a>9.2.3 纯注解驱动</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">1.编写配置类</span><br><span class="line">@EnableTransactionManagement 等价于&lt;tx:annotation-driven&gt;&lt;/tx:annotation-driven&gt;</span><br><span class="line">2.编写配置类</span><br><span class="line">@Component</span><br><span class="line">public class TransactionConfig &#123;</span><br><span class="line">    @Bean</span><br><span class="line">    public PlatformTransactionManager getPlatformTransactionManager(@Autowired DataSource dataSource)&#123;</span><br><span class="line">        return new DataSourceTransactionManager(dataSource);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">3.方法上使用注解</span><br><span class="line">@Transactional</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Spring&quot;&gt;&lt;a href=&quot;#Spring&quot; class=&quot;headerlink&quot; title=&quot;Spring&quot;&gt;&lt;/a&gt;Spring&lt;/h1&gt;&lt;h2 id=&quot;1-目前开发存在的问题&quot;&gt;&lt;a href=&quot;#1-目前开发存在的问题&quot; class=&quot;header</summary>
      
    
    
    
    
    <category term="Java" scheme="http://sion-io.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript</title>
    <link href="http://sion-io.github.io/2024/05/11/JavaScript/"/>
    <id>http://sion-io.github.io/2024/05/11/JavaScript/</id>
    <published>2024-05-11T06:56:01.000Z</published>
    <updated>2024-05-11T15:35:37.979Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h1><h2 id="1-JavaScript简介"><a href="#1-JavaScript简介" class="headerlink" title="1.JavaScript简介"></a>1.JavaScript简介</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JavaScript（简称“JS”）是一种具有函数优先的轻量级，解释型或即时编译型的编程语言。作为开发Web页面的脚本语言，浏览器直接解释执行。</span><br></pre></td></tr></table></figure><h2 id="2-编写位置"><a href="#2-编写位置" class="headerlink" title="2.编写位置"></a>2.编写位置</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">目前学习的js只是用于客户端。只需要客户的浏览器就可以直接运行。所以当下的js代码全部写在网页中。</span><br><span class="line">js代码需要编写在页面中的&lt;script&gt;标签中。此标签一般放在head中。</span><br><span class="line"></span><br><span class="line">script标签存在两个属性，type:默认值就是text/javascript。目前需要的也是此值可以不写。  src:当需要引入一个外部js的时候指向js文件地址</span><br><span class="line"></span><br><span class="line">案例：</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">    console.log(&quot;Hello world&quot;);</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br></pre></td></tr></table></figure><h2 id="3-JS语言小知识点"><a href="#3-JS语言小知识点" class="headerlink" title="3.JS语言小知识点"></a>3.JS语言小知识点</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">1.JS严格区分大小写。</span><br><span class="line">2.注释分为两种； //单行注释   /*多行注释*/</span><br><span class="line">3.标识符：就是指变量，函数，属性的名字。</span><br><span class="line">规则:字母，数字，下划线，$组成。首字母不能为数字。 ECMAScript规定了标识符使用驼峰命名法。不能使用关键字和保留字</span><br><span class="line">4.变量:</span><br><span class="line">变量的声明: var a; //声明一个变量</span><br><span class="line">声明并且赋值:var a = 18;</span><br><span class="line">5.数据类型</span><br><span class="line">数据类型分类:</span><br><span class="line">字符串类型(String)</span><br><span class="line">数值型(Number)</span><br><span class="line">布尔值(Boolean)</span><br><span class="line">null型(Null)</span><br><span class="line">undefined型(Undefined)</span><br><span class="line">Object型</span><br><span class="line">6.typeof运算符</span><br><span class="line">作用:检测一个变量的数据类型</span><br><span class="line">案例:typeof(变量)</span><br><span class="line">7.String</span><br><span class="line">特点:单引号和双引号括起来的都是字符串</span><br><span class="line">转义字符: &quot;\n&quot;:换行 &quot;\t&quot;:制表符 &quot;\b&quot;:空格 &quot;\r&quot;:回车  &quot;\\&quot;:斜杠  &quot;\&#x27;&quot;：单引号 &quot;\&quot;&quot;：双引号</span><br><span class="line">类型转换:其他类型转换为字符串的方式</span><br><span class="line">toString(),String(),拼接字符串</span><br><span class="line">8.Number</span><br><span class="line">特点：用于表示整数和浮点数。</span><br><span class="line">NaN：(Not a Number)：对数值进行计算时没有结果返回则返回NaN</span><br><span class="line">类型转换：其他类型转换为Number的方式</span><br><span class="line">Number():任意数据类型转Number, parseInt(),parseFloat():这两个只能转字符串</span><br><span class="line">9.Boolean</span><br><span class="line">特点:只有true和false两个值。</span><br><span class="line">类型转型:Boolean()</span><br><span class="line">String:任何非空字符串=true   空字符串(&quot;&quot;)=false</span><br><span class="line">    Number:任何非0数值=true    0和NaN=false</span><br><span class="line">    Object: 任何对象=true     null=false</span><br><span class="line">    Undefined： n/a=true     undefined=false</span><br><span class="line">10.Undefined</span><br><span class="line">特点:Undefined类型只有一个值就是undefined。表示var声明了变量但是未对齐进行初始化</span><br><span class="line">和typeof联动：定义了未赋值是undefined，未定义的也是undefined</span><br><span class="line">11.Null</span><br><span class="line">特点:Null类型只有一个值就是null。null表示的是一个空对象，所以使用typeof检测得到的是Object</span><br><span class="line">特点:undefined和null比较是否相当返回true</span><br></pre></td></tr></table></figure><h2 id="4-运算符"><a href="#4-运算符" class="headerlink" title="4.运算符"></a>4.运算符</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">1.算数运算符</span><br><span class="line">+ - * / % ++ -- :以上运算符使用和Java没区别</span><br><span class="line">2.逻辑运算符</span><br><span class="line">&amp;&amp; || ！ :以上运算符使用和Java没区别</span><br><span class="line">3.赋值运算符</span><br><span class="line">= += -= *= /= %= :以上运算符使用和Java没区别</span><br><span class="line">4.关系运算符</span><br><span class="line">&gt; &lt; &gt;= &lt;= :以上运算符使用和Java没区别</span><br><span class="line">5.相等运算符</span><br><span class="line">JS中使用==判断两个值是否相等。使用!=判断两个值是否不等</span><br><span class="line">案例: </span><br><span class="line">undefined==null：true</span><br><span class="line">&quot;NaN&quot; == NaN:false</span><br><span class="line">NaN == NaN : false</span><br><span class="line">NaN != NaN : true</span><br><span class="line">false == 0 :true</span><br><span class="line">true == 1 :true</span><br><span class="line">true == 2 :false</span><br><span class="line">undefined == 0 false </span><br><span class="line">null == 0 false</span><br><span class="line">&quot;123&quot; == 123 :true</span><br><span class="line">6.全等运算符</span><br><span class="line">也是比较两个值书否相等，和==的区别是:==进行比较的时候会对数据进行自动的类型转换。而===不会。!==：不全等</span><br><span class="line">案例： &quot;123&quot; == 123 :true  &quot;123&quot; === 123 :false</span><br><span class="line"></span><br><span class="line">7.三目运算符</span><br><span class="line">?:  :以上运算符使用和Java没区别</span><br></pre></td></tr></table></figure><h2 id="5-代码块"><a href="#5-代码块" class="headerlink" title="5.代码块"></a>5.代码块</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">代码块就是大括号中所编写的js语句。</span><br><span class="line">案例:</span><br><span class="line">&#123;</span><br><span class="line">var i = 123;</span><br><span class="line">    i++;</span><br><span class="line">    alert(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-条件语句"><a href="#6-条件语句" class="headerlink" title="6.条件语句"></a>6.条件语句</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">1. if else</span><br><span class="line">案例:</span><br><span class="line">if(判断条件)&#123;&#125;</span><br><span class="line">if(判断条件)&#123;&#125;else&#123;&#125;</span><br><span class="line">if(判断条件)&#123;&#125;else if()&#123;&#125;else&#123;&#125;</span><br><span class="line">2.switch case</span><br><span class="line">案例：</span><br><span class="line">switch(语句)&#123;</span><br><span class="line">            case 表达式 : </span><br><span class="line">            语句;</span><br><span class="line">            break;</span><br><span class="line">            case 表达式 : </span><br><span class="line">                语句;</span><br><span class="line">                break;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-循环语句"><a href="#7-循环语句" class="headerlink" title="7.循环语句"></a>7.循环语句</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">1.while</span><br><span class="line">案例:</span><br><span class="line">while(条件表达式)&#123;语句&#125;</span><br><span class="line">2.do while</span><br><span class="line">案例:</span><br><span class="line">do&#123;&#125;while(条件表达式)</span><br><span class="line">3.for</span><br><span class="line">案例:</span><br><span class="line">for(初始化表达式;条件表达式；更新表达式)&#123;语句&#125;</span><br><span class="line">4.break和continue</span><br><span class="line">使用方式和Java没有区别</span><br></pre></td></tr></table></figure><h2 id="8-Object对象"><a href="#8-Object对象" class="headerlink" title="8.Object对象"></a>8.Object对象</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Object类型也就是所谓的对象。是JS中引用数据类型。</span><br><span class="line">本质上来说就是一种复合值。讲多个值聚合在一起，通过名字访问这些值。可以把对象看成一种属性的无序集合，每个属性都是由KV组成。</span><br><span class="line"></span><br><span class="line">1.对象的创建方式</span><br><span class="line">1)第一种</span><br><span class="line">var person = new Object();</span><br><span class="line">person.name=-&quot;张福林&quot;;</span><br><span class="line">person.age=18;</span><br><span class="line">2)第二种</span><br><span class="line">var person = &#123;</span><br><span class="line">        name:&quot;张福林&quot;,</span><br><span class="line">        age:18</span><br><span class="line">&#125;</span><br><span class="line">2.访问对象属性</span><br><span class="line">1)第一种:对象.属性名  (person.name)</span><br><span class="line">2)第二种: 对象[&#x27;属性名&#x27;]   (person[&#x27;name&#x27;])</span><br></pre></td></tr></table></figure><h2 id="9-数组"><a href="#9-数组" class="headerlink" title="9.数组"></a>9.数组</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">定义:数组也是对象的一种。是一组有序的数据的集合。</span><br><span class="line">创建数组:</span><br><span class="line"> var array = [1,2,3];</span><br><span class="line"> var arr = new Array(1,2,3)</span><br><span class="line">操作数组:数组中的每一个数据称之为元素，可以通过索引进行快速读取。索引也是从0开始计算 </span><br></pre></td></tr></table></figure><h2 id="10-函数"><a href="#10-函数" class="headerlink" title="10.函数"></a>10.函数</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">定义:函数是由一连串代码自称集合，完成特定的功能。用于被外部调用、调用时也有参数和返回值。</span><br><span class="line">创建函数:</span><br><span class="line">1)第一种</span><br><span class="line">创建:var sum = function(a,b)&#123;return a+b&#125;;</span><br><span class="line">上述创建函数的方式把整个函数赋值给了一个变量。</span><br><span class="line">调用:var result  = sum(1,5);</span><br><span class="line">2)第二种</span><br><span class="line">创建:function 函数名(参数...)&#123;&#125;</span><br><span class="line">function sum(a,b)&#123;return a+b&#125;</span><br><span class="line">调用:var result  = sum(1,5);</span><br><span class="line">函数内部特殊对象:</span><br><span class="line">this：全局对象(window对象)</span><br></pre></td></tr></table></figure><h2 id="11-DOM操作"><a href="#11-DOM操作" class="headerlink" title="11.DOM操作"></a>11.DOM操作</h2><h3 id="11-1-简介"><a href="#11-1-简介" class="headerlink" title="11.1 简介"></a>11.1 简介</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">DOM：document object model，文档对象模型</span><br><span class="line">文档:表示的就是整个HTML网页文档</span><br><span class="line">对象:表示将网页中的每一个部分都转换成一个对象</span><br><span class="line">模型:使用模型表示对象之间的关系</span><br></pre></td></tr></table></figure><h3 id="11-2-节点"><a href="#11-2-节点" class="headerlink" title="11.2 节点"></a>11.2 节点</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">节点(Node)：是网页构成的基本组成部分。网页中的每一部分都可以称之为节点</span><br><span class="line">例如:html标签,其他标签,属性,文本，注释,整个网页也是一个节点</span><br><span class="line">节点分类:</span><br><span class="line">标签:元素节点(HTML文档中的标签)</span><br><span class="line">属性:属性节点(元素的属性)</span><br><span class="line">文本:文本节点(HTML标签中的文本描述)</span><br><span class="line">文档:文档节点(这个HTML文档)</span><br><span class="line"></span><br><span class="line">文档节点(document):</span><br><span class="line">document就是文档节点。代表整个HTML文档。网页中的所有节点都是其子节点。document对象作为window对象的属性存在，不能获取可以直接使用。</span><br><span class="line">主要作用就是通过文档节点获取和创建其他节点对象</span><br><span class="line"></span><br><span class="line">元素节点(Element):</span><br><span class="line">Element就是各个标签对应的元素节点。也是常用的节点。</span><br><span class="line">获取元素节点:document.getElementById(); ---&gt;根据标签的ID属性获取对应的元素节点对象</span><br><span class="line"></span><br><span class="line">文本节点(Text):</span><br><span class="line">Text表示所有非HTML的文本,文本节点一般作为元素节点的子节点存在。哪也造成了想获取文本节点对象需要先获取元素节点对象，</span><br><span class="line">案例:document.getElementById(&quot;sp1&quot;).firstChild;</span><br><span class="line"></span><br><span class="line">属性节点(Attr)：</span><br><span class="line">Attr:就是标签中的每一个属性，和文本节点的差异是 Attr不属于元素节点的子节点。而是属于元素节点的一部分。</span><br><span class="line">案例:document.getElementById(&quot;sp1&quot;).getAttributeNode(&quot;id&quot;)</span><br><span class="line">注意:一般使用不到。</span><br><span class="line"></span><br><span class="line">获取元素节点:</span><br><span class="line">1.getElementById() :通过id属性获取一个元素节点的对象</span><br><span class="line">2.getElementsByTagName() :通过标签名获取一组元素节点的对象</span><br><span class="line">3.getElementsByName() :通过name属性值获取一组元素节点的对象</span><br><span class="line">获取元素节点的子节点:</span><br><span class="line">1.childNodes属性：当前节点的所有子节点</span><br><span class="line">2.firstChild属性：当前节点的第一个子节点</span><br><span class="line">3lastChild属性：当前节点的最后一个子节点</span><br><span class="line">4.getElementsByTagName(&quot;span&quot;) ：当前节点的指定标签名的后代节点</span><br><span class="line">5.children属性:当前节点的所有子元素节点</span><br><span class="line">获取父节点和兄弟节点:</span><br><span class="line">1.parentNode属性:获取当前节点的父节点</span><br><span class="line">2.previousSibling属性:获取当前节点的上一个兄弟节点</span><br><span class="line">3.nextSibling属性:获取当前节点的下一个兄弟节点</span><br><span class="line">4.previousElementSibling属性:获取当前节点的上一个兄弟元素节点</span><br><span class="line">5.nextElementSibling属性:获取当前节点的下一个兄弟元素节点</span><br><span class="line">其他属性:</span><br><span class="line">1.innerHTML属性:读取该元素节点内部的html代码</span><br><span class="line">2.innerText属性:读取该元素节点内部的文本内容</span><br><span class="line">3.nodeValue属性:文本节点使用此属性读取文本内容</span><br><span class="line">节点的动态操作:</span><br><span class="line">1.创建节点:document.createElement(&quot;标签名&quot;)</span><br><span class="line">2.删除节点:父节点对象.removeChild(子节点对象)</span><br><span class="line">3.替换节点:父节点对象.replaceChild(新节点对象，旧节点对象)</span><br><span class="line">4.插入节点:父节点对象.appendChild(子节点对象)</span><br><span class="line"> 父节点对象.insertBefore(新节点对象，旧节点对象) </span><br></pre></td></tr></table></figure><h3 id="11-3-事件"><a href="#11-3-事件" class="headerlink" title="11.3 事件"></a>11.3 事件</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">事件简介:文档或者浏览器窗口中发生的一些特定的交互瞬间。(JS代码和HTML之间相互是由事件实现)</span><br><span class="line">绑定事件:</span><br><span class="line">1) HTML标签绑定</span><br><span class="line">案例:  &lt;button onclick=&quot;f()&quot;&gt;点击&lt;/button&gt;</span><br><span class="line">   function f()&#123;</span><br><span class="line">               alert(123)</span><br><span class="line">            &#125;</span><br><span class="line">2) DOM对象绑定</span><br><span class="line">    案例:  </span><br><span class="line">    window.onload=function()&#123;</span><br><span class="line">                var btn = document.getElementById(&quot;bu1&quot;);</span><br><span class="line">                btn.onclick = function()&#123;</span><br><span class="line">                    alert(123)</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"> 3) HTML标签编写JS代码</span><br><span class="line"> 案例:&lt;button onclick=&quot;alert(123)&quot;&gt;获取div的子节点&lt;/button&gt;</span><br><span class="line"> 4) 事件监听器</span><br><span class="line"> 案例:</span><br><span class="line"> window.onload=function()&#123;</span><br><span class="line">                var btn = document.getElementById(&quot;bu1&quot;);</span><br><span class="line">                btn.addEventListener(&quot;click&quot;,function()&#123;alert(123)&#125;)</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">  事件监听器添加和取消的整体案例:       </span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">            window.onload=function()&#123; //页面加载事件</span><br><span class="line"></span><br><span class="line">                function f()&#123;</span><br><span class="line">                    alert(123)</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                var btn = document.getElementById(&quot;bu1&quot;);</span><br><span class="line">                btn.addEventListener(&quot;click&quot;,f)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                var btn2 = document.getElementById(&quot;bu2&quot;);</span><br><span class="line">                btn2.addEventListener(&quot;click&quot;,function()&#123;</span><br><span class="line">                    var btn3 = document.getElementById(&quot;bu1&quot;);</span><br><span class="line">                    btn3.removeEventListener(&quot;click&quot;,f);</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">                </span><br><span class="line">        &lt;/script&gt;</span><br><span class="line"></span><br><span class="line">事件种类:</span><br><span class="line">1. 鼠标事件（Mouse Events）：包括点击、双击、鼠标移入移出、鼠标按下释放等。</span><br><span class="line">2. 键盘事件（Keyboard Events）：包括按键按下、按键释放、按键组合等。</span><br><span class="line">3. 表单事件（Form Events）：包括表单提交、表单重置等。</span><br><span class="line">4. 焦点事件（Focus Events）：包括元素获得焦点、元素失去焦点等。</span><br><span class="line">5. 触摸事件（Touch Events）：包括触摸开始、触摸移动、触摸结束等。</span><br><span class="line">6. 窗口事件（Window Events）：包括窗口打开、窗口关闭、窗口刷新等。</span><br></pre></td></tr></table></figure><h2 id="12-BOM"><a href="#12-BOM" class="headerlink" title="12.BOM"></a>12.BOM</h2><h3 id="12-1-简介"><a href="#12-1-简介" class="headerlink" title="12.1 简介"></a>12.1 简介</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">BOM：浏览器对象模型。</span><br><span class="line">BOM将浏览器中的每个部分都转换成了一个一个的对象。通过这些对象控制浏览器的各种行为。</span><br></pre></td></tr></table></figure><h3 id="12-2-对象"><a href="#12-2-对象" class="headerlink" title="12.2 对象"></a>12.2 对象</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">1.window:window对象是BOM的核心，它表示一个浏览器的实例。同时window也是全局对象。</span><br><span class="line">窗口的尺寸:</span><br><span class="line">innerHeight：网页窗口的高度</span><br><span class="line">innerWidth：网页窗口的宽度</span><br><span class="line">outerHeight：浏览器窗口的高度</span><br><span class="line">outerWidth浏览器窗口的宽度</span><br><span class="line">打开窗口:</span><br><span class="line">window.open(url);  打开一个新的浏览器窗口</span><br><span class="line">定时器:</span><br><span class="line">      window.setInterval(执行的代码(可以为函数名),事件)； </span><br><span class="line">    取消定时器:</span><br><span class="line">      window.clearInterval(定时器的名称);</span><br><span class="line">    系统对话框:</span><br><span class="line">    alert(); 警告框</span><br><span class="line">    confirm(); 确认框</span><br><span class="line">    prompt(); 消息交互框</span><br><span class="line">    页面跳转:</span><br><span class="line">    window.location.href=&quot;url&quot;：在当前窗口展示新的url地址</span><br><span class="line">    历史对象:</span><br><span class="line">    window.history.go(1):前进一个历史记录   go(-1)：后退一个历史记录</span><br><span class="line">    window.history.forward():前进一个历史记录</span><br><span class="line">window.history.back():后退一个历史记录</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;JavaScript&quot;&gt;&lt;a href=&quot;#JavaScript&quot; class=&quot;headerlink&quot; title=&quot;JavaScript&quot;&gt;&lt;/a&gt;JavaScript&lt;/h1&gt;&lt;h2 id=&quot;1-JavaScript简介&quot;&gt;&lt;a href=&quot;#1-JavaS</summary>
      
    
    
    
    
    <category term="前端" scheme="http://sion-io.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>Mybatis</title>
    <link href="http://sion-io.github.io/2024/05/11/Mybatis(6)/"/>
    <id>http://sion-io.github.io/2024/05/11/Mybatis(6)/</id>
    <published>2024-05-11T06:56:01.000Z</published>
    <updated>2024-05-11T15:35:37.991Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Mybatis"><a href="#Mybatis" class="headerlink" title="Mybatis"></a>Mybatis</h1><h2 id="1-mybatis基础"><a href="#1-mybatis基础" class="headerlink" title="1.mybatis基础"></a>1.mybatis基础</h2><h3 id="1-1-为什么要使mybatis"><a href="#1-1-为什么要使mybatis" class="headerlink" title="1.1 为什么要使mybatis"></a>1.1 为什么要使mybatis</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">JDBC存在问题:</span><br><span class="line">1.将sql语句编写在Java代码中，如果后期SQL语句发生了改变那就需要重新编译整个Java程序。不利于项目上线后后期的升级维护。</span><br><span class="line">解决方案:将SQL语句编写在不需要编译的配置文件中。Java代码根据需求动态获取配置文件中SQL语句。</span><br><span class="line">2.JDBC中对于SQL的参数的传入以及结果集的获取也存在硬编码问题</span><br><span class="line">解决方案:基于问题1的解决方案可知SQL已经存在于配置文件中，当执行SQL时候所需要的参数自动映射到SQL上</span><br><span class="line">3.JDBC查询的结果集需要手动转换成Java对象</span><br><span class="line">解决方案:查询的结果集自动转换成Java对象</span><br><span class="line">4.JDBC存在大量的冗余代码</span><br><span class="line">解决方案:Mybatis+Spring可以去除大量冗余代码</span><br></pre></td></tr></table></figure><h3 id="1-2-ORM"><a href="#1-2-ORM" class="headerlink" title="1.2 ORM"></a>1.2 ORM</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ORM：对象关系映射。ORM是一种程序设计技术(只是一种思想不是具体具体的实现)主要用于面向对象编程语言和数据库不同类型之间的转换。</span><br><span class="line">Mybatis是ORM思想的一种实现。</span><br></pre></td></tr></table></figure><h3 id="1-3-Mybatis简介"><a href="#1-3-Mybatis简介" class="headerlink" title="1.3 Mybatis简介"></a>1.3 Mybatis简介</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Mybatis是一种持久化层框架。是Apache下的顶级项目之一，Mybatis的愿景是让开发者把精力放在SQL上，不需要在数据库和实体类之间转换问题上浪费时间</span><br><span class="line">关键字:自动映射</span><br><span class="line">开发者:告诉mybatis映射关系</span><br><span class="line">mybatis:每次CRUD自动完成映射</span><br><span class="line"></span><br><span class="line">PS:ibatis和Mybatis是同一项技术。</span><br></pre></td></tr></table></figure><h3 id="1-4-Maven的简单学习"><a href="#1-4-Maven的简单学习" class="headerlink" title="1.4 Maven的简单学习"></a>1.4 Maven的简单学习</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">目前开发中关于第三方jar文件遇到的问题:(jar-&gt;依赖)</span><br><span class="line">1.不知道下载什么依赖。</span><br><span class="line">2.不知道下载什么版本的依赖。</span><br><span class="line">3.不知道依赖的间接依赖。</span><br><span class="line">4.依赖之间的冲突问题无法感知和解决</span><br><span class="line">5.团队开发中，内部开发的依赖很难被其他同时及时使用和更新</span><br><span class="line"></span><br><span class="line">安装maven</span><br><span class="line">1.解压</span><br><span class="line">2.配置(本次仓库，中央仓库，JDK版本)</span><br><span class="line">3.创建本次仓库文件夹</span><br><span class="line"></span><br><span class="line">专业名词解释</span><br><span class="line">1.本地仓库:个人计算机上存储依赖的文件夹</span><br><span class="line">2.中央仓库:是一种远程仓库，存储了世界上绝大部分的依赖，但是地址在国外，访问速度慢</span><br><span class="line">3.国内镜像:国内一些企业搭建的一种远程仓库。实时的更新maven官方仓库的变化，地址在国内 访问速度快</span><br><span class="line"></span><br><span class="line">IDEA集成Maven</span><br><span class="line">在IDEA全局配置中搜索maven。修改maven地址，maven的settings.xml文件和本地仓库位置</span><br><span class="line"></span><br><span class="line">创建maven项目</span><br><span class="line">看视频(关键点:1.不选择骨架构建  2.设置好之间的gav坐标)</span><br><span class="line"></span><br><span class="line">maven项目的架构</span><br><span class="line">src/main/java:存放java源码的位置</span><br><span class="line">src/main/resources:存放java配置文件的位置</span><br><span class="line">src/test/java:存放测试源码的位置</span><br><span class="line">src/test/resources:存放测试配置文件的位置</span><br><span class="line">pom.xml:maven的核心文件</span><br><span class="line"></span><br><span class="line">maven如何下载依赖</span><br><span class="line">在pom.xml中编写dependencies（编写完成后记住要加载）</span><br><span class="line">案例如下:</span><br><span class="line">&lt;dependencies&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;8.0.30&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure><h3 id="1-5-mybatis的入门程序"><a href="#1-5-mybatis的入门程序" class="headerlink" title="1.5 mybatis的入门程序"></a>1.5 mybatis的入门程序</h3><h4 id="1-5-1-环境搭建"><a href="#1-5-1-环境搭建" class="headerlink" title="1.5.1 环境搭建"></a>1.5.1 环境搭建</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">1)创建maven项目</span><br><span class="line">2)编写pom.xml</span><br><span class="line">&lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;8.0.30&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;log4j&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;log4j&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.2.17&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.mybatis&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;mybatis&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;3.5.10&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;junit&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;junit&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;4.12&lt;/version&gt;</span><br><span class="line">            &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.18.12&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line">3.配置日志文件(log4j.properties)</span><br><span class="line">log4j.rootLogger=DEBUG, stdout</span><br><span class="line">log4j.appender.stdout=org.apache.log4j.ConsoleAppender</span><br><span class="line">log4j.appender.stdout.layout=org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.stdout.layout.ConversionPattern=%5p [%t] [%d&#123;yyy MMM dd HH:mm:ss,SSS&#125;] - %m%n</span><br></pre></td></tr></table></figure><h4 id="1-5-2-Mybatis配置文件-SqlMapConfig-xml"><a href="#1-5-2-Mybatis配置文件-SqlMapConfig-xml" class="headerlink" title="1.5.2 Mybatis配置文件(SqlMapConfig.xml)"></a>1.5.2 Mybatis配置文件(SqlMapConfig.xml)</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">此配置文件配置的事Mybatis的运行环境</span><br><span class="line"></span><br><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE configuration PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span><br><span class="line">        &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;!-- 1.读取资源文件 --&gt;</span><br><span class="line">    &lt;properties resource=&quot;mysql.properties&quot;&gt;&lt;/properties&gt;</span><br><span class="line">    &lt;!---2.mybatis运行环境--&gt;</span><br><span class="line">    &lt;environments default=&quot;development&quot;&gt;</span><br><span class="line">        &lt;environment id=&quot;development&quot;&gt;</span><br><span class="line">            &lt;!--3.事务管理器--&gt;</span><br><span class="line">            &lt;transactionManager type=&quot;JDBC&quot;&gt;&lt;/transactionManager&gt;</span><br><span class="line">            &lt;!--4.数据源--&gt;</span><br><span class="line">            &lt;dataSource type=&quot;POOLED&quot;&gt;</span><br><span class="line">                &lt;property name=&quot;driver&quot; value=&quot;$&#123;mysql_driver&#125;&quot;/&gt;</span><br><span class="line">                &lt;property name=&quot;url&quot; value=&quot;$&#123;mysql_url&#125;&quot;/&gt;</span><br><span class="line">                &lt;property name=&quot;username&quot; value=&quot;$&#123;mysql_username&#125;&quot;/&gt;</span><br><span class="line">                &lt;property name=&quot;password&quot; value=&quot;$&#123;mysql_password&#125;&quot;/&gt;</span><br><span class="line">            &lt;/dataSource&gt;</span><br><span class="line">        &lt;/environment&gt;</span><br><span class="line">    &lt;/environments&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure><h4 id="1-5-3-数据库资源文件"><a href="#1-5-3-数据库资源文件" class="headerlink" title="1.5.3 数据库资源文件"></a>1.5.3 数据库资源文件</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysql_driver=com.mysql.cj.jdbc.Driver</span><br><span class="line">mysql_url=jdbc:mysql://127.0.0.1:3306/mybatisdb?characterEncoding=utf8&amp;serverTimezone=Asia/Shanghai</span><br><span class="line">mysql_username=root</span><br><span class="line">mysql_password=1234</span><br></pre></td></tr></table></figure><h4 id="1-5-4-创建表和实体类"><a href="#1-5-4-创建表和实体类" class="headerlink" title="1.5.4 创建表和实体类"></a>1.5.4 创建表和实体类</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@Data </span><br><span class="line">@AllArgsConstructor </span><br><span class="line">@NoArgsConstructor </span><br><span class="line">public class Student &#123;</span><br><span class="line">    private Integer studentId;</span><br><span class="line">    private String studentName;</span><br><span class="line">    private String studentGender;</span><br><span class="line">    private Integer studentAge;</span><br><span class="line">    private Date studentBirthday;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-5-5-配置映射文件"><a href="#1-5-5-配置映射文件" class="headerlink" title="1.5.5 配置映射文件"></a>1.5.5 配置映射文件</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span><br><span class="line">        &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;</span><br><span class="line">&lt;mapper namespace=&quot;student&quot;&gt;</span><br><span class="line">    &lt;!--namespace:当前用于sql隔离。后期用于mapper接口开发 --&gt;</span><br><span class="line">    &lt;resultMap id=&quot;baseResultMap&quot; type=&quot;com.lxk.pojo.Student&quot;&gt;</span><br><span class="line">        &lt;id property=&quot;studentId&quot; column=&quot;student_id&quot;/&gt;</span><br><span class="line">        &lt;result property=&quot;studentName&quot; column=&quot;student_name&quot;/&gt;</span><br><span class="line">        &lt;result property=&quot;studentGender&quot; column=&quot;student_gender&quot;/&gt;</span><br><span class="line">        &lt;result property=&quot;studentAge&quot; column=&quot;student_age&quot;/&gt;</span><br><span class="line">        &lt;result property=&quot;studentBirthday&quot; column=&quot;student_birthday&quot;/&gt;</span><br><span class="line">    &lt;/resultMap&gt;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    &lt;!--查询所有--&gt;</span><br><span class="line">    &lt;select id=&quot;findAll&quot; resultMap=&quot;baseResultMap&quot;&gt;</span><br><span class="line">        select * from t_student</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure><h4 id="1-5-6-配置文件加载映射文件"><a href="#1-5-6-配置文件加载映射文件" class="headerlink" title="1.5.6 配置文件加载映射文件"></a>1.5.6 配置文件加载映射文件</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--加载映射文件--&gt;</span><br><span class="line">&lt;mappers&gt;</span><br><span class="line">    &lt;mapper resource=&quot;StudentMapper.xml&quot;&gt;&lt;/mapper&gt;</span><br><span class="line">&lt;/mappers&gt;</span><br></pre></td></tr></table></figure><h4 id="1-5-7-编写持久层"><a href="#1-5-7-编写持久层" class="headerlink" title="1.5.7 编写持久层"></a>1.5.7 编写持久层</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public class StudentDao &#123;</span><br><span class="line">    public List&lt;Student&gt; findAll() throws IOException &#123;</span><br><span class="line">        //1.获取配置文件对象</span><br><span class="line">        InputStream inputStream = Resources.getResourceAsStream(&quot;SqlMapConfig.xml&quot;);</span><br><span class="line">        //2.获取会话工厂</span><br><span class="line">        SqlSessionFactory sessionFactory = new SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">        //3.获取会话对象</span><br><span class="line">        SqlSession sqlSession = sessionFactory.openSession();</span><br><span class="line">        //4.使用会话操作数据库</span><br><span class="line">        List&lt;Student&gt; list = sqlSession.selectList(&quot;student.findAll&quot;);</span><br><span class="line">        //5.关闭session对象</span><br><span class="line">        sqlSession.close();</span><br><span class="line">        return list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-5-8-单元测试"><a href="#1-5-8-单元测试" class="headerlink" title="1.5.8 单元测试"></a>1.5.8 单元测试</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">    public void method01() throws IOException &#123;</span><br><span class="line">        StudentDao studentDao = new StudentDao();</span><br><span class="line">        List&lt;Student&gt; list = studentDao.findAll();</span><br><span class="line">        for (Student student : list) &#123;</span><br><span class="line">            System.out.println(student);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="1-6-CRUD"><a href="#1-6-CRUD" class="headerlink" title="1.6 CRUD"></a>1.6 CRUD</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">持久化层:</span><br><span class="line">public class StudentDao &#123;</span><br><span class="line">    public List&lt;Student&gt; findAll() throws IOException &#123;</span><br><span class="line">        //1.获取配置文件对象</span><br><span class="line">        InputStream inputStream = Resources.getResourceAsStream(&quot;SqlMapConfig.xml&quot;);</span><br><span class="line">        //2.获取会话工厂</span><br><span class="line">        SqlSessionFactory sessionFactory = new SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">        //3.获取会话对象</span><br><span class="line">        SqlSession sqlSession = sessionFactory.openSession();</span><br><span class="line">        //4.使用会话操作数据库</span><br><span class="line">        List&lt;Student&gt; list = sqlSession.selectList(&quot;student.findAll&quot;);</span><br><span class="line">        //5.关闭session对象</span><br><span class="line">        sqlSession.close();</span><br><span class="line">        return list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void addStudent(Student student) throws IOException &#123;</span><br><span class="line">        //1.获取配置文件对象</span><br><span class="line">        InputStream inputStream = Resources.getResourceAsStream(&quot;SqlMapConfig.xml&quot;);</span><br><span class="line">        //2.获取会话工厂</span><br><span class="line">        SqlSessionFactory sessionFactory = new SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">        //3.获取会话对象</span><br><span class="line">        SqlSession sqlSession = sessionFactory.openSession();</span><br><span class="line">        //4.使用会话操作数据库</span><br><span class="line">        sqlSession.insert(&quot;student.addStudent&quot;,student);</span><br><span class="line">        sqlSession.commit();</span><br><span class="line">        //5.关闭session对象</span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line">    public void editStudent(Student student) throws IOException &#123;</span><br><span class="line">        //1.获取配置文件对象</span><br><span class="line">        InputStream inputStream = Resources.getResourceAsStream(&quot;SqlMapConfig.xml&quot;);</span><br><span class="line">        //2.获取会话工厂</span><br><span class="line">        SqlSessionFactory sessionFactory = new SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">        //3.获取会话对象</span><br><span class="line">        SqlSession sqlSession = sessionFactory.openSession();</span><br><span class="line">        //4.使用会话操作数据库</span><br><span class="line">        sqlSession.update(&quot;student.editStudentById&quot;,student);</span><br><span class="line">        sqlSession.commit();</span><br><span class="line">        //5.关闭session对象</span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line">    public void deleteStudent(Integer id) throws IOException &#123;</span><br><span class="line">        //1.获取配置文件对象</span><br><span class="line">        InputStream inputStream = Resources.getResourceAsStream(&quot;SqlMapConfig.xml&quot;);</span><br><span class="line">        //2.获取会话工厂</span><br><span class="line">        SqlSessionFactory sessionFactory = new SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">        //3.获取会话对象</span><br><span class="line">        SqlSession sqlSession = sessionFactory.openSession();</span><br><span class="line">        //4.使用会话操作数据库</span><br><span class="line">        sqlSession.delete(&quot;student.deleteById&quot;,id);</span><br><span class="line">        sqlSession.commit();</span><br><span class="line">        //5.关闭session对象</span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">mapper映射文件:</span><br><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span><br><span class="line">        &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;</span><br><span class="line">&lt;mapper namespace=&quot;student&quot;&gt;</span><br><span class="line">    &lt;!--namespace:当前用于sql隔离。后期用于mapper接口开发 --&gt;</span><br><span class="line">    &lt;resultMap id=&quot;baseResultMap&quot; type=&quot;com.lxk.pojo.Student&quot;&gt;</span><br><span class="line">        &lt;id property=&quot;studentId&quot; column=&quot;student_id&quot;/&gt;</span><br><span class="line">        &lt;result property=&quot;studentName&quot; column=&quot;student_name&quot;/&gt;</span><br><span class="line">        &lt;result property=&quot;studentGender&quot; column=&quot;student_gender&quot;/&gt;</span><br><span class="line">        &lt;result property=&quot;studentAge&quot; column=&quot;student_age&quot;/&gt;</span><br><span class="line">        &lt;result property=&quot;studentBirthday&quot; column=&quot;student_birthday&quot;/&gt;</span><br><span class="line">    &lt;/resultMap&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--查询所有--&gt;</span><br><span class="line">    &lt;select id=&quot;findAll&quot; resultMap=&quot;baseResultMap&quot;&gt;</span><br><span class="line">        select * from t_student</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">    &lt;!--新增--&gt;</span><br><span class="line">    &lt;insert id=&quot;addStudent&quot; parameterType=&quot;com.lxk.pojo.Student&quot;&gt;</span><br><span class="line">        insert into t_student values (0,#&#123;studentName&#125;,#&#123;studentGender&#125;,#&#123;studentAge&#125;,#&#123;studentBirthday&#125;)</span><br><span class="line">    &lt;/insert&gt;</span><br><span class="line">    &lt;!--修改--&gt;</span><br><span class="line">    &lt;update id=&quot;editStudentById&quot; parameterType=&quot;com.lxk.pojo.Student&quot;&gt;</span><br><span class="line">        update t_student</span><br><span class="line">        set student_name = #&#123;studentName&#125;,student_gender=#&#123;studentGender&#125;,student_age=#&#123;studentAge&#125;,student_birthday=#&#123;studentBirthday&#125;</span><br><span class="line">        where student_id = #&#123;studentId&#125;</span><br><span class="line">    &lt;/update&gt;</span><br><span class="line">    &lt;!--删除--&gt;</span><br><span class="line">    &lt;delete id=&quot;deleteById&quot; parameterType=&quot;java.lang.Integer&quot;&gt;</span><br><span class="line">        delete</span><br><span class="line">        from t_student</span><br><span class="line">        where student_id = #&#123;studentId&#125;</span><br><span class="line">    &lt;/delete&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">单元测试:</span><br><span class="line">public class StudentDaoTest &#123;</span><br><span class="line">    @Test</span><br><span class="line">    public void method01() throws IOException &#123;</span><br><span class="line">        StudentDao studentDao = new StudentDao();</span><br><span class="line">        List&lt;Student&gt; list = studentDao.findAll();</span><br><span class="line">        for (Student student : list) &#123;</span><br><span class="line">            System.out.println(student);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    @Test</span><br><span class="line">    public void method02() throws IOException &#123;</span><br><span class="line">        StudentDao studentDao = new StudentDao();</span><br><span class="line">        Student student = new Student();</span><br><span class="line">        student.setStudentName(&quot;王二&quot;);</span><br><span class="line">        student.setStudentGender(&quot;男&quot;);</span><br><span class="line">        student.setStudentAge(18);</span><br><span class="line">        student.setStudentBirthday(new Date());</span><br><span class="line">        studentDao.addStudent(student);</span><br><span class="line">    &#125;</span><br><span class="line">    @Test</span><br><span class="line">    public void method03() throws IOException &#123;</span><br><span class="line">        StudentDao studentDao = new StudentDao();</span><br><span class="line">        Student student = new Student();</span><br><span class="line">        student.setStudentName(&quot;王二2&quot;);</span><br><span class="line">        student.setStudentGender(&quot;男2&quot;);</span><br><span class="line">        student.setStudentAge(19);</span><br><span class="line">        student.setStudentBirthday(new Date());</span><br><span class="line">        student.setStudentId(3);</span><br><span class="line">        studentDao.editStudent(student);</span><br><span class="line">    &#125;</span><br><span class="line">    @Test</span><br><span class="line">    public void method04() throws IOException &#123;</span><br><span class="line">        StudentDao studentDao = new StudentDao();</span><br><span class="line">        studentDao.deleteStudent(3);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-7-和-的区别"><a href="#1-7-和-的区别" class="headerlink" title="1.7 #{}和${}的区别"></a>1.7 #{}和${}的区别</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#&#123;&#125; 表示占位符   $&#123;&#125; 表示的是字符串拼接</span><br><span class="line"></span><br><span class="line">使用:</span><br><span class="line">如果传递的参数是基本数据类型或者其包装类和String类型，那么#&#123;&#125;和$&#123;&#125;里面都可以随便写</span><br><span class="line">如果传递的参数是引用数据类型那么大括号内必须写成数据类型的属性名</span><br><span class="line"></span><br><span class="line">PS：但是开发中为了代码的可读性，一般要求参数名统一使用属性名(见名知意)</span><br><span class="line">同时开发中推荐使用#&#123;&#125;。因为$&#123;&#125;可能会造成SQL注入</span><br></pre></td></tr></table></figure><h2 id="2-Mapper接口开发"><a href="#2-Mapper接口开发" class="headerlink" title="2.Mapper接口开发"></a>2.Mapper接口开发</h2><h3 id="2-1-原生Dao开发存在的问题"><a href="#2-1-原生Dao开发存在的问题" class="headerlink" title="2.1 原生Dao开发存在的问题"></a>2.1 原生Dao开发存在的问题</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.Sqlsession对象调用statement id的时候依然存在硬编码问题</span><br><span class="line">2.SqlSession对象调用方法的时候有些情况下需要传参。但是SqlSession对象提供的方法的参数都是Object，如果传递的参数不正确也不会出现编译错误。但是运行的时候会出错。</span><br><span class="line">3.代码冗余</span><br></pre></td></tr></table></figure><h3 id="2-2-mapper接口代理开发"><a href="#2-2-mapper接口代理开发" class="headerlink" title="2.2 mapper接口代理开发"></a>2.2 mapper接口代理开发</h3><h4 id="2-2-1-mapper接口代理开发规则"><a href="#2-2-1-mapper接口代理开发规则" class="headerlink" title="2.2.1 mapper接口代理开发规则"></a>2.2.1 mapper接口代理开发规则</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">在以后的mybatis开发中只需要编写mapper.xml和mapper接口即可。就不需要再编写持久化层的实现类。</span><br><span class="line">在编写mapper接口的时候只要遵守mapper代理开发的规则即可。mybatis就会根据接口自动生成对应的代理对象(代理实现类)，并且会自动调用对应的statement。</span><br><span class="line"></span><br><span class="line">具体规则：</span><br><span class="line">1.mapper.xml(映射文件)的namespace属性的值必须等于mapper.java(接口)的地址</span><br><span class="line">2.mapper.java接口中方法名必须和mapper.xml中的statement的id保持一致</span><br><span class="line">3.mapper.java接口中的方法的输入参数必须和mapper.xml中statement的parameterType保持一致</span><br><span class="line">4.mapper.java接口中的方法的返回值必须和mapper.xml中的statement的resultMap/resultType保持一致</span><br><span class="line">5.保证mapper.xml和mapper.java在同一目录下并且名字相同</span><br><span class="line"></span><br><span class="line">PS:规则5的具体实现方式:</span><br><span class="line">1.src/main/java是maven规定的存放java源代码的位置，src/main/resources是maven规定存在配置文件的位置。如果把配置文件放入到src/main/java但是会违反maven的规定。但是可以在pom.xml中手动配置配置文件位置</span><br><span class="line">2.不违反maven的规定，就存放在src/main/resources下， 不过保证路径相同就会编译到同一目录下</span><br></pre></td></tr></table></figure><h4 id="2-2-2-编写mapper接口"><a href="#2-2-2-编写mapper接口" class="headerlink" title="2.2.2 编写mapper接口"></a>2.2.2 编写mapper接口</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public interface StudentMapper &#123;</span><br><span class="line">    //查询所有</span><br><span class="line">    List&lt;Student&gt; findAll();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-2-3-编写mapper映射文件"><a href="#2-2-3-编写mapper映射文件" class="headerlink" title="2.2.3 编写mapper映射文件"></a>2.2.3 编写mapper映射文件</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span><br><span class="line">        &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;</span><br><span class="line">&lt;mapper namespace=&quot;com.xja.mapper.StudentMapper&quot;&gt;</span><br><span class="line">    &lt;!--namespace:当前用于sql隔离。后期用于mapper接口开发 --&gt;</span><br><span class="line">    &lt;resultMap id=&quot;baseResultMap&quot; type=&quot;com.xja.pojo.Student&quot;&gt;</span><br><span class="line">        &lt;id property=&quot;studentId&quot; column=&quot;student_id&quot;/&gt;</span><br><span class="line">        &lt;result property=&quot;studentName&quot; column=&quot;student_name&quot;/&gt;</span><br><span class="line">        &lt;result property=&quot;studentGender&quot; column=&quot;student_gender&quot;/&gt;</span><br><span class="line">        &lt;result property=&quot;studentAge&quot; column=&quot;student_age&quot;/&gt;</span><br><span class="line">        &lt;result property=&quot;studentBirthday&quot; column=&quot;student_birthday&quot;/&gt;</span><br><span class="line">    &lt;/resultMap&gt;</span><br><span class="line"></span><br><span class="line">    &lt;select id=&quot;findAll&quot; resultMap=&quot;baseResultMap&quot;&gt;</span><br><span class="line">        select * from t_student</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line"></span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure><h4 id="2-2-4-修改映射文件的加载方式"><a href="#2-2-4-修改映射文件的加载方式" class="headerlink" title="2.2.4 修改映射文件的加载方式"></a>2.2.4 修改映射文件的加载方式</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--加载映射文件--&gt;</span><br><span class="line"> &lt;mappers&gt;</span><br><span class="line">     &lt;package name=&quot;com.xja.mapper&quot;/&gt;</span><br><span class="line"> &lt;/mappers&gt;</span><br></pre></td></tr></table></figure><h4 id="2-2-5-编写测试代码"><a href="#2-2-5-编写测试代码" class="headerlink" title="2.2.5 编写测试代码"></a>2.2.5 编写测试代码</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">    public void method01() throws IOException &#123;</span><br><span class="line">        //目前写的代码依然很多。但是后续被Spring整合后也就一行代码</span><br><span class="line">        //1.获取配置文件对象</span><br><span class="line">        InputStream inputStream = Resources.getResourceAsStream(&quot;SqlMapConfig.xml&quot;);</span><br><span class="line">        //2.获取会话工厂</span><br><span class="line">        SqlSessionFactory sessionFactory = new SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">        //3.获取会话对象</span><br><span class="line">        SqlSession sqlSession = sessionFactory.openSession();</span><br><span class="line">        StudentMapper mapper = sqlSession.getMapper(StudentMapper.class); //获取studentMapper的代理实现类</span><br><span class="line">        //以上代码在Spring整合后都不需要编写</span><br><span class="line">        List&lt;Student&gt; list = mapper.findAll();</span><br><span class="line">        list.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-CRUD"><a href="#2-3-CRUD" class="headerlink" title="2.3 CRUD"></a>2.3 CRUD</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1.查询所有</span><br><span class="line">2.根据ID查询</span><br><span class="line">3.根据ID修改</span><br><span class="line">4.新增</span><br><span class="line">5.根据ID删除</span><br><span class="line">6.根据名字模糊查询</span><br><span class="line">以上功能使用mapper接口实现</span><br></pre></td></tr></table></figure><h2 id="3-SqlMapConfig-xml-Mybatis配置文件-详解"><a href="#3-SqlMapConfig-xml-Mybatis配置文件-详解" class="headerlink" title="3.SqlMapConfig.xml(Mybatis配置文件)详解"></a>3.SqlMapConfig.xml(Mybatis配置文件)详解</h2><h3 id="3-1-组成部分"><a href="#3-1-组成部分" class="headerlink" title="3.1 组成部分"></a>3.1 组成部分</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1.properties:加载资源文件</span><br><span class="line">2.settings:全局参数配置</span><br><span class="line">3.typeAliases:类型别名</span><br><span class="line">4.typeHandlers:类型转换器</span><br><span class="line">5.environments:运行环境集合</span><br><span class="line">environment:运行环境对象</span><br><span class="line">transactionManager：事务管理器</span><br><span class="line">dataSource:数据源</span><br><span class="line">6.mappers:映射器</span><br></pre></td></tr></table></figure><h3 id="3-2-properties"><a href="#3-2-properties" class="headerlink" title="3.2 properties"></a>3.2 properties</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">作用:一般用于资源文件的加载</span><br><span class="line">应用场景:加载外部的数据库连接资源文件，得到其参数值，用于配置运行环境。使用此配置可以灵活的修改数据库连接参数</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">使用方式:</span><br><span class="line">1.资源文件</span><br><span class="line">mysql_driver=com.mysql.cj.jdbc.Driver</span><br><span class="line">mysql_url=jdbc:mysql://127.0.0.1:3306/mybatisdb?characterEncoding=utf8&amp;serverTimezone=Asia/Shanghai</span><br><span class="line">mysql_username=root</span><br><span class="line">mysql_password=1234</span><br><span class="line">2.加载资源文件</span><br><span class="line">&lt;properties resource=&quot;mysql.properties&quot;&gt;&lt;/properties&gt;</span><br><span class="line">3.使用资源文件内容</span><br><span class="line">&lt;property name=&quot;driver&quot; value=&quot;$&#123;mysql_driver&#125;&quot;/&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">特殊编写方式:</span><br><span class="line">&lt;properties resource=&quot;mysql.properties&quot;&gt;</span><br><span class="line">&lt;property name=&quot;mysql_password&quot; value=&quot;4567&quot;/&gt;</span><br><span class="line">&lt;/properties&gt;</span><br><span class="line">  </span><br><span class="line"> 资源冲突问题:</span><br><span class="line"> 在mybatis配置文件中使用上述配置，如果外部的资源文件(mysql.properties)的key和property标签中name的值一样就会出现冲突问题、</span><br><span class="line"> </span><br><span class="line"> 资源冲突后的加载顺序:</span><br><span class="line"> 在出现资源冲突问题的时候，mybatis首先会加载property标签中定义的属性，然后再去读取resource对应的外部资源文件中的值。如果出现冲突key那么后读取的数据会覆盖先读取的。</span><br><span class="line"> </span><br><span class="line"> PS：不推荐使用内部的标签定义，所有的资源配置都返给到外部资源文件中</span><br></pre></td></tr></table></figure><h3 id="3-3-settings"><a href="#3-3-settings" class="headerlink" title="3.3 settings"></a>3.3 settings</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">作用:settings标签用于修改Mybatis框架在运行过程中的一些行为参数。只要修改了此配置就会对Mybatis运行带来影响。</span><br><span class="line">此配置项比较多，主要记住以下几个:延迟加载。缓存开关。驼峰映射。日志配置。</span><br></pre></td></tr></table></figure><table><thead><tr><th>设置参数</th><th>描述</th><th>有效值</th><th>默认值</th></tr></thead><tbody><tr><td>cacheEnabled</td><td>该配置影响的所有映射器中配置的缓存的全局开关</td><td>true | false</td><td>true</td></tr><tr><td>lazyLoadingEnabled</td><td>延迟加载的全局开关。当开启时，所有关联对象都会延迟加载。 特定关联关系中可通过设置fetchType属性来覆盖该项的开关状态</td><td>true | false</td><td>false</td></tr><tr><td>aggressiveLazyLoading</td><td>当启用时，对任意延迟属性的调用会使带有延迟加载属性的对象完整加载；反之，每种属性将会按需加载。</td><td>true | false</td><td>true</td></tr><tr><td>multipleResultSetsEnabled</td><td>是否允许单一语句返回多结果集（需要兼容驱动）。</td><td>true | false</td><td>true</td></tr><tr><td>useColumnLabel</td><td>使用列标签代替列名。不同的驱动在这方面会有不同的表现， 具体可参考相关驱动文档或通过测试这两种不同的模式来观察所用驱动的结果。</td><td>true | false</td><td>true</td></tr><tr><td>useGeneratedKeys</td><td>允许 JDBC 支持自动生成主键，需要驱动兼容。 如果设置为 true 则这个设置强制使用自动生成主键，尽管一些驱动不能兼容但仍可正常工作（比如 Derby）。</td><td>true | false</td><td>False</td></tr><tr><td>autoMappingBehavior</td><td>指定 MyBatis 应如何自动映射列到字段或属性。 NONE 表示取消自动映射；PARTIAL 只会自动映射没有定义嵌套结果集映射的结果集。 FULL 会自动映射任意复杂的结果集（无论是否嵌套）。</td><td>NONE, PARTIAL, FULL</td><td>PARTIAL</td></tr><tr><td>defaultExecutorType</td><td>配置默认的执行器。SIMPLE 就是普通的执行器；REUSE 执行器会重用预处理语句（prepared statements）； BATCH 执行器将重用语句并执行批量更新。</td><td>SIMPLE REUSE BATCH</td><td>SIMPLE</td></tr><tr><td>defaultStatementTimeout</td><td>设置超时时间，它决定驱动等待数据库响应的秒数。</td><td>Any positive integer</td><td>Not Set (null)</td></tr><tr><td>defaultFetchSize</td><td>Sets the driver a hint as to control fetching size for return results. This parameter value can be override by a query setting.</td><td>Any positive integer</td><td>Not Set (null)</td></tr><tr><td>safeRowBoundsEnabled</td><td>允许在嵌套语句中使用分页（RowBounds）。</td><td>true | false</td><td>False</td></tr><tr><td>mapUnderscoreToCamelCase</td><td>是否开启自动驼峰命名规则（camel case）映射，即从经典数据库列名 A_COLUMN 到经典 Java 属性名 aColumn 的类似映射。</td><td>true | false</td><td>False</td></tr><tr><td>localCacheScope</td><td>MyBatis 利用本地缓存机制（Local Cache）防止循环引用（circular references）和加速重复嵌套查询。 默认值为 SESSION，这种情况下会缓存一个会话中执行的所有查询。 若设置值为 STATEMENT，本地会话仅用在语句执行上，对相同 SqlSession 的不同调用将不会共享数据。</td><td>SESSION | STATEMENT</td><td>SESSION</td></tr><tr><td>jdbcTypeForNull</td><td>当没有为参数提供特定的 JDBC 类型时，为空值指定 JDBC 类型。 某些驱动需要指定列的 JDBC 类型，多数情况直接用一般类型即可，比如 NULL、VARCHAR 或 OTHER。</td><td>JdbcType enumeration. Most common are: NULL, VARCHAR and OTHER</td><td>OTHER</td></tr><tr><td>lazyLoadTriggerMethods</td><td>指定哪个对象的方法触发一次延迟加载。</td><td>A method name list separated by commas</td><td>equals,clone,hashCode,toString</td></tr><tr><td>defaultScriptingLanguage</td><td>指定动态 SQL 生成的默认语言。</td><td>A type alias or fully qualified class name.</td><td>org.apache.ibatis.scripting.xmltags.XMLDynamicLanguageDriver</td></tr><tr><td>callSettersOnNulls</td><td>指定当结果集中值为 null 的时候是否调用映射对象的 setter（map 对象时为 put）方法，这对于有 Map.keySet() 依赖或 null 值初始化的时候是有用的。注意基本类型（int、boolean等）是不能设置成 null 的。</td><td>true | false</td><td>false</td></tr><tr><td>logPrefix</td><td>指定 MyBatis 增加到日志名称的前缀。</td><td>Any String</td><td>Not set</td></tr><tr><td>logImpl</td><td>指定 MyBatis 所用日志的具体实现，未指定时将自动查找。</td><td>SLF4J | LOG4J | LOG4J2 | JDK_LOGGING | COMMONS_LOGGING | STDOUT_LOGGING | NO_LOGGING</td><td>Not set</td></tr><tr><td>proxyFactory</td><td>指定 Mybatis 创建具有延迟加载能力的对象所用到的代理工具。</td><td>CGLIB | JAVASSIST</td><td>JAVASSIST (MyBatis 3.3 or above)</td></tr></tbody></table><h4 id="3-3-1-驼峰映射"><a href="#3-3-1-驼峰映射" class="headerlink" title="3.3.1 驼峰映射"></a>3.3.1 驼峰映射</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">配置:</span><br><span class="line">&lt;settings&gt;</span><br><span class="line">&lt;setting name=&quot;mapUnderscoreToCamelCase&quot; value=&quot;true&quot;/&gt;</span><br><span class="line">&lt;/settings&gt;</span><br><span class="line">作用:</span><br><span class="line">数据库的列名和Java的属性名符合驼峰转换的时候可以开启驼峰转换取代ResultMap(手动映射)</span><br></pre></td></tr></table></figure><h3 id="3-4-mybatis缓存"><a href="#3-4-mybatis缓存" class="headerlink" title="3.4 mybatis缓存"></a>3.4 mybatis缓存</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mybatis的缓存分为两种:</span><br><span class="line">1.一级缓存:是针对于Sqlsession的缓存</span><br><span class="line">2.二级缓存:是针对于mapper的缓存</span><br></pre></td></tr></table></figure><h4 id="3-4-1-一级缓存"><a href="#3-4-1-一级缓存" class="headerlink" title="3.4.1 一级缓存"></a>3.4.1 一级缓存</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">一级缓存默认是开启的。无需任何配置。</span><br><span class="line"></span><br><span class="line">应用场景:使用mybatis查询主键为1的数据(t_student),从数据库查询出来后mybatis会把查询的结果保存到一级缓存中，如果后续同一个SqlSession执行了Commit操作(修改，删除，添加)那么mybatis就会清空此SqlSession的一级缓存(避免出现脏读问题)。</span><br><span class="line"></span><br><span class="line">一级缓存的存储结构:</span><br><span class="line">SqlSession查询出来的对象存储到一个HashMap中，并且每个SqlSession都有专属于自己的HashMap用于存储一级缓存的数据。所以说一级缓存就是针对于Sqlsession的缓存</span><br><span class="line"></span><br><span class="line">总结:</span><br><span class="line">当程序中同一个mapper的同一个方法的同一个参数查询出来的数据会存放在一级缓存中，当针对于此参数进行多次查询的时候只有第一次从数据库中获取，后续都从一级缓存中获取。但是不同的SqlSession之间的缓存是相互隔离的。如果需要多个SqlSession之间针对同一个mapper的查询数据共享的话那么需要开启二级缓存。</span><br></pre></td></tr></table></figure><h4 id="3-4-2-二级缓存"><a href="#3-4-2-二级缓存" class="headerlink" title="3.4.2 二级缓存"></a>3.4.2 二级缓存</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">1.二级缓存的简介</span><br><span class="line">二级缓存是mapper级别的缓存。当程序中多个SqlSession查询同一个方法的同一个参数不管查询多少次。只有第一次查询数据库，后续都是从二级缓存中获取。但是必须保证多个SqlSession操作的是同一个mapper(namespace属性)</span><br><span class="line"></span><br><span class="line">2.一级缓存和二级缓存的关系</span><br><span class="line">当一个SqlSession执行close方法后，会将自身一级缓存中的额数据保存到二级缓存中。接下来发生的查询都会从二级缓存中获取。</span><br><span class="line"></span><br><span class="line">3.使用二级缓存</span><br><span class="line">3.1 通过查看Settings默认配置发现二级缓存也是开启的。可以手动配置二级缓存的开启和关闭</span><br><span class="line">&lt;settings&gt;</span><br><span class="line">&lt;setting name=&quot;cacheEnabled&quot; value=&quot;true&quot;/&gt;</span><br><span class="line">&lt;/settings&gt;</span><br><span class="line">3.2 映射文件使用二级缓存</span><br><span class="line">&lt;cache&gt;&lt;/cache&gt;</span><br><span class="line"></span><br><span class="line">4.错误</span><br><span class="line">java.io.NotSerializableException</span><br><span class="line"></span><br><span class="line">错误原因:</span><br><span class="line">因为二级缓存的存储是多样化的。可能二级缓存的数据存储到内存中也可能存储在磁盘中。如果当前数据刚好存储在磁盘中那么就会出现序列化和反序列化问题。为了避免这个问题再开发中推荐所有实体类都实现Serializable接口。</span><br><span class="line"></span><br><span class="line">5.二级缓存的弊端:</span><br><span class="line">使用二级缓存就无法保证数据的实时性(可能缓存中的数据在数据库中已经被更新)</span><br><span class="line"></span><br><span class="line">解决方案:</span><br><span class="line">当某一个查询对数据的实时性有较强的需求则针对此查询单独关闭二级缓存</span><br><span class="line"></span><br><span class="line">&lt;select flushCache=&quot;true&quot;&gt;&lt;/select&gt;</span><br></pre></td></tr></table></figure><h3 id="3-5-typeAliases"><a href="#3-5-typeAliases" class="headerlink" title="3.5 typeAliases"></a>3.5 typeAliases</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">作用:在映射文件中每一个statement都需要配置parameterType和resultType。这两个配置是传入参数和返回结果集的类型。如果不使用别名则需要配置全路径名。一般类型的路径名都比较长。需要别名进行简化。</span><br></pre></td></tr></table></figure><h4 id="3-5-1-默认别名"><a href="#3-5-1-默认别名" class="headerlink" title="3.5.1 默认别名"></a>3.5.1 默认别名</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">映射类型别名</span><br><span class="line">Date           date</span><br><span class="line">Boolean        boolean </span><br><span class="line">Float          float </span><br><span class="line">Double   double</span><br><span class="line">Integer   int/integer</span><br><span class="line">Short   short</span><br><span class="line">Long   long</span><br><span class="line">Byte       byte</span><br><span class="line">String   string</span><br><span class="line">-----------------------------</span><br><span class="line">int/integer   _int/_integer</span><br><span class="line">long  _long</span><br><span class="line">......</span><br><span class="line">-----------------------------</span><br><span class="line">Listlist</span><br><span class="line">Mapmap</span><br><span class="line">ArrayListarrayList</span><br><span class="line">数组  array</span><br><span class="line">HashMaphashMap</span><br></pre></td></tr></table></figure><h4 id="3-5-2-自定义别名"><a href="#3-5-2-自定义别名" class="headerlink" title="3.5.2 自定义别名"></a>3.5.2 自定义别名</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">1.单个自定义别名</span><br><span class="line">   &lt;typeAliases&gt;</span><br><span class="line">        &lt;typeAlias type=&quot;com.xja.pojo.Student&quot; alias=&quot;student&quot;/&gt;</span><br><span class="line">    &lt;/typeAliases&gt;</span><br><span class="line">2.批量自定义别名</span><br><span class="line">   &lt;typeAliases&gt;</span><br><span class="line">        &lt;package name=&quot;com.xja.pojo&quot;/&gt;</span><br><span class="line">    &lt;/typeAliases&gt;</span><br><span class="line">上述配置就是批量设置实体类的别名。配置完成后Mybatis会自动扫描对应的包，给包下所有的类都设置别名。</span><br><span class="line">批量的别名就是类名(字母大小写都能识别)</span><br></pre></td></tr></table></figure><h3 id="3-6-typeHandlers"><a href="#3-6-typeHandlers" class="headerlink" title="3.6  typeHandlers"></a>3.6  typeHandlers</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">作用:Mybatis使用typeHandler完成数据库数据和Java实体类之间的相互转换。但是实际开发中大概率不需要配置，因为Mybatis自身提供的typeHandlers已经足够满足开发需要、</span><br><span class="line">默认的类型转换器如下:</span><br><span class="line">https://blog.csdn.net/hay23455/article/details/135058232</span><br></pre></td></tr></table></figure><h3 id="3-7-mappers"><a href="#3-7-mappers" class="headerlink" title="3.7 mappers"></a>3.7 mappers</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1.加载单个mapper映射文件</span><br><span class="line">&lt;mappers&gt;</span><br><span class="line">&lt;mapper resources = &quot;映射文件路径&quot;/&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br><span class="line">2.批量加载mapper映射文件</span><br><span class="line">&lt;mappers&gt;</span><br><span class="line">&lt;package name = &quot;包名&quot;/&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure><h2 id="4-动态SQL"><a href="#4-动态SQL" class="headerlink" title="4.动态SQL"></a>4.动态SQL</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mybatis中使用表达式进行判断用于灵活的组件和拼接sql(一个statement根据传递过来的参数不同可以产生不同的运行sql)。</span><br></pre></td></tr></table></figure><h3 id="4-1-where-if"><a href="#4-1-where-if" class="headerlink" title="4.1 where if"></a>4.1 where if</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=&quot;findByCondition&quot; parameterType=&quot;student&quot; resultType=&quot;student&quot;&gt;</span><br><span class="line">        select * from t_student</span><br><span class="line">            &lt;where&gt;</span><br><span class="line">                &lt;if test=&quot;studentName != null and studentName !=&#x27;&#x27;&quot;&gt;</span><br><span class="line">                    student_name like &#x27;%$&#123;studentName&#125;%&#x27;</span><br><span class="line">                &lt;/if&gt;</span><br><span class="line">                &lt;if test=&quot;studentGender != null and studentGender != &#x27;&#x27;&quot;&gt;</span><br><span class="line">                    and student_gender = #&#123;studentGender&#125;</span><br><span class="line">                &lt;/if&gt;</span><br><span class="line">            &lt;/where&gt;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line"></span><br><span class="line">List&lt;Student&gt; findByCondition(Student student);</span><br><span class="line">or</span><br><span class="line">List&lt;Student&gt; findByCondition(HashMap&lt;String,String&gt; map);</span><br><span class="line"></span><br><span class="line">PS：where有两个特性</span><br><span class="line">1.当where标签内所有的if都不成立的时候，where也不会出现在sql中</span><br><span class="line">2.where会删除紧跟着的第一个and/or关键字</span><br></pre></td></tr></table></figure><h3 id="4-2-sql片段"><a href="#4-2-sql片段" class="headerlink" title="4.2 sql片段"></a>4.2 sql片段</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">将sql语句中一部分(复用性比较高)抽离出来做成一个sql片段。其他statement如果需要这段sql直接引入此sql片段即可。无需重写编写sql。降低了sql的冗余提高可开发效率</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1.定义sql片段</span><br><span class="line">&lt;sql id=&quot;baseSelect&quot;&gt;</span><br><span class="line">select student_id,student_name,student_gender,student_age,student_birthday from t_student</span><br><span class="line">&lt;/sql&gt;</span><br><span class="line">2.使用sql片段</span><br><span class="line">&lt;select id=&quot;findById&quot; parameterType=&quot;_int&quot;  resultType=&quot;STUDENT&quot;&gt;</span><br><span class="line">    &lt;include refid=&quot;baseSelect&quot;/&gt;</span><br><span class="line">    where student_id = #&#123;studentId&#125;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><h3 id="4-3-foreach"><a href="#4-3-foreach" class="headerlink" title="4.3 foreach"></a>4.3 foreach</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">需求:查询学生编号为1,3,5的信息(每次查询传递的ID个数是不固定)</span><br><span class="line">方案1: select * from t_student where student_id in (1,3,5)</span><br><span class="line">1)编写映射文件</span><br><span class="line">&lt;select id=&quot;findByIds&quot; parameterType=&quot;list&quot; resultType=&quot;student&quot;&gt;</span><br><span class="line">        &lt;include refid=&quot;baseSelect&quot;/&gt;</span><br><span class="line">        &lt;where&gt;</span><br><span class="line">            &lt;if test=&quot;list!=null and list.size() !=0&quot;&gt;</span><br><span class="line">                &lt;!--</span><br><span class="line">                    foreach属性讲解:</span><br><span class="line">                        collection:需要遍历的对象</span><br><span class="line">                        item：每次遍历出来的元素</span><br><span class="line">                        open:开始遍历之前需要拼接的值</span><br><span class="line">                        close:遍历结束之后需要拼接的值</span><br><span class="line">                        separator:每两次遍历之间需要拼接的值</span><br><span class="line">                --&gt;</span><br><span class="line">                &lt;foreach collection=&quot;list&quot; item=&quot;id&quot; open=&quot;student_id in (&quot; close=&quot;)&quot; separator=&quot;,&quot;&gt;</span><br><span class="line">                    #&#123;id&#125;</span><br><span class="line">                &lt;/foreach&gt;</span><br><span class="line">            &lt;/if&gt;</span><br><span class="line">        &lt;/where&gt;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">2)接口方法</span><br><span class="line">List&lt;Student&gt; findByIds(List&lt;Integer&gt; ids);</span><br><span class="line"></span><br><span class="line">方案2: select * from t_student where student_id =1 or student_id =7 or student_id =8</span><br><span class="line">1)编写映射文件</span><br><span class="line">&lt;select id=&quot;findByIds&quot; parameterType=&quot;list&quot; resultType=&quot;student&quot;&gt;</span><br><span class="line">        &lt;include refid=&quot;baseSelect&quot;/&gt;</span><br><span class="line">        &lt;where&gt;</span><br><span class="line">            &lt;if test=&quot;list!=null and list.size() !=0&quot;&gt;</span><br><span class="line">                &lt;foreach collection=&quot;list&quot; item=&quot;id&quot; separator=&quot;or&quot;&gt;</span><br><span class="line">                    student_id = #&#123;id&#125;</span><br><span class="line">                &lt;/foreach&gt;</span><br><span class="line">            &lt;/if&gt;</span><br><span class="line">        &lt;/where&gt;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">2)接口方法</span><br><span class="line">List&lt;Student&gt; findByIds(List&lt;Integer&gt; ids);</span><br></pre></td></tr></table></figure><h3 id="4-4-set"><a href="#4-4-set" class="headerlink" title="4.4 set"></a>4.4 set</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">//需求:根据参数进行修改</span><br><span class="line">&lt;update id=&quot;updateById&quot; parameterType=&quot;student&quot;&gt;</span><br><span class="line">        update t_student</span><br><span class="line">        &lt;set&gt;</span><br><span class="line">            &lt;if test=&quot;studentName!=null and studentName!=&#x27;&#x27;&quot;&gt;</span><br><span class="line">                student_name = #&#123;studentName&#125;,</span><br><span class="line">            &lt;/if&gt;</span><br><span class="line">            &lt;if test=&quot;studentGender!=null and studentGender!=&#x27;&#x27;&quot;&gt;</span><br><span class="line">                student_gender = #&#123;studentGender&#125;,</span><br><span class="line">            &lt;/if&gt;</span><br><span class="line">            &lt;if test=&quot;studentAge!=null and studentAge&gt;0&quot;&gt;</span><br><span class="line">                student_age = #&#123;studentAge&#125;,</span><br><span class="line">            &lt;/if&gt;</span><br><span class="line">            &lt;if test=&quot;studentBirthday!=null&quot;&gt;</span><br><span class="line">                student_birthday = #&#123;studentBirthday&#125;,</span><br><span class="line">            &lt;/if&gt;</span><br><span class="line">        &lt;/set&gt;</span><br><span class="line">          where student_id = #&#123;studentId&#125;</span><br><span class="line">    &lt;/update&gt;</span><br><span class="line">PS：</span><br><span class="line">1.set标签会去除修改语句的最后一个逗号</span><br><span class="line">2.Java实体类关于时间类型可以使用String，数据库可以使用Date，mybatis会自动转换</span><br></pre></td></tr></table></figure><h3 id="4-5-trim"><a href="#4-5-trim" class="headerlink" title="4.5 trim"></a>4.5 trim</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">trim用于替代where和set的功能</span><br><span class="line"></span><br><span class="line">1.替代where</span><br><span class="line">&lt;trim prefix=&quot;where&quot; prefixOverrides=&quot;AND|OR&quot;&gt;</span><br><span class="line">2.替代set</span><br><span class="line">&lt;trim prefix=&quot;set&quot; suffixOverrides=&quot;,&quot;&gt;</span><br></pre></td></tr></table></figure><h3 id="4-6-paramter"><a href="#4-6-paramter" class="headerlink" title="4.6 _paramter"></a>4.6 _paramter</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=&quot;findById&quot; parameterType=&quot;_int&quot;  resultType=&quot;STUDENT&quot;&gt;</span><br><span class="line">        &lt;include refid=&quot;baseSelect&quot;/&gt;</span><br><span class="line">         &lt;where&gt;</span><br><span class="line">             &lt;if test=&quot;_parameter !=null and _parameter!=&#x27;&#x27;&quot;&gt;</span><br><span class="line">                 student_id = #&#123;studentId&#125;</span><br><span class="line">             &lt;/if&gt;</span><br><span class="line">         &lt;/where&gt;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line"></span><br><span class="line">如果传入的参数是基本数据类型以及其包装类或者String的时候，并且需要对其进行if判断，传入任何参数都可以。但是为了符合官方的规范可以使用_parameter。</span><br></pre></td></tr></table></figure><h2 id="5-主键回填策略"><a href="#5-主键回填策略" class="headerlink" title="5.主键回填策略"></a>5.主键回填策略</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">使用mybatis新增一条数据的时候，如果数据库设置了主键的自增，在mybatis执行新增操作完毕偶把新增的主键值赋值到Java对象中的过程称之为主键回填策略</span><br></pre></td></tr></table></figure><h3 id="5-1-主键回填策略1"><a href="#5-1-主键回填策略1" class="headerlink" title="5.1 主键回填策略1"></a>5.1 主键回填策略1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;insert id=&quot;addStudent&quot; parameterType=&quot;student&quot; useGeneratedKeys=&quot;true&quot; keyColumn=&quot;student_id&quot; keyProperty=&quot;studentId&quot;&gt;</span><br><span class="line">    insert into t_student</span><br><span class="line">    values (0,#&#123;studentName&#125;,#&#123;studentGender&#125;,#&#123;studentAge&#125;,#&#123;studentBirthday&#125;)</span><br><span class="line">&lt;/insert&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="5-2-主键回填策略2"><a href="#5-2-主键回填策略2" class="headerlink" title="5.2 主键回填策略2"></a>5.2 主键回填策略2</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;insert id=&quot;addStudent&quot; parameterType=&quot;student&quot;&gt;</span><br><span class="line">    &lt;selectKey keyProperty=&quot;studentId&quot;  keyColumn=&quot;student_id&quot; resultType=&quot;int&quot;&gt;</span><br><span class="line">        select last_insert_id()</span><br><span class="line">    &lt;/selectKey&gt;</span><br><span class="line">    insert into t_student</span><br><span class="line">    values (0,#&#123;studentName&#125;,#&#123;studentGender&#125;,#&#123;studentAge&#125;,#&#123;studentBirthday&#125;)</span><br><span class="line">&lt;/insert&gt;</span><br></pre></td></tr></table></figure><h2 id="6-parameterType和resultType和resultMap"><a href="#6-parameterType和resultType和resultMap" class="headerlink" title="6.parameterType和resultType和resultMap"></a>6.parameterType和resultType和resultMap</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">parameterType:statement输入数据的数据类型</span><br><span class="line">resultType:statement输出数据的数据类型(可以直接映射到Java实体类上)</span><br><span class="line">resultMap:statement输出数据的数据类型(无法直接映射，手动编写ResultMap进行映射)</span><br></pre></td></tr></table></figure><h3 id="6-1-parameterType-HashMap"><a href="#6-1-parameterType-HashMap" class="headerlink" title="6.1 parameterType-HashMap"></a>6.1 parameterType-HashMap</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findByAgeAndGender&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;baseSelect&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;sex!=null and sex!=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">            and student_gender = #&#123;sex&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;age!=null and age&gt;0&quot;</span>&gt;</span></span><br><span class="line">            and student_age = #&#123;age&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">总结：实际开发中如果statement需要多个参数并且这些参数来自于不同的pojo类中那么就可以使用HashMap进行输入参数</span><br></pre></td></tr></table></figure><h3 id="6-2-parameterType-List"><a href="#6-2-parameterType-List" class="headerlink" title="6.2 parameterType-List"></a>6.2 parameterType-List</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findByIds&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;list&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;baseSelect&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;list!=null and list.size() !=0&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;list&quot;</span> <span class="attr">item</span>=<span class="string">&quot;id&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;or&quot;</span>&gt;</span></span><br><span class="line">                student_id = #&#123;id&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">总结：如果statement中需要多个同类型的数据(多个ID，多个Name)那么可以使用List进行输入参数，但是List在if和foreach中使用只能使用list表示</span><br></pre></td></tr></table></figure><h3 id="6-3-Param"><a href="#6-3-Param" class="headerlink" title="6.3 @Param"></a>6.3 @Param</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">作用:解决一个statement的多个输入参数问题,一个statement默认只能接收一个参数。</span><br><span class="line">1.编写接口中的方法</span><br><span class="line">List&lt;Student&gt; findByAgeAndGender(@Param(value = &quot;gender&quot;) String sex,@Param(value = &quot;age&quot;) Integer age);</span><br><span class="line">2.编写statement</span><br><span class="line">&lt;select id=&quot;findByAgeAndGender&quot; resultType=&quot;student&quot;&gt;</span><br><span class="line">        &lt;include refid=&quot;baseSelect&quot;&gt;&lt;/include&gt;</span><br><span class="line">        &lt;where&gt;</span><br><span class="line">            &lt;if test=&quot;gender!=null and gender!=&#x27;&#x27;&quot;&gt;</span><br><span class="line">                and student_gender = #&#123;gender&#125;</span><br><span class="line">            &lt;/if&gt;</span><br><span class="line">            &lt;if test=&quot;age!=null and age&gt;0&quot;&gt;</span><br><span class="line">                and student_age = #&#123;age&#125;</span><br><span class="line">            &lt;/if&gt;</span><br><span class="line">        &lt;/where&gt;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">    </span><br><span class="line">PS：使用@Param()注解后，statement就不再需要配置parameterType属性</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">关于statement的输入参数的总结:</span><br><span class="line">1.默认情况下statement只能接收一个参数，所以只能配置一个参数类型。</span><br><span class="line">2.如果statement的输入参数有多个可以使用以下几种方案</span><br><span class="line">2.1 实体类:多个参数属于同一个实体类</span><br><span class="line">2.2 Map:多个参数不属于同一个实体类</span><br><span class="line">2.3 List:多个相同类型和相同字段值的数据</span><br><span class="line">2.4 @Param注解:多个参数不属于同一个实体类并且参数不大于5使用。</span><br></pre></td></tr></table></figure><h3 id="6-4-resultType和resultMap"><a href="#6-4-resultType和resultMap" class="headerlink" title="6.4 resultType和resultMap"></a>6.4 resultType和resultMap</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">作用:设置statement返回的结果集最终要映射的Java实体类类型。</span><br><span class="line">1.结果集的列名和Java实体类的属性名完全一致，那么就可以使用resultType完成直接映射(基本不会出现这种情况，因为在实际开发中数据库的列名和Java实体类属性名的设计规范是相悖的。)</span><br><span class="line">2.结果集的列名和Java实体类的属性名符合驼峰映射，那么在配置文件中开启了驼峰映射后可以用于直接映射(可以解决设计规范造成的无法直接映射)</span><br><span class="line">    &lt;settings&gt;</span><br><span class="line">    &lt;!--开启驼峰映射--&gt;</span><br><span class="line">        &lt;setting name=&quot;mapUnderscoreToCamelCase&quot; value=&quot;true&quot;/&gt;</span><br><span class="line">    &lt;/settings&gt;</span><br><span class="line"></span><br><span class="line">3.别名解决方案(可以解决设计规范造成的无法直接映射)</span><br><span class="line">&lt;select id=&quot;findAll&quot; resultType=&quot;student&quot;&gt;</span><br><span class="line">select student_id as studentId , setudent_name as studentName from t_student</span><br><span class="line">&lt;/select&gt;</span><br><span class="line"></span><br><span class="line">4.resultMap</span><br><span class="line">1)编写resultMap</span><br><span class="line">&lt;!--resultMap的属性</span><br><span class="line">id:resultMap的唯一标识</span><br><span class="line">type:最终要映射的Java实体类类型</span><br><span class="line">--&gt;</span><br><span class="line">&lt;resultMap id=&quot;baseResultMap&quot; type=&quot;com.xja.pojo.Student&quot;&gt;</span><br><span class="line">&lt;!--内部字段的映射分为三种</span><br><span class="line">1.主键映射:使用id标签进行映射</span><br><span class="line">2.普通字段映射:使用result标签进行映射</span><br><span class="line">3.关联关系映射:后续讲</span><br><span class="line">id和result标签的属性:</span><br><span class="line">column:结果集的列名</span><br><span class="line">property:Java实体类的属性名</span><br><span class="line">jdbcType:结果集列名的类型</span><br><span class="line">javaType:Java实体类中属性的类型</span><br><span class="line">typeHandler:指定本次映射的转换器</span><br><span class="line">--&gt;</span><br><span class="line">        &lt;id property=&quot;studentId&quot; column=&quot;student_id&quot;/&gt;</span><br><span class="line">        &lt;result property=&quot;studentName&quot; column=&quot;student_name&quot;/&gt;</span><br><span class="line">        &lt;result property=&quot;studentGender&quot; column=&quot;student_gender&quot;/&gt;</span><br><span class="line">        &lt;result property=&quot;studentAge&quot; column=&quot;student_age&quot;/&gt;</span><br><span class="line">        &lt;result property=&quot;studentBirthday&quot; column=&quot;student_birthday&quot;/&gt;</span><br><span class="line">    &lt;/resultMap&gt;</span><br><span class="line">2)使用resultMap</span><br><span class="line">&lt;select id=&quot;findAll&quot; resultMap=&quot;baseResultMap&quot;&gt;</span><br><span class="line">select * from t_student</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><h2 id="7-分页"><a href="#7-分页" class="headerlink" title="7.分页"></a>7.分页</h2><h3 id="7-1-分页的分类"><a href="#7-1-分页的分类" class="headerlink" title="7.1 分页的分类"></a>7.1 分页的分类</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1.手动分页使用limit。但是页面中需要的数据较多(总页数，总条数..)所以需要再手动编写分页工具类</span><br><span class="line">2.使用开源的分页插件</span><br></pre></td></tr></table></figure><h3 id="7-2-引用依赖"><a href="#7-2-引用依赖" class="headerlink" title="7.2 引用依赖"></a>7.2 引用依赖</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.github.pagehelper&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;pagehelper&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;5.1.4&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h3 id="7-3-配置分页插件"><a href="#7-3-配置分页插件" class="headerlink" title="7.3 配置分页插件"></a>7.3 配置分页插件</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-配置分页插件(mybatis的配置文件)--&gt;</span><br><span class="line">&lt;plugins&gt;</span><br><span class="line">    &lt;plugin interceptor=&quot;com.github.pagehelper.PageInterceptor&quot;&gt;&lt;/plugin&gt;</span><br><span class="line">&lt;/plugins&gt;</span><br></pre></td></tr></table></figure><h3 id="7-4-使用分页插件"><a href="#7-4-使用分页插件" class="headerlink" title="7.4 使用分页插件"></a>7.4 使用分页插件</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">public void method01() &#123;</span><br><span class="line">     //设置本次分页</span><br><span class="line">     PageHelper.startPage(0,3);</span><br><span class="line">     List&lt;Student&gt; list = mapper.findAll(); //查询所有</span><br><span class="line">     PageInfo&lt;Student&gt; pageInfo = new PageInfo&lt;&gt;(list);</span><br><span class="line">     //总条数</span><br><span class="line">     System.out.println(pageInfo.getTotal());</span><br><span class="line">     //总页数</span><br><span class="line">     System.out.println(pageInfo.getPages());</span><br><span class="line">     //当前页</span><br><span class="line">     System.out.println(pageInfo.getPageNum());</span><br><span class="line">     //每页大小</span><br><span class="line">     System.out.println(pageInfo.getPageSize());</span><br><span class="line">     //当前页数据数量</span><br><span class="line">     System.out.println(pageInfo.getSize());</span><br><span class="line">     //上一页</span><br><span class="line">     System.out.println(pageInfo.getPrePage());</span><br><span class="line">     //下一页</span><br><span class="line">     System.out.println(pageInfo.getNextPage());</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="8-多表操作"><a href="#8-多表操作" class="headerlink" title="8.多表操作"></a>8.多表操作</h2><h3 id="8-1-一对一"><a href="#8-1-一对一" class="headerlink" title="8.1 一对一"></a>8.1 一对一</h3><h4 id="8-1-1-方式一"><a href="#8-1-1-方式一" class="headerlink" title="8.1.1 方式一"></a>8.1.1 方式一</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">需求:查询学生信息以及对应的身份证信息</span><br><span class="line">1.编写实体类</span><br><span class="line">public class Student&#123;</span><br><span class="line">    private Integer studentId;</span><br><span class="line">    private String studentName;</span><br><span class="line">    private String studentGender;</span><br><span class="line">    private Integer studentAge;</span><br><span class="line">    private String studentBirthday;</span><br><span class="line">    private Card card;</span><br><span class="line">&#125;</span><br><span class="line">public class Card &#123;</span><br><span class="line">    private Integer cardId;</span><br><span class="line">    private String cardNum;</span><br><span class="line">    private String cardHometown;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">2.编写映射文件</span><br><span class="line"> &lt;resultMap id=&quot;baseResultMap&quot; type=&quot;com.lxk.pojo.Student&quot;&gt;</span><br><span class="line">        &lt;id property=&quot;studentId&quot; column=&quot;student_id&quot;/&gt;</span><br><span class="line">        &lt;result property=&quot;studentName&quot; column=&quot;student_name&quot;/&gt;</span><br><span class="line">        &lt;result property=&quot;studentGender&quot; column=&quot;student_gender&quot;/&gt;</span><br><span class="line">        &lt;result property=&quot;studentAge&quot; column=&quot;student_age&quot;/&gt;</span><br><span class="line">        &lt;result property=&quot;studentBirthday&quot; column=&quot;student_birthday&quot;/&gt;</span><br><span class="line">    &lt;/resultMap&gt;</span><br><span class="line">    &lt;resultMap id=&quot;studentAndCardResultMap&quot; type=&quot;com.lxk.pojo.Student&quot; extends=&quot;baseResultMap&quot;&gt;</span><br><span class="line">        &lt;!--继承了Student表本身数据的映射，此处只需要配置card的映射即可--&gt;</span><br><span class="line">        &lt;!--association用于一对一关系的映射--&gt;</span><br><span class="line">        &lt;association property=&quot;card&quot; javaType=&quot;com.lxk.pojo.Card&quot;&gt;</span><br><span class="line">            &lt;id property=&quot;cardId&quot; column=&quot;card_id&quot;/&gt;</span><br><span class="line">            &lt;result property=&quot;cardNum&quot; column=&quot;card_num&quot;/&gt;</span><br><span class="line">            &lt;result property=&quot;cardHometown&quot; column=&quot;card_hometown&quot;/&gt;</span><br><span class="line">        &lt;/association&gt;</span><br><span class="line">    &lt;/resultMap&gt;</span><br><span class="line"></span><br><span class="line">    &lt;select id=&quot;findAllStudentAndCardInfo&quot; resultMap=&quot;studentAndCardResultMap&quot;&gt;</span><br><span class="line">        select stu.*,cd.card_num,cd.card_hometown from t_student stu left join t_card cd on stu.card_id = cd.card_id</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">3.编写接口方法</span><br><span class="line">public interface StudentMapper &#123;</span><br><span class="line">    List&lt;Student&gt; findAllStudentAndCardInfo();</span><br><span class="line">&#125;</span><br><span class="line">4.测试</span><br></pre></td></tr></table></figure><h4 id="8-1-2-方式二"><a href="#8-1-2-方式二" class="headerlink" title="8.1.2 方式二"></a>8.1.2 方式二</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">1.编写主表代码</span><br><span class="line">1.1 接口</span><br><span class="line">public interface CardMapper &#123;</span><br><span class="line">    Card findById(Integer cardId);</span><br><span class="line">&#125;</span><br><span class="line">1.2 映射文件</span><br><span class="line">&lt;mapper namespace=&quot;com.lxk.mapper.CardMapper&quot;&gt;</span><br><span class="line">    &lt;resultMap id=&quot;baseResultMap&quot; type=&quot;com.lxk.pojo.Card&quot;&gt;</span><br><span class="line">        &lt;id property=&quot;cardId&quot; column=&quot;card_id&quot;/&gt;</span><br><span class="line">        &lt;result property=&quot;cardNum&quot; column=&quot;card_num&quot;/&gt;</span><br><span class="line">        &lt;result property=&quot;cardHometown&quot; column=&quot;card_hometown&quot;/&gt;</span><br><span class="line">    &lt;/resultMap&gt;</span><br><span class="line">    &lt;select id=&quot;findById&quot; parameterType=&quot;int&quot; resultMap=&quot;baseResultMap&quot;&gt;</span><br><span class="line">        select * from t_card where card_id = #&#123;cardId&#125;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br><span class="line">2. 编写从表代码</span><br><span class="line">2.1 编写接口</span><br><span class="line">public interface StudentMapper &#123;</span><br><span class="line">    List&lt;Student&gt; findAll();</span><br><span class="line">&#125;</span><br><span class="line">2.2 映射文件</span><br><span class="line">&lt;resultMap id=&quot;studentAndCardResultMap2&quot; type=&quot;com.lxk.pojo.Student&quot; extends=&quot;baseResultMap&quot;&gt;</span><br><span class="line">&lt;association property=&quot;card&quot; javaType=&quot;com.lxk.pojo.Card&quot; select=&quot;com.lxk.mapper.CardMapper.findById&quot; column=&quot;card_id&quot;&gt;&lt;/association&gt;</span><br><span class="line">&lt;/resultMap&gt;</span><br><span class="line"></span><br><span class="line">&lt;select id=&quot;findAll&quot; resultMap=&quot;studentAndCardResultMap2&quot;&gt;</span><br><span class="line">select * from t_student</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><h4 id="8-1-3-两种方式的区别"><a href="#8-1-3-两种方式的区别" class="headerlink" title="8.1.3 两种方式的区别"></a>8.1.3 两种方式的区别</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">查询次数:</span><br><span class="line">方式一一次性查询多表的数据</span><br><span class="line">方式二是查询单表的数据，然后根据配置的关联关系进行二次单独查询</span><br><span class="line">延迟加载:</span><br><span class="line">延迟加载：也称之为懒加载，惰性加载。使用此加载方式在也定业务场景下提高效率</span><br><span class="line">方式一是不支持延迟加载</span><br><span class="line">方式二支持。</span><br><span class="line"></span><br><span class="line">开启延迟加载(mybatis运行配置文件):</span><br><span class="line">&lt;settings&gt;</span><br><span class="line">&lt;setting name=&quot;lazyLoadingEnabled&quot; value=&quot;true&quot;/&gt;</span><br><span class="line">&lt;/settings&gt;</span><br></pre></td></tr></table></figure><h3 id="8-2-一对多"><a href="#8-2-一对多" class="headerlink" title="8.2 一对多"></a>8.2 一对多</h3><h4 id="8-2-1-方式一"><a href="#8-2-1-方式一" class="headerlink" title="8.2.1 方式一"></a>8.2.1 方式一</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">1.实体类编写</span><br><span class="line">public class Student&#123;</span><br><span class="line">    ...</span><br><span class="line">    private List&lt;Score&gt; scores;</span><br><span class="line">&#125;</span><br><span class="line">2.接口方法</span><br><span class="line">public interface StudentMapper &#123;</span><br><span class="line">    List&lt;Student&gt; findStudentAndScore();</span><br><span class="line">&#125;</span><br><span class="line">3.映射文件</span><br><span class="line">&lt;resultMap id=&quot;studentAndScoreResultMap&quot; type=&quot;com.lxk.pojo.Student&quot; extends=&quot;baseResultMap&quot;&gt;</span><br><span class="line">        &lt;collection property=&quot;scores&quot; ofType=&quot;com.lxk.pojo.Score&quot;&gt;</span><br><span class="line">            &lt;id property=&quot;scoreId&quot; column=&quot;score_id&quot;/&gt;</span><br><span class="line">            &lt;result property=&quot;scoreSubject&quot; column=&quot;score_subject&quot;/&gt;</span><br><span class="line">            &lt;result property=&quot;scoreNum&quot; column=&quot;score_num&quot;/&gt;</span><br><span class="line">        &lt;/collection&gt;</span><br><span class="line">    &lt;/resultMap&gt;</span><br><span class="line">    &lt;select id=&quot;findStudentAndScore&quot; resultMap=&quot;studentAndScoreResultMap&quot;&gt;</span><br><span class="line">        select * from t_student stu LEFT JOIN t_score ts on stu.student_id=ts.student_id</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">4.测试1:正常的查询所有数据 显示正常</span><br><span class="line">public void method03() &#123; </span><br><span class="line">        List&lt;Student&gt; list = mapper.findStudentAndScore();</span><br><span class="line">        for (Student student : list) &#123;</span><br><span class="line">            System.out.println(student);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">5.测试2:分页查询，页码和总条数错乱</span><br><span class="line">    public void method03() &#123;</span><br><span class="line">        PageHelper.startPage(1,2);</span><br><span class="line">        List&lt;Student&gt; list = mapper.findStudentAndScore();</span><br><span class="line"></span><br><span class="line">        PageInfo&lt;Student&gt; pageInfo = new PageInfo&lt;&gt;(list);</span><br><span class="line">        System.out.println(pageInfo.getTotal());</span><br><span class="line">        System.out.println(pageInfo.getPages());</span><br><span class="line">        List&lt;Student&gt; list1 = pageInfo.getList();</span><br><span class="line">        for (Student student : list1) &#123;</span><br><span class="line">            System.out.println(student);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">原因:mybatis会把查询出来的多条数据通过映射关系合并成一条数据。(可能两表联查出来5条数据结果集，最终mybatis可能合并成2或者3条都有可能。)。但是分页的总条数和页码是根据查询结果集的计算的、</span><br></pre></td></tr></table></figure><h4 id="8-2-2-方式二"><a href="#8-2-2-方式二" class="headerlink" title="8.2.2 方式二"></a>8.2.2 方式二</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">1.编写从表接口</span><br><span class="line">public interface ScoreMapper &#123;</span><br><span class="line">    //根据学生ID查询成绩集合</span><br><span class="line">    List&lt;Score&gt; findByStudentId(Integer studentId);</span><br><span class="line">&#125;</span><br><span class="line">2.编写从表的映射文件</span><br><span class="line">&lt;mapper namespace=&quot;com.lxk.mapper.ScoreMapper&quot;&gt;</span><br><span class="line">    &lt;resultMap id=&quot;baseResultMapper&quot; type=&quot;com.lxk.pojo.Score&quot;&gt;</span><br><span class="line">        &lt;id property=&quot;scoreId&quot; column=&quot;score_id&quot;/&gt;</span><br><span class="line">        &lt;result property=&quot;scoreSubject&quot; column=&quot;score_subject&quot;/&gt;</span><br><span class="line">        &lt;result property=&quot;scoreNum&quot; column=&quot;score_num&quot;/&gt;</span><br><span class="line">    &lt;/resultMap&gt;</span><br><span class="line">    &lt;select id=&quot;findByStudentId&quot; parameterType=&quot;int&quot; resultMap=&quot;baseResultMapper&quot;&gt;</span><br><span class="line">        select * from t_score where student_id = #&#123;id&#125;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br><span class="line">3.编写主表的接口</span><br><span class="line">public interface StudentMapper &#123;</span><br><span class="line">    List&lt;Student&gt; findStudentAndScore();</span><br><span class="line">&#125;</span><br><span class="line">4.编写主表的映射文件</span><br><span class="line">&lt;resultMap id=&quot;studentAndScoreResultMap&quot; type=&quot;com.lxk.pojo.Student&quot; extends=&quot;baseResultMap&quot;&gt;</span><br><span class="line">        &lt;collection property=&quot;scores&quot; ofType=&quot;com.lxk.pojo.Score&quot; column=&quot;student_id&quot; select=&quot;com.lxk.mapper.ScoreMapper.findByStudentId&quot;&gt;&lt;/collection&gt;</span><br><span class="line">    &lt;/resultMap&gt;</span><br><span class="line">    &lt;select id=&quot;findStudentAndScore&quot; resultMap=&quot;studentAndScoreResultMap&quot;&gt;</span><br><span class="line">        select * from t_student</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">5.测试</span><br><span class="line"> public void method05() &#123;</span><br><span class="line">        PageHelper.startPage(1,2);</span><br><span class="line">        List&lt;Student&gt; list = mapper.findStudentAndScore();</span><br><span class="line">        PageInfo&lt;Student&gt; pageInfo = new PageInfo&lt;&gt;(list);</span><br><span class="line">        System.out.println(pageInfo.getTotal());</span><br><span class="line">        System.out.println(pageInfo.getPages());</span><br><span class="line">        List&lt;Student&gt; list1 = pageInfo.getList();</span><br><span class="line">        for (Student student : list1) &#123;</span><br><span class="line">            System.out.println(student);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">和方式一的区别是:</span><br><span class="line">1.支持延迟加载</span><br><span class="line">2.支持分页插件</span><br></pre></td></tr></table></figure><h3 id="8-3-多对多"><a href="#8-3-多对多" class="headerlink" title="8.3 多对多"></a>8.3 多对多</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">多对多其实就是多个一对多。在mybatis中配置的方式和一对多一样，只不过设置的时候需要引入一个中间表(关联关系表)。</span><br><span class="line"></span><br><span class="line">1.接口方法</span><br><span class="line">List&lt;Student&gt; findStudentAndTeacher();</span><br><span class="line">2.映射文件</span><br><span class="line">&lt;resultMap id=&quot;studentAndTeacherResultMap&quot; type=&quot;com.lxk.pojo.Student&quot; extends=&quot;baseResultMap&quot;&gt;</span><br><span class="line">        &lt;collection property=&quot;teachers&quot; ofType=&quot;com.lxk.pojo.Teacher&quot;&gt;</span><br><span class="line">            &lt;id property=&quot;teacherId&quot; column=&quot;teacher_id&quot;/&gt;</span><br><span class="line">            &lt;id property=&quot;teacherName&quot; column=&quot;teacher_name&quot;/&gt;</span><br><span class="line">        &lt;/collection&gt;</span><br><span class="line">    &lt;/resultMap&gt;</span><br><span class="line">    &lt;select id=&quot;findStudentAndTeacher&quot; resultMap=&quot;studentAndTeacherResultMap&quot;&gt;</span><br><span class="line">        select stu.*,tt.* from t_student stu LEFT JOIN t_teacher_student tts on stu.student_id = tts.student_id LEFT JOIN t_teacher tt on tts.teacher_id = tt.teacher_id</span><br><span class="line">    &lt;/select&gt;</span><br></pre></td></tr></table></figure><h2 id="9-注解开发"><a href="#9-注解开发" class="headerlink" title="9.注解开发"></a>9.注解开发</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mybatis中支持纯XML开发，也支持纯注解开发。但是整体考虑一般会选择混合(XML+注解)开发</span><br><span class="line"></span><br><span class="line">前置条件 :使用注解开发可能需要xml进行补充(多表操作还是xml简单)。所以加载映射文件的时候不能使用xml方式加载。</span><br></pre></td></tr></table></figure><h3 id="9-1-单表"><a href="#9-1-单表" class="headerlink" title="9.1 单表"></a>9.1 单表</h3><h4 id="9-1-1-查询所有"><a href="#9-1-1-查询所有" class="headerlink" title="9.1.1 查询所有"></a>9.1.1 查询所有</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public interface StudentMapper &#123;</span><br><span class="line">    @Select(&quot;select * from t_student&quot;)</span><br><span class="line">    List&lt;Student&gt; findAll();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="9-1-2-条件查询"><a href="#9-1-2-条件查询" class="headerlink" title="9.1.2 条件查询"></a>9.1.2 条件查询</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">1.顺序传参</span><br><span class="line">@Select(&quot;select * from t_student where student_gender = #&#123;param1&#125; and student_age = #&#123;param2&#125;&quot;)</span><br><span class="line">List&lt;Student&gt; findByAgeAndGender(String studentGender,Integer studentAge);</span><br><span class="line">2.POJO传参</span><br><span class="line">@Select(&quot;select * from t_student where student_gender = #&#123;studentGender&#125; and student_age = #&#123;studentAge&#125;&quot;)</span><br><span class="line">List&lt;Student&gt; findByAgeAndGender2(Student student);</span><br><span class="line">3.Map传参</span><br><span class="line">@Select(&quot;select * from t_student where student_gender = #&#123;gender&#125; and student_age = #&#123;age&#125;&quot;)</span><br><span class="line">List&lt;Student&gt; findByAgeAndGender2(HashMap map);</span><br><span class="line">4.注解传参</span><br><span class="line">@Select(&quot;select * from t_student where student_gender = #&#123;gender&#125; and student_age = #&#123;age&#125;&quot;)</span><br><span class="line">List&lt;Student&gt; findByAgeAndGender2(@Param(value=&quot;gender&quot;) String gender,@Param(value=&quot;age&quot;) Integer age);</span><br></pre></td></tr></table></figure><h4 id="9-1-3-新增"><a href="#9-1-3-新增" class="headerlink" title="9.1.3 新增"></a>9.1.3 新增</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@Insert(&quot;insert into t_student values (0,#&#123;studentName&#125;,#&#123;studentGender&#125;,#&#123;studentAge&#125;,#&#123;studentBirthday&#125;)&quot;)</span><br><span class="line">void add(Student student);</span><br></pre></td></tr></table></figure><h4 id="9-1-4-修改"><a href="#9-1-4-修改" class="headerlink" title="9.1.4 修改"></a>9.1.4 修改</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@Update(&quot; update t_student set student_name = #&#123;studentName&#125;,student_gender=#&#123;studentGender&#125;,student_age=#&#123;studentAge&#125;,student_birthday=#&#123;studentBirthday&#125; where student_id = #&#123;studentId&#125;&quot;)</span><br><span class="line">void update(Student student);</span><br></pre></td></tr></table></figure><h4 id="9-1-5-删除"><a href="#9-1-5-删除" class="headerlink" title="9.1.5 删除"></a>9.1.5 删除</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@Delete(&quot;delete from t_student where student_id = #&#123;id&#125;&quot;)</span><br><span class="line">void delete(@Param(&quot;id&quot;) Integer studentId);</span><br></pre></td></tr></table></figure><h3 id="9-2-动态sql"><a href="#9-2-动态sql" class="headerlink" title="9.2 动态sql"></a>9.2 动态sql</h3><h4 id="9-2-1-脚本sql"><a href="#9-2-1-脚本sql" class="headerlink" title="9.2.1 脚本sql"></a>9.2.1 脚本sql</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">脚本sql就是将以前卸载statement中的内容写入到&lt;script&gt;标签中</span><br><span class="line"></span><br><span class="line">@Select(&quot;&lt;script&gt;select * from t_student where 1=1 &lt;if test=\&quot;age!=null and age&gt;0\&quot;&gt;and student_age = #&#123;age&#125;&lt;/if&gt;&lt;/script&gt;&quot;)</span><br><span class="line">    List&lt;Student&gt; findByAge(@Param(&quot;age&quot;)Integer studentAge);</span><br><span class="line">PS:不推荐</span><br></pre></td></tr></table></figure><h4 id="9-2-2-Java方法构建"><a href="#9-2-2-Java方法构建" class="headerlink" title="9.2.2 Java方法构建"></a>9.2.2 Java方法构建</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mybatis3中关于注解的动态sql提供四个衍生注解:</span><br><span class="line">@SelectProvider</span><br><span class="line">@InsertProvider</span><br><span class="line">@UpdateProvider</span><br><span class="line">@DeleteProvider</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">1.编写生成sql的java文件</span><br><span class="line">public class StudentMapperProvider &#123;</span><br><span class="line"></span><br><span class="line">    public String findByAge(Integer age)&#123;</span><br><span class="line">        StringBuffer sql = new StringBuffer(&quot;select * from t_student where 1=1 &quot;);</span><br><span class="line">        if(age!=null &amp;&amp; age&gt;0)&#123;</span><br><span class="line">            sql.append(&quot;and student_age = #&#123;param1&#125;&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        return sql.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">2.注解使用动态sql</span><br><span class="line">@SelectProvider(type = StudentMapperProvider.class,method = &quot;findByAge&quot;)</span><br><span class="line">List&lt;Student&gt; findByAge2(Integer studentAge);</span><br><span class="line"></span><br><span class="line">注意:如果传入的参数是单个/多个基本数据类型以及其包装类和String的时候那么#&#123;&#125;里面使用param1...(顺序传参法)，如果传入的是引用数据类型那么#&#123;&#125;就可以使用属性名</span><br><span class="line">开发中如果遇到复杂的sql还是推荐使用xml方式。</span><br></pre></td></tr></table></figure><h3 id="9-3-映射配置"><a href="#9-3-映射配置" class="headerlink" title="9.3 映射配置"></a>9.3 映射配置</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">之前在xml开发中使用resultmap标签解决结果集列名和Java对象属性名不一致问题</span><br><span class="line">现在注解开发中使用@Results和@Result进行映射</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">@Results等价于之前的resultmap标签</span><br><span class="line">@Results：</span><br><span class="line">id:唯一标识，等价于之前xml中的(&lt;resultmap id=&quot;&quot;baseResultMap&gt;)</span><br><span class="line">value：是一个数组。里面包含的是@Result(等价于之前的&lt;result&gt;标签)注解</span><br><span class="line">@Result：</span><br><span class="line">id：设置当前@Result配置的映射是否为主键。等价于之前的&lt;id&gt;标签</span><br><span class="line">column:查询结果集的列名</span><br><span class="line">property：映射的Java对象的属性名</span><br><span class="line">    javaType:和之前&lt;result&gt;标签中的属性同义</span><br><span class="line">    jdbcType:和之前&lt;result&gt;标签中的属性同义</span><br><span class="line">typeHandler:和之前&lt;result&gt;标签中的属性同义</span><br><span class="line">one:此属性的值必须是@One注解，等价于xml中的一对一的映射配置</span><br><span class="line">many:此属性的值必须是@Many注解，等价于xml中的一对多的映射配置</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>编写映射配置并且使用</span><br><span class="line"><span class="meta">@Select(&quot;select * from t_student&quot;)</span></span><br><span class="line"><span class="meta">@Results(</span></span><br><span class="line"><span class="meta">    id = &quot;studentResultMap&quot;,</span></span><br><span class="line"><span class="meta">    value = &#123;</span></span><br><span class="line"><span class="meta">        @Result(</span></span><br><span class="line"><span class="meta">            id=true,column = &quot;student_id&quot;,property = &quot;studentId&quot;</span></span><br><span class="line"><span class="meta">        ),</span></span><br><span class="line"><span class="meta">        @Result(</span></span><br><span class="line"><span class="meta">            column = &quot;student_name&quot;,property = &quot;studentName&quot;</span></span><br><span class="line"><span class="meta">        ),</span></span><br><span class="line"><span class="meta">        @Result(</span></span><br><span class="line"><span class="meta">            column = &quot;student_gender&quot;,property = &quot;studentGender&quot;</span></span><br><span class="line"><span class="meta">        ),</span></span><br><span class="line"><span class="meta">        @Result(</span></span><br><span class="line"><span class="meta">            column = &quot;student_age&quot;,property = &quot;studentAge&quot;</span></span><br><span class="line"><span class="meta">        ),</span></span><br><span class="line"><span class="meta">        @Result(</span></span><br><span class="line"><span class="meta">            column = &quot;student_birthday&quot;,property = &quot;studentBirthday&quot;</span></span><br><span class="line"><span class="meta">        )</span></span><br><span class="line"><span class="meta">    &#125;</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line">List&lt;Student&gt; <span class="title function_">findAll</span><span class="params">()</span>;</span><br><span class="line"><span class="number">2.</span>复用:在上述案例的基础上，如果其他方法也需要此映射配置那么可以使用<span class="meta">@ResultMap</span>注解进行引用</span><br><span class="line"></span><br><span class="line"><span class="meta">@Select(&quot;select * from t_student where student_gender = #&#123;param1&#125; and student_age = #&#123;param2&#125;&quot;)</span></span><br><span class="line"><span class="meta">@ResultMap(&quot;studentResultMap&quot;)</span></span><br><span class="line">List&lt;Student&gt; <span class="title function_">findByAgeAndGender</span><span class="params">(String studentGender,Integer studentAge)</span>;</span><br></pre></td></tr></table></figure><h3 id="9-4-多表操作"><a href="#9-4-多表操作" class="headerlink" title="9.4 多表操作"></a>9.4 多表操作</h3><h4 id="9-4-1-一对一"><a href="#9-4-1-一对一" class="headerlink" title="9.4.1 一对一"></a>9.4.1 一对一</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">1.一张表</span><br><span class="line">public interface CardMapper &#123;</span><br><span class="line"></span><br><span class="line">    @Select(&quot;select * from t_card where card_id = #&#123;id&#125;&quot;)</span><br><span class="line">    @Results(</span><br><span class="line">            id=&quot;cardResultMap&quot;,</span><br><span class="line">            value = &#123;</span><br><span class="line">                    @Result(</span><br><span class="line">                            id = true,column = &quot;card_id&quot;,property = &quot;cardId&quot;</span><br><span class="line">                    ),</span><br><span class="line">                    @Result(</span><br><span class="line">                            column = &quot;card_num&quot;,property = &quot;cardNum&quot;</span><br><span class="line">                    ),</span><br><span class="line">                    @Result(</span><br><span class="line">                            column = &quot;card_hometown&quot;,property = &quot;cardHometown&quot;</span><br><span class="line">                    )</span><br><span class="line">            &#125;</span><br><span class="line">    )</span><br><span class="line">    Card findById(@Param(&quot;id&quot;)Integer cardId);</span><br><span class="line">&#125;</span><br><span class="line">2.另外一张</span><br><span class="line">@Select(&quot;select * from t_student&quot;)</span><br><span class="line">    @Results(</span><br><span class="line">            id = &quot;studentAndCardResultMap&quot;,</span><br><span class="line">            value = &#123;</span><br><span class="line">                    @Result(</span><br><span class="line">                            id=true,column = &quot;student_id&quot;,property = &quot;studentId&quot;</span><br><span class="line">                    ),</span><br><span class="line">                    @Result(</span><br><span class="line">                            column = &quot;student_name&quot;,property = &quot;studentName&quot;</span><br><span class="line">                    ),</span><br><span class="line">                    @Result(</span><br><span class="line">                            column = &quot;student_gender&quot;,property = &quot;studentGender&quot;</span><br><span class="line">                    ),</span><br><span class="line">                    @Result(</span><br><span class="line">                            column = &quot;student_age&quot;,property = &quot;studentAge&quot;</span><br><span class="line">                    ),</span><br><span class="line">                    @Result(</span><br><span class="line">                            column = &quot;student_birthday&quot;,property = &quot;studentBirthday&quot;</span><br><span class="line">                    ),</span><br><span class="line">                    @Result(</span><br><span class="line">                            column = &quot;card_id&quot;,property = &quot;card&quot;,</span><br><span class="line">                            one = @One(select = &quot;com.sut.mapper.CardMapper.findById&quot;)</span><br><span class="line">                    )</span><br><span class="line">            &#125;</span><br><span class="line">    )</span><br><span class="line">    List&lt;Student&gt; findAllStudentAndCard();</span><br></pre></td></tr></table></figure><p>9.4.2 一对多</p><p>9.4.3 多对多</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Mybatis&quot;&gt;&lt;a href=&quot;#Mybatis&quot; class=&quot;headerlink&quot; title=&quot;Mybatis&quot;&gt;&lt;/a&gt;Mybatis&lt;/h1&gt;&lt;h2 id=&quot;1-mybatis基础&quot;&gt;&lt;a href=&quot;#1-mybatis基础&quot; class=&quot;he</summary>
      
    
    
    
    
    <category term="Java" scheme="http://sion-io.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>我的第一篇博客文章</title>
    <link href="http://sion-io.github.io/2024/05/11/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0/"/>
    <id>http://sion-io.github.io/2024/05/11/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0/</id>
    <published>2024-05-11T03:03:43.000Z</published>
    <updated>2024-05-11T07:31:19.458Z</updated>
    
    <content type="html"><![CDATA[<h2 id="喵喵喵！"><a href="#喵喵喵！" class="headerlink" title="喵喵喵！"></a>喵喵喵！</h2><p><img src="/../img/001.jpg" alt="001.jpg"></p><hr><h2 id="猫猫占领世界"><a href="#猫猫占领世界" class="headerlink" title="猫猫占领世界"></a>猫猫占领世界</h2><h1 id="ciallo！！！"><a href="#ciallo！！！" class="headerlink" title="ciallo！！！"></a>ciallo！！！</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;喵喵喵！&quot;&gt;&lt;a href=&quot;#喵喵喵！&quot; class=&quot;headerlink&quot; title=&quot;喵喵喵！&quot;&gt;&lt;/a&gt;喵喵喵！&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/../img/001.jpg&quot; alt=&quot;001.jpg&quot;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;猫猫占</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://sion-io.github.io/2024/05/11/hello-world/"/>
    <id>http://sion-io.github.io/2024/05/11/hello-world/</id>
    <published>2024-05-11T03:01:26.848Z</published>
    <updated>2024-05-11T07:31:04.025Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>

<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>占领世界</title>
  
  <subtitle>Ciallo～(∠・ω&lt; )⌒★</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2024-05-11T07:31:19.465Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>冰川里奈</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Spring</title>
    <link href="http://example.com/2024/05/11/Spring(3)/"/>
    <id>http://example.com/2024/05/11/Spring(3)/</id>
    <published>2024-05-11T06:56:01.000Z</published>
    <updated>2024-05-11T07:31:19.465Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h1><h2 id="1-目前开发存在的问题"><a href="#1-目前开发存在的问题" class="headerlink" title="1.目前开发存在的问题"></a>1.目前开发存在的问题</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1.接口看起来没啥用(IOC)</span><br><span class="line">2.模块之间的耦合度过高(IOC)</span><br><span class="line">3.存在一定的内存浪费(IOC)</span><br><span class="line">4.横向的代码冗余问题没法解决(AOP)</span><br><span class="line">以上问题都可以使用Spring进行解决</span><br></pre></td></tr></table></figure><h2 id="2-Spring简介"><a href="#2-Spring简介" class="headerlink" title="2.Spring简介"></a>2.Spring简介</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Spring就是一个开源的分层的JavaSE/EE应用的轻量级框架。Spring中当选学习的核心是IOC和AOP</span><br><span class="line">Spring优点:</span><br><span class="line">方便解耦，简化开发</span><br><span class="line">方便集成第三方的框架</span><br><span class="line">AOP编程的支持(弥补OOP的缺点)</span><br><span class="line">声明式事务的支持</span><br></pre></td></tr></table></figure><h2 id="3-IOC"><a href="#3-IOC" class="headerlink" title="3.IOC"></a>3.IOC</h2><h3 id="3-1IOC简介"><a href="#3-1IOC简介" class="headerlink" title="3.1IOC简介"></a>3.1IOC简介</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">IOC：控制反转。由Spring反向控制(创建，注入)程序中所需要的外部资源</span><br><span class="line">Spring控制的资源会全部放入到Sprin容器中，Spring会根据程序员配置的信息自动把这些外部资源注入到所需要的位置。</span><br></pre></td></tr></table></figure><h3 id="3-2-IOC的入门程序"><a href="#3-2-IOC的入门程序" class="headerlink" title="3.2 IOC的入门程序"></a>3.2 IOC的入门程序</h3><p>需求:模拟一个Controller层需要一个Service层对象</p><h4 id="3-2-1-创建项目引入依赖"><a href="#3-2-1-创建项目引入依赖" class="headerlink" title="3.2.1 创建项目引入依赖"></a>3.2.1 创建项目引入依赖</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-context&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;5.3.10&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br></pre></td></tr></table></figure><h4 id="3-2-2-编写项目结构"><a href="#3-2-2-编写项目结构" class="headerlink" title="3.2.2 编写项目结构"></a>3.2.2 编写项目结构</h4><h4 id="3-2-3-编写spring配置文件"><a href="#3-2-3-编写spring配置文件" class="headerlink" title="3.2.3 编写spring配置文件"></a>3.2.3 编写spring配置文件</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">       xmlns:context=&quot;http://www.springframework.org/schema/context&quot;</span><br><span class="line">       xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot;</span><br><span class="line">       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</span><br><span class="line">        https://www.springframework.org/schema/beans/spring-beans.xsd</span><br><span class="line">        http://www.springframework.org/schema/context</span><br><span class="line">        https://www.springframework.org/schema/context/spring-context.xsd</span><br><span class="line">        http://www.springframework.org/schema/aop</span><br><span class="line">        https://www.springframework.org/schema/aop/spring-aop.xsd&quot;&gt;</span><br><span class="line">    &lt;!--Controller层需要一个Service层对象--&gt;</span><br><span class="line">    &lt;!--下面这行配置等价于 UserServiceImpl  userService = new UserServiceImpl()--&gt;</span><br><span class="line">    &lt;bean id=&quot;userService&quot; class=&quot;com.lxk.service.impl.UserServiceImpl&quot;&gt;&lt;/bean&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><h4 id="3-2-4-编写测试代码"><a href="#3-2-4-编写测试代码" class="headerlink" title="3.2.4 编写测试代码"></a>3.2.4 编写测试代码</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">        ClassPathXmlApplicationContext applicationContext = new ClassPathXmlApplicationContext(&quot;spring.xml&quot;);</span><br><span class="line">        UserService userService = applicationContext.getBean(&quot;userService&quot;, UserService.class);</span><br><span class="line">        userService.method01();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">通过以上代码测试，可以得知已经使用Spring来完成对象的创建。多次获取的对象也是同一个对象，说明默认是单例的。</span><br></pre></td></tr></table></figure><h4 id="3-2-5-完成对象的注入"><a href="#3-2-5-完成对象的注入" class="headerlink" title="3.2.5 完成对象的注入"></a>3.2.5 完成对象的注入</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=&quot;userService&quot; class=&quot;com.lxk.service.impl.UserServiceImpl&quot;&gt;&lt;/bean&gt;</span><br><span class="line">&lt;!--UserController userController= new UserController();--&gt;</span><br><span class="line">&lt;bean id=&quot;userController&quot; class=&quot;com.lxk.controller.UserController&quot;&gt;</span><br><span class="line">    &lt;!--userController.setUserService(userService) 使用属性的Set注入 name:当前bean的属性名 ref:需要租注入的对象的id--&gt;</span><br><span class="line">    &lt;property name=&quot;userService&quot; ref=&quot;userService&quot;&gt;&lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public class UserController &#123;</span><br><span class="line">    private UserService userService;</span><br><span class="line"></span><br><span class="line">    //用于Spring的注入</span><br><span class="line">    public void setUserService(UserService userService)&#123;</span><br><span class="line">        this.userService=userService;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述就完成了Spring创建UserServiceImpl并且注入到UserController层中</p><h3 id="3-3-IOC配置"><a href="#3-3-IOC配置" class="headerlink" title="3.3 IOC配置"></a>3.3 IOC配置</h3><h4 id="3-3-1-bean标签"><a href="#3-3-1-bean标签" class="headerlink" title="3.3.1 bean标签"></a>3.3.1 bean标签</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">作用:定义Spring中的资源(Java对象)，使用此标签定义的资源将由Spring管理</span><br><span class="line">注意:此标签和new一样都是依赖于构造方法</span><br><span class="line">属性:</span><br><span class="line">id:bean的名字。其他地方可以通过id获取此bean对象</span><br><span class="line">name:bean的名字。其他地方可以通过id获取此bean对象。不推荐使用</span><br><span class="line">class:bean的类型</span><br><span class="line">scope:作用范围</span><br><span class="line">singleton：创建的对象保存到容器中，是一个单例对象(默认)</span><br><span class="line">prototype：创建的对象保存到容器中，是一个多例对象</span><br><span class="line">request，session，global session(知道即可)</span><br></pre></td></tr></table></figure><h4 id="3-3-2-生命周期"><a href="#3-3-2-生命周期" class="headerlink" title="3.3.2 生命周期"></a>3.3.2 生命周期</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">生命周期的属性:init-method   destroy-method</span><br><span class="line">作用:定义bean对象在初始化和销毁阶段分别做什么事情</span><br><span class="line">属性值:自定义的方法名</span><br><span class="line">创建和销毁的时机:</span><br><span class="line">创建时:</span><br><span class="line">当scope=singleton。Spring容器只会创建一个对象，所以init-method对应的方法也只会执行一次，在容器初始化的时候执行。</span><br><span class="line">当scope=prototype。Spring容器会创建多个对象，在容器初始化和获取此对象的时候都会执行</span><br><span class="line">销毁时:</span><br><span class="line">当scope=singleton。关闭容器的时候就会导致容器中所有的实例被销毁。并且执行每个实例对象destroy-method对应的方法。也只会执行一次。</span><br><span class="line">当scope=prototype。容器中的对象属于不可控状态，因为对象的销毁会交给gc来执行。</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public void init()&#123;</span><br><span class="line">    System.out.println(&quot;初始化&quot;);</span><br><span class="line">&#125;</span><br><span class="line">public void destroy()&#123;</span><br><span class="line">    System.out.println(&quot;死亡&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=&quot;userService&quot; class=&quot;com.lxk.service.impl.UserServiceImpl222&quot; scope=&quot;singleton&quot; init-method=&quot;init&quot; destroy-method=&quot;destroy&quot;&gt;&lt;/bean&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">        ClassPathXmlApplicationContext applicationContext = new ClassPathXmlApplicationContext(&quot;spring.xml&quot;);</span><br><span class="line">        UserServiceImpl222 userService1 = applicationContext.getBean(&quot;userService&quot;, UserServiceImpl222.class);</span><br><span class="line">        UserServiceImpl222 userService2 = applicationContext.getBean(&quot;userService&quot;, UserServiceImpl222.class);</span><br><span class="line">        //关闭容器</span><br><span class="line">        applicationContext.registerShutdownHook();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="3-4-DI"><a href="#3-4-DI" class="headerlink" title="3.4 DI"></a>3.4 DI</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DI:依赖注入，使用IOC创建的资源全部要交给IOC容器进行管理。DI主要负责把资源注入到程序中所需要的地方</span><br></pre></td></tr></table></figure><h4 id="3-4-1-Set注入-主流"><a href="#3-4-1-Set注入-主流" class="headerlink" title="3.4.1 Set注入(主流)"></a>3.4.1 Set注入(主流)</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">property标签:使用属性对应的set方法为bean提供资源，</span><br><span class="line">属性:</span><br><span class="line">name:对应的时bean中的属性名。要求该属性必须提供可以访问的set方法</span><br><span class="line">value:设定基本数据类型的值和String。不能和ref同时出现</span><br><span class="line">ref:设定引用数据类型对应的bean的id。不能和value同时出现</span><br></pre></td></tr></table></figure><h4 id="3-4-2-构造器注入"><a href="#3-4-2-构造器注入" class="headerlink" title="3.4.2 构造器注入"></a>3.4.2 构造器注入</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=&quot;user&quot; class=&quot;com.lxk.pojo.User&quot;&gt;</span><br><span class="line">    &lt;constructor-arg name=&quot;userId&quot; value=&quot;1001&quot;/&gt;</span><br><span class="line">    &lt;constructor-arg name=&quot;userName&quot; value=&quot;李四&quot;/&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line">官方不推荐使用。标记为过时的。之所以没有删除就为了兼容早期项目的升级工作</span><br></pre></td></tr></table></figure><h2 id="4-Spring配置文件"><a href="#4-Spring配置文件" class="headerlink" title="4.Spring配置文件"></a>4.Spring配置文件</h2><h3 id="4-1-加载资源文件"><a href="#4-1-加载资源文件" class="headerlink" title="4.1 加载资源文件"></a>4.1 加载资源文件</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysql_driver=com.mysql.cj.jdbc.Driver</span><br><span class="line">mysql_url=jdbc:mysql://127.0.0.1:3306/filmdb?characterEncoding=utf8&amp;serverTimezone=Asia/Shanghai</span><br><span class="line">mysql_username=root</span><br><span class="line">mysql_password=1234</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--加载资源文件--&gt;</span><br><span class="line">&lt;context:property-placeholder location=&quot;classpath:mysql.properties&quot;/&gt;</span><br><span class="line">&lt;!--配置数据源--&gt;</span><br><span class="line">&lt;bean id=&quot;dataSource&quot; class=&quot;com.lxk.pojo.MyDataSource&quot;&gt;</span><br><span class="line">    &lt;property name=&quot;driver&quot; value=&quot;$&#123;mysql_driver&#125;&quot;/&gt;</span><br><span class="line">    &lt;property name=&quot;url&quot; value=&quot;$&#123;mysql_url&#125;&quot;/&gt;</span><br><span class="line">    &lt;property name=&quot;userName&quot; value=&quot;$&#123;mysql_username&#125;&quot;/&gt;</span><br><span class="line">    &lt;property name=&quot;password&quot; value=&quot;$&#123;mysql_password&#125;&quot;/&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure><h3 id="4-2-导入配置文件"><a href="#4-2-导入配置文件" class="headerlink" title="4.2 导入配置文件"></a>4.2 导入配置文件</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;import resource=&quot;classpath:spring-lxk.xml&quot;/&gt;</span><br><span class="line"></span><br><span class="line">在Spring配置文件中可以引入其他Spring的配置文件。</span><br><span class="line">但是可能会存在同名bean的问题，id相同的多个bean，后定义的会覆盖先定义的。所以import标签出现的位置可能会影响最终的bean</span><br></pre></td></tr></table></figure><h3 id="4-3-Spirng配置Druid"><a href="#4-3-Spirng配置Druid" class="headerlink" title="4.3 Spirng配置Druid"></a>4.3 Spirng配置Druid</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--加载资源文件--&gt;</span><br><span class="line">&lt;context:property-placeholder location=&quot;classpath:mysql.properties&quot;/&gt;</span><br><span class="line">&lt;!--配置数据源--&gt;</span><br><span class="line">&lt;bean id=&quot;dataSource&quot; class=&quot;com.alibaba.druid.pool.DruidDataSource&quot;&gt;</span><br><span class="line">    &lt;property name=&quot;driverClassName&quot; value=&quot;$&#123;mysql_driver&#125;&quot;/&gt;</span><br><span class="line">    &lt;property name=&quot;url&quot; value=&quot;$&#123;mysql_url&#125;&quot;/&gt;</span><br><span class="line">    &lt;property name=&quot;username&quot; value=&quot;$&#123;mysql_username&#125;&quot;/&gt;</span><br><span class="line">    &lt;property name=&quot;password&quot; value=&quot;$&#123;mysql_password&#125;&quot;/&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure><h2 id="5-Spring整合Mybatis"><a href="#5-Spring整合Mybatis" class="headerlink" title="5.Spring整合Mybatis"></a>5.Spring整合Mybatis</h2><h3 id="5-1-编写依赖文件"><a href="#5-1-编写依赖文件" class="headerlink" title="5.1 编写依赖文件"></a>5.1 编写依赖文件</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;8.0.19&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.mybatis&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;mybatis&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;3.5.10&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-context&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;5.3.10&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-jdbc&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;5.3.10&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;druid&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;1.2.12&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.mybatis&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;mybatis-spring&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;2.1.0&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;1.18.12&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;junit&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;junit&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;4.11&lt;/version&gt;</span><br><span class="line">        &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;com.github.pagehelper&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;pagehelper&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;5.1.2&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure><p>5.2 编写配置文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">       xmlns:context=&quot;http://www.springframework.org/schema/context&quot;</span><br><span class="line">       xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot;</span><br><span class="line">       xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot;</span><br><span class="line">       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</span><br><span class="line">        https://www.springframework.org/schema/beans/spring-beans.xsd</span><br><span class="line">        http://www.springframework.org/schema/context</span><br><span class="line">        https://www.springframework.org/schema/context/spring-context.xsd</span><br><span class="line">        http://www.springframework.org/schema/aop</span><br><span class="line">        https://www.springframework.org/schema/aop/spring-aop.xsd</span><br><span class="line">        http://www.springframework.org/schema/tx</span><br><span class="line">        https://www.springframework.org/schema/tx/spring-tx.xsd&quot;&gt;</span><br><span class="line">    &lt;!--加载资源文件--&gt;</span><br><span class="line">    &lt;context:property-placeholder location=&quot;classpath:mysql.properties&quot;/&gt;</span><br><span class="line">    &lt;!--配置数据源--&gt;</span><br><span class="line">    &lt;bean id=&quot;dataSource&quot; class=&quot;com.alibaba.druid.pool.DruidDataSource&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;driverClassName&quot; value=&quot;$&#123;mysql_driver&#125;&quot;/&gt;</span><br><span class="line">        &lt;property name=&quot;url&quot; value=&quot;$&#123;mysql_url&#125;&quot;/&gt;</span><br><span class="line">        &lt;property name=&quot;username&quot; value=&quot;$&#123;mysql_username&#125;&quot;/&gt;</span><br><span class="line">        &lt;property name=&quot;password&quot; value=&quot;$&#123;mysql_password&#125;&quot;/&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">    &lt;!--mybatis配置--&gt;</span><br><span class="line">    &lt;bean id=&quot;configuration&quot; class=&quot;org.apache.ibatis.session.Configuration&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;mapUnderscoreToCamelCase&quot; value=&quot;true&quot;/&gt;</span><br><span class="line">        &lt;property name=&quot;logImpl&quot; value=&quot;org.apache.ibatis.logging.stdout.StdOutImpl&quot;/&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">    &lt;!--配置spring和mybatis整合--&gt;</span><br><span class="line">    &lt;bean class=&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;/&gt;</span><br><span class="line">        &lt;property name=&quot;configuration&quot; ref=&quot;configuration&quot;/&gt;</span><br><span class="line">        &lt;property name=&quot;typeAliasesPackage&quot; value=&quot;com.lxk.pojo&quot;/&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">    &lt;!--加载映射文件，并且创建mapper接口的代理对象，并且放入到容器中  批量生成的对象的id为接口名 首字母大小写都可以--&gt;</span><br><span class="line">    &lt;bean class=&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;basePackage&quot; value=&quot;com.lxk.mapper&quot;/&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--mapper代理对象注入到service层中--&gt;</span><br><span class="line">    &lt;bean id=&quot;filmService&quot; class=&quot;com.lxk.service.impl.FilmServiceImpl&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;filmMapper&quot; ref=&quot;filmMapper&quot;/&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">    &lt;bean id=&quot;filmController&quot; class=&quot;com.lxk.controller.FilmController&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;filmService&quot; ref=&quot;filmService&quot;/&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><h3 id="5-3-编写业务代码"><a href="#5-3-编写业务代码" class="headerlink" title="5.3 编写业务代码"></a>5.3 编写业务代码</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">查看视频</span><br></pre></td></tr></table></figure><h2 id="6-Spring-IOC注解"><a href="#6-Spring-IOC注解" class="headerlink" title="6.Spring IOC注解"></a>6.Spring IOC注解</h2><h3 id="6-1-开启注解开发"><a href="#6-1-开启注解开发" class="headerlink" title="6.1 开启注解开发"></a>6.1 开启注解开发</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--开启注解扫描--&gt;</span><br><span class="line">&lt;context:component-scan base-package=&quot;com.lxk&quot;&gt;&lt;/context:component-scan&gt;</span><br><span class="line">说明:</span><br><span class="line">1.在进行扫描的时候会对配置的包以及子包的所有文件进行扫描</span><br><span class="line">2.扫描过程中仅读取合法的Java文件</span><br><span class="line">3.扫描过程中仅能识别对Spring有效的注解</span><br><span class="line">4.扫描结束后会将识别的注解转成Java对应的资源加载到容器中</span><br><span class="line">5.支持混合开发(但是推荐注解开发)</span><br></pre></td></tr></table></figure><h3 id="6-2-常用的注解"><a href="#6-2-常用的注解" class="headerlink" title="6.2 常用的注解"></a>6.2 常用的注解</h3><h4 id="6-2-1-bean的定义"><a href="#6-2-1-bean的定义" class="headerlink" title="6.2.1 bean的定义"></a>6.2.1 bean的定义</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">名称:@Component，@Repository，@Service，@Controller</span><br><span class="line">类型:类注解</span><br><span class="line">位置:类定义的上面</span><br><span class="line">作用：设置该类为Spring管理的bean(bean的id就是类名(首字母小写))</span><br><span class="line">属性:value:设置bean的id</span><br><span class="line">说明:@Repository，@Service，@Controller都是@Component的衍生注解。功能都一样。只是具备了不同的语义。</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@Service</span><br><span class="line">public class FilmServiceImpl implements FilmService &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-2-2-bean的作用域"><a href="#6-2-2-bean的作用域" class="headerlink" title="6.2.2 bean的作用域"></a>6.2.2 bean的作用域</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">名称:@Scope</span><br><span class="line">类型:类注解</span><br><span class="line">位置:类定义的上面</span><br><span class="line">作用:设置该类作为bean的对应的scope属性</span><br></pre></td></tr></table></figure><h4 id="6-2-3-bean的生命周期"><a href="#6-2-3-bean的生命周期" class="headerlink" title="6.2.3 bean的生命周期"></a>6.2.3 bean的生命周期</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">名称:@PostConstruct，@PreDestroy</span><br><span class="line">类型:方法注解</span><br><span class="line">位置:方法定义的上面</span><br><span class="line">作用:设置该类对应的bean对象的两个生命周期的方法</span><br><span class="line">案例:</span><br><span class="line">@PostConstruct</span><br><span class="line">public void init()&#123;</span><br><span class="line">    System.out.println(&quot;初始化&quot;);</span><br><span class="line">&#125;</span><br><span class="line">@PreDestroy</span><br><span class="line">public void destroy()&#123;</span><br><span class="line">    System.out.println(&quot;销毁&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-2-4-依赖注入注解"><a href="#6-2-4-依赖注入注解" class="headerlink" title="6.2.4 依赖注入注解"></a>6.2.4 依赖注入注解</h4><h5 id="6-2-4-1-方式一"><a href="#6-2-4-1-方式一" class="headerlink" title="6.2.4.1 方式一"></a>6.2.4.1 方式一</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">名称:@Autowired，@Qualifier</span><br><span class="line">类型:属性注解</span><br><span class="line">位置:属性上面</span><br><span class="line">作用:设置该属性注入的对象</span><br><span class="line">案例:</span><br><span class="line">@Autowired</span><br><span class="line">@Qualifier(&quot;filmServiceImpl&quot;)</span><br><span class="line">private FilmService filmService;</span><br><span class="line">说明:单独使用@Autowired默认是根据类型(byType)进行装配(注入).也可以配合@Qualifier注解完成byName装配。</span><br></pre></td></tr></table></figure><h5 id="6-2-4-2-方式一的衍生注解"><a href="#6-2-4-2-方式一的衍生注解" class="headerlink" title="6.2.4.2 方式一的衍生注解"></a>6.2.4.2 方式一的衍生注解</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">名称:@Primay</span><br><span class="line">类型:类注解</span><br><span class="line">位置:类上面</span><br><span class="line">作用:设置该类对应的bean在自动装配的时候具有优先级</span><br><span class="line">说明:单独使用@Autowired的时候默认根据byType的方式进行自动装配。当出现多个同类型的bean的时候就会导致系统无法识别并且报错。可以使用@Primay注解指定优先级。但是当多个bean都存在优先级配置的时候那么优先级设置无效。</span><br><span class="line">@Service</span><br><span class="line">@Primary</span><br><span class="line">public class FilmServiceImpl implements FilmService &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="6-2-4-3-方式二"><a href="#6-2-4-3-方式二" class="headerlink" title="6.2.4.3 方式二"></a>6.2.4.3 方式二</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">名称:@Resource</span><br><span class="line">类型:属性注解</span><br><span class="line">位置:属性上面</span><br><span class="line">作用:设置该属性注入的对象</span><br><span class="line">案例:</span><br><span class="line">public class FilmController &#123;</span><br><span class="line">    @Resource</span><br><span class="line">    private FilmService filmService;</span><br><span class="line">&#125;</span><br><span class="line">属性:name：指定注入的bean的id</span><br><span class="line">说明:默认是使用byName的方式自动装配。如果byName无法获取到对应的bean那么就根据byType。如果设置了name属性那么智慧根据byName查找。找不到则出现异常</span><br></pre></td></tr></table></figure><h5 id="6-2-4-4-两者的区别"><a href="#6-2-4-4-两者的区别" class="headerlink" title="6.2.4.4 两者的区别"></a>6.2.4.4 两者的区别</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1.提供方不同</span><br><span class="line">@Autowired是Spring提供的。@Resource是J2EE提供的注解</span><br><span class="line">2.默认的自动装配方式不同</span><br><span class="line">@Autowired默认是byType自动装配。@Resource默认是byName自动装配</span><br><span class="line">3.使用方式不同</span><br><span class="line">@Autowired默认是byType自动装配。可以搭配@Qualifier实现byName</span><br><span class="line">@Resource默认是byName自动装配，名字可以通过name属性进行指定。如果没有name属性那么当注解无法根据byName找到对应的bean的时候就会转换成byType，但是指定了name属性就只能按照byName方式进行装配</span><br></pre></td></tr></table></figure><h4 id="6-2-5-加载第三方资源"><a href="#6-2-5-加载第三方资源" class="headerlink" title="6.2.5 加载第三方资源"></a>6.2.5 加载第三方资源</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">名称:@Bean</span><br><span class="line">类型:方法注解</span><br><span class="line">位置:方法上面</span><br><span class="line">作用:设置该方法的返回值作为Spring管理的bean。由于在spring整合mybatis中配置了大量第三方的bean(DruidDataSource,Configuration,SqlSessionFactoryBean,MapperScannerConfigurer)，由于这些bean来自于第三方，所以无法修改源码，只能手动配置(无法使用@Component，@Repository，@Service，@Controller进行定义bean)。解决方案就是使用@Bean注解。</span><br><span class="line">注意事项:@Bean注解所在的类必须在Spring的扫描范围内并且本身就是Spring管理的bean</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@Component</span><br><span class="line">public class DataSourceConfig &#123;</span><br><span class="line"></span><br><span class="line">    @Bean(name = &quot;myDataSource&quot;)</span><br><span class="line">    public DruidDataSource getDruidDataSource()&#123;</span><br><span class="line">        DruidDataSource druidDataSource = new DruidDataSource();</span><br><span class="line">        return druidDataSource;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-2-6-加载资源文件并且注入"><a href="#6-2-6-加载资源文件并且注入" class="headerlink" title="6.2.6 加载资源文件并且注入"></a>6.2.6 加载资源文件并且注入</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">名称:@PropertySource，@Value</span><br><span class="line">类型:类注解，属性注解</span><br><span class="line">位置:类上面，属性上面</span><br><span class="line">作用：@PropertySource:加载资源文件。@Value：给属性赋值(非引用数据类型)</span><br><span class="line">案例:</span><br><span class="line">@Component</span><br><span class="line">@PropertySource(value = &quot;classpath:mysql.properties&quot;)</span><br><span class="line">public class DataSourceConfig &#123;</span><br><span class="line">    @Value(&quot;$&#123;mysql_driver&#125;&quot;)</span><br><span class="line">    private String driver;</span><br><span class="line">    @Value(&quot;$&#123;mysql_url&#125;&quot;)</span><br><span class="line">    private String url;</span><br><span class="line">    @Value(&quot;$&#123;mysql_username&#125;&quot;)</span><br><span class="line">    private String userName;</span><br><span class="line">    @Value(&quot;$&#123;mysql_password&#125;&quot;)</span><br><span class="line">    private String password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-纯注解驱动开发"><a href="#7-纯注解驱动开发" class="headerlink" title="7.纯注解驱动开发"></a>7.纯注解驱动开发</h2><h3 id="7-1-必须的注解"><a href="#7-1-必须的注解" class="headerlink" title="7.1 必须的注解"></a>7.1 必须的注解</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">名称:@Configuration，@ComponentScan，@Import</span><br><span class="line">类型:类注解</span><br><span class="line">位置:类上面</span><br><span class="line">作用:</span><br><span class="line">@Configuration：设置当前类为Spring的核心类，</span><br><span class="line">@ComponentScan：扫描包</span><br><span class="line">@Import：引入其他配置类</span><br><span class="line">说明：</span><br><span class="line">1.@Configuration取代之前的spring.xml配置文件</span><br><span class="line">2.bean的扫描工作交由@ComponentScan注解完成。取代之前配置文件中的&lt;context:component-scan base-package=&quot;com.lxk&quot;&gt;&lt;/context:component-scan&gt;</span><br><span class="line">3.@Import引入外部配置类。在一个类上只能出现一次，需要引入多个配置类则使用数组完成</span><br></pre></td></tr></table></figure><h3 id="7-2-编写JDBC配置"><a href="#7-2-编写JDBC配置" class="headerlink" title="7.2 编写JDBC配置"></a>7.2 编写JDBC配置</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">@Component</span><br><span class="line">@PropertySource(value = &quot;classpath:mysql.properties&quot;)</span><br><span class="line">public class DataSourceConfig &#123;</span><br><span class="line">    @Value(&quot;$&#123;mysql_driver&#125;&quot;)</span><br><span class="line">    private String driver;</span><br><span class="line">    @Value(&quot;$&#123;mysql_url&#125;&quot;)</span><br><span class="line">    private String url;</span><br><span class="line">    @Value(&quot;$&#123;mysql_username&#125;&quot;)</span><br><span class="line">    private String userName;</span><br><span class="line">    @Value(&quot;$&#123;mysql_password&#125;&quot;)</span><br><span class="line">    private String password;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    public DruidDataSource getDruidDataSource()&#123;</span><br><span class="line">        DruidDataSource druidDataSource = new DruidDataSource();</span><br><span class="line">        druidDataSource.setDriverClassName(driver);</span><br><span class="line">        druidDataSource.setUrl(url);</span><br><span class="line">        druidDataSource.setUsername(userName);</span><br><span class="line">        druidDataSource.setPassword(password);</span><br><span class="line">        return druidDataSource;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-3-编写mybatis配置类"><a href="#7-3-编写mybatis配置类" class="headerlink" title="7.3 编写mybatis配置类"></a>7.3 编写mybatis配置类</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">public class MybatisConfig &#123;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    public Configuration getConfiguration()&#123;</span><br><span class="line">        Configuration configuration = new Configuration();</span><br><span class="line">        configuration.setMapUnderscoreToCamelCase(true);</span><br><span class="line">        configuration.setLogImpl(StdOutImpl.class);</span><br><span class="line">        return configuration;</span><br><span class="line">    &#125;</span><br><span class="line">    @Bean</span><br><span class="line">    public SqlSessionFactoryBean getSqlSessionFactoryBean(@Autowired DataSource dataSource,@Autowired Configuration configuration)&#123;</span><br><span class="line">        SqlSessionFactoryBean sqlSessionFactoryBean = new SqlSessionFactoryBean();</span><br><span class="line">        sqlSessionFactoryBean.setDataSource(dataSource);</span><br><span class="line">        sqlSessionFactoryBean.setConfiguration(configuration);</span><br><span class="line">        sqlSessionFactoryBean.setTypeAliasesPackage(&quot;com.lxk.pojo&quot;);</span><br><span class="line">        return sqlSessionFactoryBean;</span><br><span class="line">    &#125;</span><br><span class="line">    @Bean</span><br><span class="line">    public MapperScannerConfigurer getMapperScannerConfigurer()&#123;</span><br><span class="line">        MapperScannerConfigurer mapperScannerConfigurer = new MapperScannerConfigurer();</span><br><span class="line">        mapperScannerConfigurer.setBasePackage(&quot;com.lxk.mapper&quot;);</span><br><span class="line">        return mapperScannerConfigurer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-4-编写spring配置类"><a href="#7-4-编写spring配置类" class="headerlink" title="7.4 编写spring配置类"></a>7.4 编写spring配置类</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">@ComponentScan(&quot;com.lxk&quot;)</span><br><span class="line">@Import(&#123;DataSourceConfig.class,MybatisConfig.class&#125;)</span><br><span class="line">public class SpringConfig &#123; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-5-完成各层代码编写以及测试"><a href="#7-5-完成各层代码编写以及测试" class="headerlink" title="7.5 完成各层代码编写以及测试"></a>7.5 完成各层代码编写以及测试</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">AnnotationConfigApplicationContext applicationContext = new AnnotationConfigApplicationContext(SpringConfig.class);</span><br><span class="line">        FilmController filmController = applicationContext.getBean(&quot;filmController&quot;, FilmController.class);</span><br><span class="line">        List&lt;Film&gt; list = filmController.findAll();</span><br><span class="line">        for (Film film : list) &#123;</span><br><span class="line">            System.out.println(film);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h2 id="8-AOP"><a href="#8-AOP" class="headerlink" title="8.AOP"></a>8.AOP</h2><h3 id="8-1-AOP简介"><a href="#8-1-AOP简介" class="headerlink" title="8.1 AOP简介"></a>8.1 AOP简介</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">AOP：面向切面编程。它是一种编程范式。用于指导开发者如何组织程序结构。</span><br><span class="line">在Java程序中就是为了弥补OOP的不足。是基于OOP的基础上进行横向的开发。</span><br><span class="line">OOP的程序开发都是以类为主体模型，一切都是围绕着对象进行。</span><br><span class="line">AOP程序只要关注的是OOP开发中的一些共性功能，一切都是围绕着共性功能进行开发。</span><br></pre></td></tr></table></figure><h3 id="8-2-AOP的作用"><a href="#8-2-AOP的作用" class="headerlink" title="8.2 AOP的作用"></a>8.2 AOP的作用</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">AOP的中心思想就是从各个行业入手进行标准化，规划范。一步一步把所有功能进行逐一开发，最终程序会以组合的方式完成具体业务模块甚至整个程序的开发</span><br><span class="line">愿景:将程序开发制作从手动走向半自动化/全自动开发。实现&quot;插拔式组件体系&quot;</span><br></pre></td></tr></table></figure><h3 id="8-3-AOP优点"><a href="#8-3-AOP优点" class="headerlink" title="8.3 AOP优点"></a>8.3 AOP优点</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.提高代码的复用性</span><br><span class="line">2.业务代码更加简洁</span><br><span class="line">3.业务代码的维护更加方便</span><br></pre></td></tr></table></figure><h3 id="8-4-AOP的入门"><a href="#8-4-AOP的入门" class="headerlink" title="8.4 AOP的入门"></a>8.4 AOP的入门</h3><h4 id="8-4-1-AOP的相关概念"><a href="#8-4-1-AOP的相关概念" class="headerlink" title="8.4.1 AOP的相关概念"></a>8.4.1 AOP的相关概念</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">JoinPoint:连接点:所有的方法</span><br><span class="line">PointCut:切入点:需要挖掉共性代码的方法</span><br><span class="line">Advice:通知:就是挖掉的共性代码。最终以方法的形式存在</span><br><span class="line">Aspect:切面:共性代码(通知)和所挖位置(切入点)的对应关系</span><br><span class="line">Target:目标对象:就是挖掉共性代码之后的类产生的对象。(这种对象是无法完成工作的)</span><br><span class="line">Weaving:织入:将挖掉的共性代码回填的动态过程</span><br><span class="line">Proxy:代理:目标对象无法完成工作，需要进行代码回填。回填后通过代理模式产生的代理对象来进行最终的工作</span><br></pre></td></tr></table></figure><h4 id="8-4-2-AOP入门程序的开发思路"><a href="#8-4-2-AOP入门程序的开发思路" class="headerlink" title="8.4.2 AOP入门程序的开发思路"></a>8.4.2 AOP入门程序的开发思路</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">开发阶段:</span><br><span class="line">1.正常的功能开发</span><br><span class="line">2.挖出共性代码完成通知</span><br><span class="line">3.在配置文件中声明切入点</span><br><span class="line">4.在配置文件中声明切面</span><br><span class="line">运行阶段:</span><br><span class="line">Spring容器加载配置后会监控所有的切入点方法的运行，当容器监控到方法(目标对象中的切入点)被运行，会根据通知类型在代理对象中的对应位置将通知织入，最终执行的是代理对象织入后的方法。</span><br></pre></td></tr></table></figure><h3 id="8-4-3-入门程序编写"><a href="#8-4-3-入门程序编写" class="headerlink" title="8.4.3 入门程序编写"></a>8.4.3 入门程序编写</h3><h4 id="8-4-3-1-创建项目导入依赖"><a href="#8-4-3-1-创建项目导入依赖" class="headerlink" title="8.4.3.1 创建项目导入依赖"></a>8.4.3.1 创建项目导入依赖</h4><h4 id="8-4-3-2-正常的功能开发"><a href="#8-4-3-2-正常的功能开发" class="headerlink" title="8.4.3.2 正常的功能开发"></a>8.4.3.2 正常的功能开发</h4><h4 id="8-4-3-3-挖出共性代码变为通知"><a href="#8-4-3-3-挖出共性代码变为通知" class="headerlink" title="8.4.3.3 挖出共性代码变为通知"></a>8.4.3.3 挖出共性代码变为通知</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public class TxAdvice &#123;</span><br><span class="line"></span><br><span class="line">    public void openTx()&#123;</span><br><span class="line">        System.out.println(&quot;开启事务&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    public void commitTx()&#123;</span><br><span class="line">        System.out.println(&quot;提交事务&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="8-4-3-4-配置AOP"><a href="#8-4-3-4-配置AOP" class="headerlink" title="8.4.3.4 配置AOP"></a>8.4.3.4 配置AOP</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--1.将通知和目标对象加载到容器中--&gt;</span><br><span class="line">&lt;!--由于使用了IOC的注解开发，所以无需单独配置通知和目标对象的bean--&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--2.AOP配置--&gt;</span><br><span class="line">&lt;aop:config&gt;</span><br><span class="line">    &lt;!--配日志切入点--&gt;</span><br><span class="line">    &lt;aop:pointcut id=&quot;pt&quot; expression=&quot;execution(* *..*(..))&quot;/&gt;</span><br><span class="line">    &lt;!--配置切面--&gt;</span><br><span class="line">    &lt;aop:aspect ref=&quot;txAdvice&quot;&gt;</span><br><span class="line">        &lt;!--通知类型--&gt;</span><br><span class="line">        &lt;aop:before method=&quot;openTx&quot; pointcut-ref=&quot;pt&quot;/&gt;</span><br><span class="line">        &lt;aop:after method=&quot;commitTx&quot; pointcut-ref=&quot;pt&quot;/&gt;</span><br><span class="line">    &lt;/aop:aspect&gt;</span><br><span class="line">&lt;/aop:config&gt;</span><br></pre></td></tr></table></figure><h4 id="8-4-3-5-编写测试类"><a href="#8-4-3-5-编写测试类" class="headerlink" title="8.4.3.5 编写测试类"></a>8.4.3.5 编写测试类</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void method01()&#123;</span><br><span class="line">    ClassPathXmlApplicationContext applicationContext = new ClassPathXmlApplicationContext(&quot;spring.xml&quot;);</span><br><span class="line">    StudentController studentController = applicationContext.getBean(&quot;studentController&quot;, StudentController.class);</span><br><span class="line">    studentController.add();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-4-4-配置详解"><a href="#8-4-4-配置详解" class="headerlink" title="8.4.4 配置详解"></a>8.4.4 配置详解</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">1.AOP配置</span><br><span class="line">标签名称:aop:config</span><br><span class="line">作用:表示配置AOP</span><br><span class="line">说明:在Spring配置文件中可以出现多个aop配置</span><br><span class="line"></span><br><span class="line">2.切入点配置</span><br><span class="line">标签名称:aop:pointcut</span><br><span class="line">作用:配置切入点</span><br><span class="line">属性:expression:切入点表达式。用于定位到切入点(可以使用各种通配符一次性定义多个切入点方法)</span><br><span class="line">说明:在aop:config中可以配置多个aop:pointcut</span><br><span class="line"></span><br><span class="line">3.切面配置</span><br><span class="line">标签名称:aop:aspect</span><br><span class="line">作用:配置通知和切入点之间的对应法关系</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">4.通知类型</span><br><span class="line">AOP中一共有5种通知类型</span><br><span class="line">前置通知:aop:before</span><br><span class="line">简介：在原始方法(目标对象中的方法)执行之前执行aop:before指向的通知方法，如果通知方法执行期间出现了异常那么会阻止原始方法的执行。</span><br><span class="line">应用场景:数据校验</span><br><span class="line"></span><br><span class="line">后置通知:aop:after</span><br><span class="line">简介：在原始方法(目标对象中的方法)执行之后执行aop:after指向的通知方法。无论原始方法是否出现异常都不会影响aop:after指向的通知方法的执行</span><br><span class="line">应用场景:现场处理</span><br><span class="line"></span><br><span class="line">返回后通知:aop:after-returning</span><br><span class="line">简介:原始方法执行完毕后并且返回结果后执行，如果原始方法出现异常那么则无法执行此通知指向的方法。</span><br><span class="line">应用场景:返回值的相关数据处理</span><br><span class="line"></span><br><span class="line">抛出异常后通知:aop:after-throwing</span><br><span class="line">简介:原始方法执行过程中出现异常则执行此通知指向的方法，原始方法没有异常则无法执行</span><br><span class="line">应用场景:异常的后续处理</span><br><span class="line"></span><br><span class="line">环绕通知:aop:around</span><br><span class="line">简述:在原始方法执行前后都执行</span><br><span class="line">注意:环绕通知是在原始方法的前后添加共性代码，因为在环绕通知重要存在对原始方法的显示调用。环绕通知的方法的返回值必须是Object类型，否则就会造成无法拦截原始方法的返回，如果原始方法的返回值为void，那么环绕通知的指向的方法的返回值也可以为void。</span><br><span class="line">在环绕通知中可以使用proceed()方法来调用原始方法，由于无法预知原始方法在运行在是否会出现异常，所以环绕通知指向的方法必须强制排除异常。</span><br><span class="line"></span><br><span class="line">5.切入点表达式</span><br><span class="line">切入点配置最终要描述的事具体的方法。切入点表达式就是快速匹配方法描述的通配格式。</span><br><span class="line">语法：关键字(访问修饰符 返回值类型 包名.类名.方法名(参数) 异常名)</span><br><span class="line">通配符:</span><br><span class="line">*:单个独立的任意字符，可以单独使用，也可以作为前缀或者后缀</span><br><span class="line">..:多个连续的任意字符，一般用于简化包名和参数的编写</span><br><span class="line"></span><br><span class="line">案例:</span><br><span class="line">execution(public void *..*.*(..)):匹配项目中所有的public修饰的返回值为void的方法</span><br><span class="line">execution(public void com.lxk.service.*.*(..)):匹配指定包下所有的类中的public修饰的返回值为void的方法</span><br><span class="line">execution(public void com.lxk.service.Student*.delete*(int))：匹配指定包下以Student开头的类中以delete开头的方法并且修饰符为public，返回值为void，参数为int类型的方法</span><br></pre></td></tr></table></figure><h3 id="8-5-AOP注解"><a href="#8-5-AOP注解" class="headerlink" title="8.5 AOP注解"></a>8.5 AOP注解</h3><h4 id="8-5-1-开启AOP注解支持"><a href="#8-5-1-开启AOP注解支持" class="headerlink" title="8.5.1 开启AOP注解支持"></a>8.5.1 开启AOP注解支持</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;aop:aspectj-autoproxy&gt;&lt;/aop:aspectj-autoproxy&gt;</span><br></pre></td></tr></table></figure><h4 id="8-5-2-编写通知的代码"><a href="#8-5-2-编写通知的代码" class="headerlink" title="8.5.2 编写通知的代码"></a>8.5.2 编写通知的代码</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">@Component</span><br><span class="line">@Aspect</span><br><span class="line">public class TxAdvice &#123;</span><br><span class="line"></span><br><span class="line">    @Pointcut(&quot;execution(public * *..*ServiceImpl.delete*(..))&quot;)</span><br><span class="line">    public void pt()&#123;&#125;</span><br><span class="line"></span><br><span class="line">    @Before(value = &quot;pt()&quot;)</span><br><span class="line">    public void openTx()&#123;</span><br><span class="line">        System.out.println(&quot;开启事务&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    @After(value = &quot;pt()&quot;)</span><br><span class="line">    public void commitTx()&#123;</span><br><span class="line">        System.out.println(&quot;提交事务&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    @AfterThrowing(value = &quot;pt()&quot;,throwing = &quot;ta&quot;)</span><br><span class="line">    public void afterThrowing(Throwable ta)&#123;</span><br><span class="line">        System.out.println(&quot;异常通知&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    @AfterReturning(value = &quot;pt()&quot;)</span><br><span class="line">    public void afterReturning()&#123;</span><br><span class="line">        System.out.println(&quot;返回后通知&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    @Around(&quot;pt()&quot;)</span><br><span class="line">    public Object around(ProceedingJoinPoint pjp)throws Throwable&#123;</span><br><span class="line">        System.out.println(&quot;环绕前&quot;);</span><br><span class="line">        Object proceed = pjp.proceed();</span><br><span class="line">        System.out.println(&quot;环绕后&quot;);</span><br><span class="line">        return proceed;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-6-纯注解驱动开发"><a href="#8-6-纯注解驱动开发" class="headerlink" title="8.6 纯注解驱动开发"></a>8.6 纯注解驱动开发</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@EnableAspectJAutoProxy：表示开启AOP注解开发的支持</span><br></pre></td></tr></table></figure><h3 id="8-7-通知类型的执行顺序"><a href="#8-7-通知类型的执行顺序" class="headerlink" title="8.7 通知类型的执行顺序"></a>8.7 通知类型的执行顺序</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">不出现异常:</span><br><span class="line">Around start</span><br><span class="line">Before</span><br><span class="line">原始方法</span><br><span class="line">After Returning</span><br><span class="line">After</span><br><span class="line">Around end</span><br><span class="line"></span><br><span class="line">出现异常:</span><br><span class="line">Around start</span><br><span class="line">Before</span><br><span class="line">原始方法</span><br><span class="line">After Throwing</span><br><span class="line">After</span><br></pre></td></tr></table></figure><h2 id="9-Spring事务"><a href="#9-Spring事务" class="headerlink" title="9.Spring事务"></a>9.Spring事务</h2><h3 id="9-1-Spring提供的解决方案"><a href="#9-1-Spring提供的解决方案" class="headerlink" title="9.1 Spring提供的解决方案"></a>9.1 Spring提供的解决方案</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">PlatformTransactionManager:获取事务，提交事务，回滚事务</span><br><span class="line">TransactionDefinition：定义事务的基本信息。包括获取事务定义的时间，获取事务的名称，获取事务的读写属性，获取事务超时时间，获取事务的隔离级别，获取事务的传播特性</span><br><span class="line">TransactionStatus：定义了事务在执行过程中某个时间节点上事务的状态信息</span><br><span class="line"></span><br><span class="line">上述三个接口是Spring提供的标准方案但是本身没有提供实现。一般企业中都是使用Spring JDBC实现的方案(DataSourceTransactionManager)。</span><br></pre></td></tr></table></figure><h3 id="9-2-事务具体实现"><a href="#9-2-事务具体实现" class="headerlink" title="9.2 事务具体实现"></a>9.2 事务具体实现</h3><h4 id="9-2-1-编程式事务"><a href="#9-2-1-编程式事务" class="headerlink" title="9.2.1 编程式事务"></a>9.2.1 编程式事务</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">public String addStudentAndScores(StudentVO studentVO) &#123;</span><br><span class="line">        Student student = studentVO.getStudent();</span><br><span class="line">        //创建事务管理器</span><br><span class="line">        DataSourceTransactionManager dstm = new DataSourceTransactionManager();</span><br><span class="line">        //为事务管理器设置和持久化层相同的数据源</span><br><span class="line">        dstm.setDataSource(dataSource);</span><br><span class="line">        //创建事务的定义对象</span><br><span class="line">        DefaultTransactionDefinition dtd = new DefaultTransactionDefinition();</span><br><span class="line">        //开启事务</span><br><span class="line">        TransactionStatus ts = dstm.getTransaction(dtd);</span><br><span class="line">        studentMapper.insert(student);</span><br><span class="line">        try &#123;</span><br><span class="line">            Integer studentId = student.getStudentId();</span><br><span class="line">            int i=5/0;</span><br><span class="line">            List&lt;Score&gt; scoreList = studentVO.getScoreList();</span><br><span class="line">            for (Score score : scoreList) &#123;</span><br><span class="line">                score.setStudentId(studentId);</span><br><span class="line">                scoreMapper.insert(score);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            dstm.rollback(ts);</span><br><span class="line">        &#125;</span><br><span class="line">        //提交事务</span><br><span class="line">        dstm.commit(ts);</span><br><span class="line">        return &quot;success&quot;;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>由于上述关于事务的代码出现了横向冗余问题，可以使用AOP解决</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">@Component</span><br><span class="line">@Aspect</span><br><span class="line">public class TxAdvice &#123;</span><br><span class="line">    @Resource</span><br><span class="line">    private DruidDataSource dataSource;</span><br><span class="line"></span><br><span class="line">    @Pointcut(&quot;execution(* com.lxk.service.impl.*.add*(..))&quot;)</span><br><span class="line">    public void pt()&#123;&#125;</span><br><span class="line"></span><br><span class="line">    @Around(&quot;pt()&quot;)</span><br><span class="line">    public Object tx(ProceedingJoinPoint pjp) throws Throwable&#123;</span><br><span class="line">        //创建事务管理器</span><br><span class="line">        DataSourceTransactionManager dstm = new DataSourceTransactionManager();</span><br><span class="line">        //为事务管理器设置和持久化层相同的数据源</span><br><span class="line">        dstm.setDataSource(dataSource);</span><br><span class="line">        //创建事务的定义对象</span><br><span class="line">        DefaultTransactionDefinition dtd = new DefaultTransactionDefinition();</span><br><span class="line">        //开启事务</span><br><span class="line">        TransactionStatus ts = dstm.getTransaction(dtd);</span><br><span class="line">        Object proceed = null;</span><br><span class="line">        try &#123;</span><br><span class="line">            proceed = pjp.proceed();</span><br><span class="line">        &#125; catch (Throwable e) &#123;</span><br><span class="line">            dstm.rollback(ts);</span><br><span class="line">        &#125;</span><br><span class="line">        dstm.commit(ts);</span><br><span class="line">        return proceed;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public String addStudentAndScores(StudentVO studentVO) &#123;</span><br><span class="line">        Student student = studentVO.getStudent();</span><br><span class="line">        studentMapper.insert(student);</span><br><span class="line">        Integer studentId = student.getStudentId();</span><br><span class="line">        int i=5/0;</span><br><span class="line">        List&lt;Score&gt; scoreList = studentVO.getScoreList();</span><br><span class="line">        for (Score score : scoreList) &#123;</span><br><span class="line">            score.setStudentId(studentId);</span><br><span class="line">            scoreMapper.insert(score);</span><br><span class="line">        &#125;</span><br><span class="line">        return &quot;success&quot;;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="9-2-2-声明式事务"><a href="#9-2-2-声明式事务" class="headerlink" title="9.2.2 声明式事务"></a>9.2.2 声明式事务</h4><h5 id="9-2-2-1-XML配置"><a href="#9-2-2-1-XML配置" class="headerlink" title="9.2.2.1 XML配置"></a>9.2.2.1 XML配置</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=&quot;transactionManager&quot; class=&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;&gt;</span><br><span class="line">    &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;/&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line">&lt;tx:advice id=&quot;txAdvice&quot; transaction-manager=&quot;transactionManager&quot;&gt;</span><br><span class="line">    &lt;tx:attributes&gt;</span><br><span class="line">        &lt;tx:method name=&quot;find*&quot; read-only=&quot;true&quot;/&gt;</span><br><span class="line">        &lt;tx:method name=&quot;add*&quot; propagation=&quot;REQUIRED&quot;/&gt;</span><br><span class="line">        &lt;tx:method name=&quot;update*&quot; propagation=&quot;REQUIRED&quot;/&gt;</span><br><span class="line">        &lt;tx:method name=&quot;delete*&quot; propagation=&quot;REQUIRED&quot;/&gt;</span><br><span class="line">    &lt;/tx:attributes&gt;</span><br><span class="line">&lt;/tx:advice&gt;</span><br><span class="line">&lt;aop:config&gt;</span><br><span class="line">    &lt;aop:pointcut id=&quot;pt&quot; expression=&quot;execution(* com.lxk.service.impl.*.*(..))&quot;/&gt;</span><br><span class="line">    &lt;aop:advisor advice-ref=&quot;txAdvice&quot; pointcut-ref=&quot;pt&quot;/&gt;</span><br><span class="line">&lt;/aop:config&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">事务传播行为:</span><br><span class="line">REQUIRED：默认的事务传播行为。方法本身没有事务则新建一个事务，如果方法本身存在事务就使用本身的事务。</span><br><span class="line">REQUIRES_NEW：本身没有则新建事务。本身有也不准使用事务。依然新建。</span><br><span class="line">NESTED：没有新建。有还是新建进行嵌套。</span><br><span class="line">SUPPORTS：有就用，没有就不用(非事务的方式运行)。</span><br><span class="line">NOT_SUPPORTED:没有就不用(非事务的方式运行)，有也不用。</span><br><span class="line">NEVER：没有就不用(非事务的方式运行)，如果有抛出异常。</span><br><span class="line">MANDATORY：如果有就使用。没有抛出异常。</span><br></pre></td></tr></table></figure><h5 id="9-2-2-2-注解事务"><a href="#9-2-2-2-注解事务" class="headerlink" title="9.2.2.2 注解事务"></a>9.2.2.2 注解事务</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">开启事务注解</span><br><span class="line">&lt;tx:annotation-driven&gt;&lt;/tx:annotation-driven&gt;</span><br><span class="line"></span><br><span class="line">@Transactional:使用注解控制事务。可以定义在方法上也可以定义在类上</span><br></pre></td></tr></table></figure><h4 id="9-2-3-纯注解驱动"><a href="#9-2-3-纯注解驱动" class="headerlink" title="9.2.3 纯注解驱动"></a>9.2.3 纯注解驱动</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">1.编写配置类</span><br><span class="line">@EnableTransactionManagement 等价于&lt;tx:annotation-driven&gt;&lt;/tx:annotation-driven&gt;</span><br><span class="line">2.编写配置类</span><br><span class="line">@Component</span><br><span class="line">public class TransactionConfig &#123;</span><br><span class="line">    @Bean</span><br><span class="line">    public PlatformTransactionManager getPlatformTransactionManager(@Autowired DataSource dataSource)&#123;</span><br><span class="line">        return new DataSourceTransactionManager(dataSource);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">3.方法上使用注解</span><br><span class="line">@Transactional</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Spring&quot;&gt;&lt;a href=&quot;#Spring&quot; class=&quot;headerlink&quot; title=&quot;Spring&quot;&gt;&lt;/a&gt;Spring&lt;/h1&gt;&lt;h2 id=&quot;1-目前开发存在的问题&quot;&gt;&lt;a href=&quot;#1-目前开发存在的问题&quot; class=&quot;header</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>我的第一篇博客文章</title>
    <link href="http://example.com/2024/05/11/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0/"/>
    <id>http://example.com/2024/05/11/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0/</id>
    <published>2024-05-11T03:03:43.000Z</published>
    <updated>2024-05-11T07:31:19.458Z</updated>
    
    <content type="html"><![CDATA[<h2 id="喵喵喵！"><a href="#喵喵喵！" class="headerlink" title="喵喵喵！"></a>喵喵喵！</h2><p><img src="/../img/001.jpg" alt="001.jpg"></p><hr><h2 id="猫猫占领世界"><a href="#猫猫占领世界" class="headerlink" title="猫猫占领世界"></a>猫猫占领世界</h2><h1 id="ciallo！！！"><a href="#ciallo！！！" class="headerlink" title="ciallo！！！"></a>ciallo！！！</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;喵喵喵！&quot;&gt;&lt;a href=&quot;#喵喵喵！&quot; class=&quot;headerlink&quot; title=&quot;喵喵喵！&quot;&gt;&lt;/a&gt;喵喵喵！&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/../img/001.jpg&quot; alt=&quot;001.jpg&quot;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;猫猫占</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2024/05/11/hello-world/"/>
    <id>http://example.com/2024/05/11/hello-world/</id>
    <published>2024-05-11T03:01:26.848Z</published>
    <updated>2024-05-11T07:31:04.025Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
